//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\GitHub\Sandpit\Compiler\SandpitAntlr\Sandpit.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SandpitLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, INT=11, NEWLINE=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"ID", "LETTER", "INT", "NEWLINE", "WS"
	};


	public SandpitLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SandpitLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'main'", "'end main'", "'procedure'", "'('", "')'", "'end procedure'", 
		"'constant'", "'='", "'var'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "ID", "INT", 
		"NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sandpit.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SandpitLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', 'u', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\\', '\n', '\v', '\f', '\v', '\xE', '\v', '_', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x6', '\r', '\x64', '\n', '\r', '\r', 
		'\r', '\xE', '\r', '\x65', '\x3', '\xE', '\x5', '\xE', 'i', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'm', '\n', '\xE', '\x3', '\xF', 
		'\x6', '\xF', 'p', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 'q', '\x3', 
		'\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\x2', '\x19', '\r', '\x1B', 
		'\xE', '\x1D', '\xF', '\x3', '\x2', '\x5', '\x3', '\x2', '\x32', ';', 
		'\x4', '\x2', '\x43', '\\', '\x63', '|', '\x4', '\x2', '\v', '\v', '\"', 
		'\"', '\x2', 'y', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '$', '\x3', '\x2', '\x2', '\x2', '\a', '-', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x39', '\x3', '\x2', '\x2', '\x2', '\r', ';', '\x3', '\x2', '\x2', 
		'\x2', '\xF', 'I', '\x3', '\x2', '\x2', '\x2', '\x11', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x13', 'T', '\x3', '\x2', '\x2', '\x2', '\x15', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '`', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x1B', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'o', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', 'o', 
		'\x2', '\x2', ' ', '!', '\a', '\x63', '\x2', '\x2', '!', '\"', '\a', 'k', 
		'\x2', '\x2', '\"', '#', '\a', 'p', '\x2', '\x2', '#', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\a', 'g', '\x2', '\x2', '%', '&', '\a', 'p', 
		'\x2', '\x2', '&', '\'', '\a', '\x66', '\x2', '\x2', '\'', '(', '\a', 
		'\"', '\x2', '\x2', '(', ')', '\a', 'o', '\x2', '\x2', ')', '*', '\a', 
		'\x63', '\x2', '\x2', '*', '+', '\a', 'k', '\x2', '\x2', '+', ',', '\a', 
		'p', '\x2', '\x2', ',', '\x6', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', 
		'r', '\x2', '\x2', '.', '/', '\a', 't', '\x2', '\x2', '/', '\x30', '\a', 
		'q', '\x2', '\x2', '\x30', '\x31', '\a', '\x65', '\x2', '\x2', '\x31', 
		'\x32', '\a', 'g', '\x2', '\x2', '\x32', '\x33', '\a', '\x66', '\x2', 
		'\x2', '\x33', '\x34', '\a', 'w', '\x2', '\x2', '\x34', '\x35', '\a', 
		't', '\x2', '\x2', '\x35', '\x36', '\a', 'g', '\x2', '\x2', '\x36', '\b', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '*', '\x2', '\x2', '\x38', 
		'\n', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '+', '\x2', '\x2', 
		':', '\f', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', 'g', '\x2', '\x2', 
		'<', '=', '\a', 'p', '\x2', '\x2', '=', '>', '\a', '\x66', '\x2', '\x2', 
		'>', '?', '\a', '\"', '\x2', '\x2', '?', '@', '\a', 'r', '\x2', '\x2', 
		'@', '\x41', '\a', 't', '\x2', '\x2', '\x41', '\x42', '\a', 'q', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\x65', '\x2', '\x2', '\x43', '\x44', '\a', 
		'g', '\x2', '\x2', '\x44', '\x45', '\a', '\x66', '\x2', '\x2', '\x45', 
		'\x46', '\a', 'w', '\x2', '\x2', '\x46', 'G', '\a', 't', '\x2', '\x2', 
		'G', 'H', '\a', 'g', '\x2', '\x2', 'H', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '\x65', '\x2', '\x2', 'J', 'K', '\a', 'q', '\x2', '\x2', 
		'K', 'L', '\a', 'p', '\x2', '\x2', 'L', 'M', '\a', 'u', '\x2', '\x2', 
		'M', 'N', '\a', 'v', '\x2', '\x2', 'N', 'O', '\a', '\x63', '\x2', '\x2', 
		'O', 'P', '\a', 'p', '\x2', '\x2', 'P', 'Q', '\a', 'v', '\x2', '\x2', 
		'Q', '\x10', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '?', '\x2', '\x2', 
		'S', '\x12', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 'x', '\x2', '\x2', 
		'U', 'V', '\a', '\x63', '\x2', '\x2', 'V', 'W', '\a', 't', '\x2', '\x2', 
		'W', '\x14', '\x3', '\x2', '\x2', '\x2', 'X', ']', '\x5', '\x17', '\f', 
		'\x2', 'Y', '\\', '\x5', '\x17', '\f', '\x2', 'Z', '\\', '\t', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\t', '\x3', '\x2', '\x2', '\x61', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x64', '\t', '\x2', '\x2', '\x2', '\x63', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x1A', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\a', '\xF', 
		'\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\a', '\f', 
		'\x2', '\x2', 'k', 'm', '\a', '\xF', '\x2', '\x2', 'l', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'p', '\t', '\x4', '\x2', '\x2', 'o', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\b', '\xF', '\x2', '\x2', 't', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x2', '[', ']', '\x65', 'h', 'l', 'q', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
