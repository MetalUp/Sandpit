//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\GitHub\Sandpit\Compiler\SandpitAntlr\Sandpit.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SandpitParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, NL=2, SINGLE_LINE_COMMENT=3, AS=4, ABSTRACT=5, CASE=6, 
		CATCH=7, CLASS=8, CONSTANT=9, CONSTRUCTOR=10, CURRY=11, DEFAULT=12, ELSE=13, 
		END=14, ENUMERATION=15, FOR=16, FUNCTION=17, IF=18, IMMUTABLE=19, IN=20, 
		INHERITS=21, LAMBDA=22, LET=23, MAIN=24, NEW=25, PARTIAL=26, PRIVATE=27, 
		PROCEDURE=28, PROPERTY=29, REPEAT=30, RESULT=31, RETURN=32, SELF=33, SWITCH=34, 
		THEN=35, THROW=36, TO=37, TRY=38, UNTIL=39, VAR=40, WHILE=41, WITH=42, 
		BOOL_VALUE=43, VALUE_TYPE=44, ARRAY=45, LIST=46, DICTIONARY=47, ITERABLE=48, 
		ASSIGN_ADD=49, ASSIGN_SUBTRACT=50, ASSIGN_MULT=51, ASSIGN_DIV=52, ASSIGN=53, 
		ARROW=54, OPEN_BRACE=55, CLOSE_BRACE=56, OPEN_SQ_BRACKET=57, CLOSE_SQ_BRACKET=58, 
		OPEN_BRACKET=59, CLOSE_BRACKET=60, DOUBLE_DOT=61, DOT=62, COMMA=63, COLON=64, 
		PLUS=65, MINUS=66, MULT=67, DIVIDE=68, POWER=69, MOD=70, INT_DIV=71, LT=72, 
		GT=73, NULLABLE=74, OP_AND=75, OP_NOT=76, OP_OR=77, OP_XOR=78, OP_EQ=79, 
		OP_NE=80, OP_LE=81, OP_GE=82, TYPENAME=83, IDENTIFIER=84, LITERAL_INTEGER=85, 
		LITERAL_FLOAT=86, LITERAL_DECIMAL=87, LITERAL_CHAR=88, LITERAL_STRING=89, 
		VERBATIM_ONLY_STRING=90, WHITESPACES=91, NEWLINE=92, WS=93;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_constantDef = 2, RULE_enumDef = 3, 
		RULE_enumValue = 4, RULE_classDef = 5, RULE_mutableClass = 6, RULE_immutableClass = 7, 
		RULE_abstractClass = 8, RULE_inherits = 9, RULE_constructor = 10, RULE_property = 11, 
		RULE_functionDef = 12, RULE_functionWithBody = 13, RULE_expressionFunction = 14, 
		RULE_letIn = 15, RULE_functionSignature = 16, RULE_procedureDef = 17, 
		RULE_procedureSignature = 18, RULE_statementBlock = 19, RULE_varDef = 20, 
		RULE_assignment = 21, RULE_assignableValue = 22, RULE_methodCall = 23, 
		RULE_argumentList = 24, RULE_parameterList = 25, RULE_parameter = 26, 
		RULE_proceduralControlFlow = 27, RULE_if = 28, RULE_for = 29, RULE_forIn = 30, 
		RULE_while = 31, RULE_repeat = 32, RULE_try = 33, RULE_switch = 34, RULE_case = 35, 
		RULE_caseDefault = 36, RULE_expression = 37, RULE_bracketedExpression = 38, 
		RULE_ifExpression = 39, RULE_lambda = 40, RULE_throwException = 41, RULE_index = 42, 
		RULE_range = 43, RULE_value = 44, RULE_literalDataStructure = 45, RULE_tuple = 46, 
		RULE_tupleDecomp = 47, RULE_literalList = 48, RULE_listDecomp = 49, RULE_literalDictionary = 50, 
		RULE_kvp = 51, RULE_assignmentOp = 52, RULE_unaryOp = 53, RULE_binaryOp = 54, 
		RULE_arithmeticOp = 55, RULE_logicalOp = 56, RULE_conditionalOp = 57, 
		RULE_literalValue = 58, RULE_newInstance = 59, RULE_withClause = 60, RULE_type = 61, 
		RULE_dataStructureType = 62, RULE_genericSpecifier = 63, RULE_tupleType = 64, 
		RULE_funcType = 65;
	public static readonly string[] ruleNames = {
		"file", "main", "constantDef", "enumDef", "enumValue", "classDef", "mutableClass", 
		"immutableClass", "abstractClass", "inherits", "constructor", "property", 
		"functionDef", "functionWithBody", "expressionFunction", "letIn", "functionSignature", 
		"procedureDef", "procedureSignature", "statementBlock", "varDef", "assignment", 
		"assignableValue", "methodCall", "argumentList", "parameterList", "parameter", 
		"proceduralControlFlow", "if", "for", "forIn", "while", "repeat", "try", 
		"switch", "case", "caseDefault", "expression", "bracketedExpression", 
		"ifExpression", "lambda", "throwException", "index", "range", "value", 
		"literalDataStructure", "tuple", "tupleDecomp", "literalList", "listDecomp", 
		"literalDictionary", "kvp", "assignmentOp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "literalValue", "newInstance", "withClause", 
		"type", "dataStructureType", "genericSpecifier", "tupleType", "funcType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, "'as'", "'abstract'", "'case'", 
		"'catch'", "'class'", "'constant'", "'constructor'", "'curry'", "'default'", 
		"'else'", "'end'", "'enumeration'", "'for'", "'function'", "'if'", "'immutable'", 
		"'in'", "'inherits'", "'lambda'", "'let'", "'main'", "'new'", "'partial'", 
		"'private'", "'procedure'", "'property'", "'repeat'", "'result'", "'return'", 
		"'self'", "'switch'", "'then'", "'throw'", "'to'", "'try'", "'until'", 
		"'var'", "'while'", "'with'", null, null, "'Array'", "'List'", "'Dictionary'", 
		"'Iter'", "'+='", "'-='", "'*='", "'/='", "'='", "'->'", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'..'", "'.'", null, "':'", "'+'", "'-'", 
		"'*'", "'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", "'?'", "'and'", "'not'", 
		"'or'", "'xor'", null, null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "NL", "SINGLE_LINE_COMMENT", "AS", "ABSTRACT", 
		"CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "CURRY", "DEFAULT", 
		"ELSE", "END", "ENUMERATION", "FOR", "FUNCTION", "IF", "IMMUTABLE", "IN", 
		"INHERITS", "LAMBDA", "LET", "MAIN", "NEW", "PARTIAL", "PRIVATE", "PROCEDURE", 
		"PROPERTY", "REPEAT", "RESULT", "RETURN", "SELF", "SWITCH", "THEN", "THROW", 
		"TO", "TRY", "UNTIL", "VAR", "WHILE", "WITH", "BOOL_VALUE", "VALUE_TYPE", 
		"ARRAY", "LIST", "DICTIONARY", "ITERABLE", "ASSIGN_ADD", "ASSIGN_SUBTRACT", 
		"ASSIGN_MULT", "ASSIGN_DIV", "ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", "MULT", "DIVIDE", 
		"POWER", "MOD", "INT_DIV", "LT", "GT", "NULLABLE", "OP_AND", "OP_NOT", 
		"OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "TYPENAME", "IDENTIFIER", 
		"LITERAL_INTEGER", "LITERAL_FLOAT", "LITERAL_DECIMAL", "LITERAL_CHAR", 
		"LITERAL_STRING", "VERBATIM_ONLY_STRING", "WHITESPACES", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sandpit.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SandpitParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SandpitParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SandpitParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SandpitParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext[] enumDef() {
			return GetRuleContexts<EnumDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefContext enumDef(int i) {
			return GetRuleContext<EnumDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 138;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 132;
						main();
						}
						break;
					case 2:
						{
						State = 133;
						constantDef();
						}
						break;
					case 3:
						{
						State = 134;
						enumDef();
						}
						break;
					case 4:
						{
						State = 135;
						classDef();
						}
						break;
					case 5:
						{
						State = 136;
						functionDef();
						}
						break;
					case 6:
						{
						State = 137;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 143;
				Match(NL);
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 149;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(SandpitParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(SandpitParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(NL);
			State = 152;
			Match(MAIN);
			State = 153;
			statementBlock();
			State = 154;
			Match(NL);
			State = 155;
			Match(END);
			State = 156;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(SandpitParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(NL);
			State = 159;
			Match(CONSTANT);
			State = 160;
			Match(IDENTIFIER);
			State = 161;
			Match(ASSIGN);
			State = 162;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUMERATION() { return GetTokens(SandpitParser.ENUMERATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION(int i) {
			return GetToken(SandpitParser.ENUMERATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(SandpitParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(NL);
			State = 165;
			Match(ENUMERATION);
			State = 166;
			Match(TYPENAME);
			{
			State = 167;
			enumValue();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 168;
				Match(COMMA);
				State = 169;
				enumValue();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 175;
			Match(NL);
			State = 176;
			Match(END);
			State = 177;
			Match(ENUMERATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(SandpitParser.LITERAL_INTEGER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(IDENTIFIER);
			{
			State = 180;
			Match(ASSIGN);
			State = 181;
			Match(LITERAL_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_classDef);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				abstractClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				mutableClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				immutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(SandpitParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 12, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(NL);
			State = 189;
			Match(CLASS);
			State = 190;
			Match(TYPENAME);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 191;
				inherits();
				}
			}

			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 199;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 194;
						constructor();
						}
						break;
					case 2:
						{
						State = 195;
						property();
						}
						break;
					case 3:
						{
						State = 196;
						functionDef();
						}
						break;
					case 4:
						{
						State = 197;
						procedureDef();
						}
						break;
					case 5:
						{
						State = 198;
						constantDef();
						}
						break;
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 204;
			Match(NL);
			State = 205;
			Match(END);
			State = 206;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(SandpitParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(SandpitParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 14, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(NL);
			State = 209;
			Match(IMMUTABLE);
			State = 210;
			Match(CLASS);
			State = 211;
			Match(TYPENAME);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 212;
				inherits();
				}
			}

			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 219;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 215;
						constructor();
						}
						break;
					case 2:
						{
						State = 216;
						property();
						}
						break;
					case 3:
						{
						State = 217;
						functionDef();
						}
						break;
					case 4:
						{
						State = 218;
						constantDef();
						}
						break;
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 224;
			Match(NL);
			State = 225;
			Match(END);
			State = 226;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(SandpitParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(SandpitParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(SandpitParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(SandpitParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(SandpitParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(SandpitParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 16, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(NL);
			State = 229;
			Match(ABSTRACT);
			State = 230;
			Match(CLASS);
			State = 231;
			Match(TYPENAME);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 232;
				inherits();
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 242;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						State = 235;
						property();
						}
						break;
					case 2:
						{
						State = 236;
						Match(NL);
						State = 237;
						Match(FUNCTION);
						State = 238;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 239;
						Match(NL);
						State = 240;
						Match(PROCEDURE);
						State = 241;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 247;
			Match(NL);
			State = 248;
			Match(END);
			State = 249;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(SandpitParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 18, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(INHERITS);
			State = 252;
			type();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 253;
				Match(COMMA);
				State = 254;
				type();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(SandpitParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(SandpitParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 20, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(NL);
			State = 261;
			Match(CONSTRUCTOR);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 262;
				Match(OPEN_BRACKET);
				State = 264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 263;
					Match(NL);
					}
					break;
				}
				State = 267;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 266;
					parameterList();
					}
					break;
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 269;
					Match(NL);
					}
				}

				State = 272;
				Match(CLOSE_BRACKET);
				}
			}

			State = 275;
			statementBlock();
			State = 276;
			Match(NL);
			State = 277;
			Match(END);
			State = 278;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SandpitParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(SandpitParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(NL);
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 281;
				Match(PRIVATE);
				}
			}

			State = 284;
			Match(PROPERTY);
			State = 285;
			Match(IDENTIFIER);
			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE_TYPE:
			case ARRAY:
			case LIST:
			case DICTIONARY:
			case ITERABLE:
			case OPEN_BRACKET:
			case TYPENAME:
				{
				State = 286;
				type();
				}
				break;
			case ASSIGN:
				{
				{
				State = 287;
				Match(ASSIGN);
				State = 288;
				expression(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionDef);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(SandpitParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(SandpitParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SandpitParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(NL);
			State = 296;
			Match(FUNCTION);
			State = 297;
			functionSignature();
			State = 298;
			statementBlock();
			State = 299;
			Match(NL);
			State = 300;
			Match(RETURN);
			State = 301;
			expression(0);
			State = 302;
			Match(NL);
			State = 303;
			Match(END);
			State = 304;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SandpitParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetInContext letIn() {
			return GetRuleContext<LetInContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(NL);
			State = 307;
			Match(FUNCTION);
			State = 308;
			functionSignature();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 309;
				Match(NL);
				}
			}

			State = 312;
			Match(ARROW);
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 313;
				Match(NL);
				}
				break;
			}
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 316;
				letIn();
				}
			}

			State = 319;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(SandpitParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext[] assignableValue() {
			return GetRuleContexts<AssignableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue(int i) {
			return GetRuleContext<AssignableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SandpitParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SandpitParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SandpitParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public LetInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetInContext letIn() {
		LetInContext _localctx = new LetInContext(Context, State);
		EnterRule(_localctx, 30, RULE_letIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(LET);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 322;
				Match(NL);
				}
			}

			State = 325;
			assignableValue();
			State = 326;
			Match(ASSIGN);
			State = 327;
			expression(0);
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 328;
				Match(COMMA);
				State = 329;
				assignableValue();
				State = 330;
				Match(ASSIGN);
				State = 331;
				expression(0);
				}
				}
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 338;
				Match(NL);
				}
			}

			State = 341;
			Match(IN);
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 342;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SandpitParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(IDENTIFIER);
			State = 346;
			Match(OPEN_BRACKET);
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 347;
				Match(NL);
				}
				break;
			}
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 350;
				parameterList();
				}
				break;
			}
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 353;
				Match(NL);
				}
			}

			State = 356;
			Match(CLOSE_BRACKET);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 357;
				Match(NL);
				}
			}

			State = 360;
			Match(AS);
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 361;
				Match(NL);
				}
			}

			State = 364;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(SandpitParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(SandpitParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(NL);
			State = 367;
			Match(PROCEDURE);
			State = 368;
			procedureSignature();
			State = 369;
			statementBlock();
			State = 370;
			Match(NL);
			State = 371;
			Match(END);
			State = 372;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 36, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(IDENTIFIER);
			State = 375;
			Match(OPEN_BRACKET);
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 376;
				Match(NL);
				}
				break;
			}
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL || _la==IDENTIFIER) {
				{
				State = 379;
				parameterList();
				}
			}

			State = 382;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext[] throwException() {
			return GetRuleContexts<ThrowExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException(int i) {
			return GetRuleContext<ThrowExceptionContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 392;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						{
						State = 384;
						Match(NL);
						State = 385;
						expression(0);
						}
						}
						break;
					case 2:
						{
						State = 386;
						constantDef();
						}
						break;
					case 3:
						{
						State = 387;
						varDef();
						}
						break;
					case 4:
						{
						State = 388;
						assignment();
						}
						break;
					case 5:
						{
						State = 389;
						proceduralControlFlow();
						}
						break;
					case 6:
						{
						{
						State = 390;
						Match(NL);
						State = 391;
						throwException();
						}
						}
						break;
					}
					} 
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SandpitParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(NL);
			State = 398;
			Match(VAR);
			State = 399;
			Match(IDENTIFIER);
			State = 400;
			Match(ASSIGN);
			State = 401;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOpContext assignmentOp() {
			return GetRuleContext<AssignmentOpContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(NL);
			State = 404;
			assignableValue();
			State = 407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 405;
				Match(ASSIGN);
				}
				break;
			case ASSIGN_ADD:
			case ASSIGN_SUBTRACT:
			case ASSIGN_MULT:
			case ASSIGN_DIV:
				{
				State = 406;
				assignmentOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 409;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(SandpitParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(SandpitParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleDecompContext tupleDecomp() {
			return GetRuleContext<TupleDecompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignableValue);
		int _la;
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 411;
					Match(SELF);
					State = 412;
					Match(DOT);
					}
				}

				State = 415;
				Match(IDENTIFIER);
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 416;
					index();
					}
				}

				}
				}
				break;
			case RESULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419;
				Match(RESULT);
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 420;
				tupleDecomp();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 421;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRY() { return GetToken(SandpitParser.CURRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(SandpitParser.PARTIAL, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 46, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRY || _la==PARTIAL) {
				{
				State = 424;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRY || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 427;
			Match(IDENTIFIER);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 428;
				genericSpecifier();
				}
			}

			State = 431;
			Match(OPEN_BRACKET);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (MINUS - 66)) | (1L << (OP_NOT - 66)) | (1L << (IDENTIFIER - 66)) | (1L << (LITERAL_INTEGER - 66)) | (1L << (LITERAL_FLOAT - 66)) | (1L << (LITERAL_DECIMAL - 66)) | (1L << (LITERAL_CHAR - 66)) | (1L << (LITERAL_STRING - 66)))) != 0)) {
				{
				State = 432;
				argumentList();
				}
			}

			State = 435;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			expression(0);
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 438;
				Match(COMMA);
				State = 439;
				expression(0);
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			parameter();
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 446;
				Match(COMMA);
				State = 447;
				parameter();
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 453;
				Match(NL);
				}
			}

			State = 456;
			Match(IDENTIFIER);
			State = 457;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInContext forIn() {
			return GetRuleContext<ForInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProceduralControlFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 54, RULE_proceduralControlFlow);
		try {
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 461;
				forIn();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 462;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 463;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 464;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 465;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SandpitParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SandpitParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(SandpitParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(SandpitParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SandpitParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SandpitParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 56, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(NL);
			State = 469;
			Match(IF);
			State = 470;
			expression(0);
			State = 471;
			Match(THEN);
			State = 472;
			statementBlock();
			State = 482;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 473;
					Match(NL);
					State = 474;
					Match(ELSE);
					State = 475;
					Match(IF);
					State = 476;
					expression(0);
					State = 477;
					Match(THEN);
					State = 478;
					statementBlock();
					}
					} 
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 485;
				Match(NL);
				State = 486;
				Match(ELSE);
				State = 487;
				statementBlock();
				}
				break;
			}
			State = 490;
			Match(NL);
			State = 491;
			Match(END);
			State = 492;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SandpitParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 58, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(NL);
			State = 495;
			Match(FOR);
			State = 496;
			Match(IDENTIFIER);
			State = 497;
			Match(ASSIGN);
			State = 498;
			expression(0);
			State = 499;
			Match(TO);
			State = 500;
			expression(0);
			State = 501;
			statementBlock();
			State = 502;
			Match(NL);
			State = 503;
			Match(END);
			State = 504;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SandpitParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ForInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInContext forIn() {
		ForInContext _localctx = new ForInContext(Context, State);
		EnterRule(_localctx, 60, RULE_forIn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(NL);
			State = 507;
			Match(FOR);
			State = 508;
			Match(IDENTIFIER);
			State = 509;
			Match(IN);
			State = 510;
			expression(0);
			State = 511;
			statementBlock();
			State = 512;
			Match(NL);
			State = 513;
			Match(END);
			State = 514;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SandpitParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SandpitParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 62, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(NL);
			State = 517;
			Match(WHILE);
			State = 518;
			expression(0);
			State = 519;
			statementBlock();
			State = 520;
			Match(NL);
			State = 521;
			Match(END);
			State = 522;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SandpitParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(SandpitParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 64, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(NL);
			{
			State = 525;
			Match(REPEAT);
			}
			State = 526;
			statementBlock();
			State = 527;
			Match(NL);
			State = 528;
			Match(UNTIL);
			State = 529;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(SandpitParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(SandpitParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(SandpitParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 66, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(NL);
			State = 532;
			Match(TRY);
			State = 533;
			statementBlock();
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 534;
				Match(NL);
				State = 535;
				Match(CATCH);
				State = 536;
				Match(IDENTIFIER);
				State = 537;
				type();
				State = 538;
				statementBlock();
				}
				break;
			}
			State = 542;
			Match(NL);
			State = 543;
			Match(END);
			State = 544;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(SandpitParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(SandpitParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 68, RULE_switch);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(NL);
			State = 547;
			Match(SWITCH);
			State = 548;
			expression(0);
			State = 552;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 549;
					@case();
					}
					} 
				}
				State = 554;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 555;
				caseDefault();
				}
			}

			State = 558;
			Match(END);
			State = 559;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SandpitParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 70, RULE_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(NL);
			State = 562;
			Match(CASE);
			State = 563;
			literalValue();
			State = 564;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SandpitParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 72, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(NL);
			State = 567;
			Match(DEFAULT);
			State = 568;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException() {
			return GetRuleContext<ThrowExceptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 571;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 572;
				methodCall();
				}
				break;
			case 3:
				{
				State = 573;
				value();
				}
				break;
			case 4:
				{
				State = 574;
				unaryOp();
				State = 575;
				expression(7);
				}
				break;
			case 5:
				{
				State = 577;
				newInstance();
				}
				break;
			case 6:
				{
				State = 578;
				ifExpression();
				}
				break;
			case 7:
				{
				State = 579;
				lambda();
				}
				break;
			case 8:
				{
				State = 580;
				throwException();
				}
				break;
			case 9:
				{
				State = 581;
				Match(NL);
				State = 582;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 597;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 585;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 586;
						binaryOp();
						State = 587;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 589;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 590;
						index();
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 591;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 592;
						Match(DOT);
						State = 593;
						methodCall();
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 594;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 595;
						Match(DOT);
						State = 596;
						Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(OPEN_BRACKET);
			State = 603;
			expression(0);
			State = 604;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SandpitParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SandpitParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SandpitParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_ifExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 606;
				Match(NL);
				}
			}

			State = 609;
			Match(IF);
			State = 610;
			expression(0);
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 611;
				Match(NL);
				}
			}

			State = 614;
			Match(THEN);
			State = 615;
			expression(0);
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 616;
				Match(NL);
				}
			}

			State = 619;
			Match(ELSE);
			State = 620;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(SandpitParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 80, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(LAMBDA);
			State = 623;
			argumentList();
			State = 624;
			Match(ARROW);
			State = 625;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(SandpitParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		public ThrowExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExceptionContext throwException() {
		ThrowExceptionContext _localctx = new ThrowExceptionContext(Context, State);
		EnterRule(_localctx, 82, RULE_throwException);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(THROW);
			State = 628;
			type();
			{
			State = 629;
			Match(OPEN_BRACKET);
			State = 630;
			argumentList();
			State = 631;
			Match(CLOSE_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(SandpitParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(SandpitParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SandpitParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 84, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			Match(OPEN_SQ_BRACKET);
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 634;
				expression(0);
				}
				break;
			case 2:
				{
				State = 635;
				expression(0);
				State = 636;
				Match(COMMA);
				State = 637;
				expression(0);
				}
				break;
			case 3:
				{
				State = 639;
				range();
				}
				break;
			}
			State = 642;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(SandpitParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 86, RULE_range);
		try {
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644;
				expression(0);
				State = 645;
				Match(DOUBLE_DOT);
				State = 646;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648;
				expression(0);
				State = 649;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 651;
				Match(DOUBLE_DOT);
				State = 652;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(SandpitParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(SandpitParser.RESULT, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 88, RULE_value);
		int _la;
		try {
			State = 664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655;
				literalValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 656;
					Match(SELF);
					State = 657;
					Match(DOT);
					}
				}

				State = 660;
				Match(IDENTIFIER);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 661;
				literalDataStructure();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 662;
				Match(SELF);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 663;
				Match(RESULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDataStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 90, RULE_literalDataStructure);
		try {
			State = 669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 666;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 667;
				literalList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 668;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 92, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(OPEN_BRACKET);
			State = 672;
			expression(0);
			State = 673;
			Match(COMMA);
			State = 674;
			expression(0);
			State = 679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 675;
				Match(COMMA);
				State = 676;
				expression(0);
				}
				}
				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 682;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SandpitParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SandpitParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public TupleDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDecompContext tupleDecomp() {
		TupleDecompContext _localctx = new TupleDecompContext(Context, State);
		EnterRule(_localctx, 94, RULE_tupleDecomp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(OPEN_BRACKET);
			State = 685;
			Match(IDENTIFIER);
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 686;
				Match(COMMA);
				State = 687;
				Match(IDENTIFIER);
				}
				}
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 692;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 96, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(OPEN_BRACE);
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (MINUS - 66)) | (1L << (OP_NOT - 66)) | (1L << (IDENTIFIER - 66)) | (1L << (LITERAL_INTEGER - 66)) | (1L << (LITERAL_FLOAT - 66)) | (1L << (LITERAL_DECIMAL - 66)) | (1L << (LITERAL_CHAR - 66)) | (1L << (LITERAL_STRING - 66)))) != 0)) {
				{
				State = 696;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 695;
					Match(NL);
					}
					break;
				}
				State = 698;
				expression(0);
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 699;
					Match(COMMA);
					State = 700;
					expression(0);
					}
					}
					State = 705;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 706;
					Match(NL);
					}
				}

				}
			}

			State = 711;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SandpitParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SandpitParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 98, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(OPEN_BRACE);
			State = 714;
			Match(IDENTIFIER);
			State = 715;
			Match(COLON);
			State = 716;
			Match(IDENTIFIER);
			State = 717;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 100, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(OPEN_BRACE);
			State = 734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (MINUS - 66)) | (1L << (OP_NOT - 66)) | (1L << (IDENTIFIER - 66)) | (1L << (LITERAL_INTEGER - 66)) | (1L << (LITERAL_FLOAT - 66)) | (1L << (LITERAL_DECIMAL - 66)) | (1L << (LITERAL_CHAR - 66)) | (1L << (LITERAL_STRING - 66)))) != 0)) {
				{
				State = 721;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 720;
					Match(NL);
					}
					break;
				}
				State = 723;
				kvp();
				State = 728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 724;
					Match(COMMA);
					State = 725;
					kvp();
					}
					}
					State = 730;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 731;
					Match(NL);
					}
				}

				}
			}

			State = 736;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 102, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			expression(0);
			State = 739;
			Match(COLON);
			State = 740;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_ADD() { return GetToken(SandpitParser.ASSIGN_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SUBTRACT() { return GetToken(SandpitParser.ASSIGN_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_MULT() { return GetToken(SandpitParser.ASSIGN_MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_DIV() { return GetToken(SandpitParser.ASSIGN_DIV, 0); }
		public AssignmentOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOpContext assignmentOp() {
		AssignmentOpContext _localctx = new AssignmentOpContext(Context, State);
		EnterRule(_localctx, 104, RULE_assignmentOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN_ADD) | (1L << ASSIGN_SUBTRACT) | (1L << ASSIGN_MULT) | (1L << ASSIGN_DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SandpitParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(SandpitParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 106, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 108, RULE_binaryOp);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 746;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 748;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SandpitParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(SandpitParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SandpitParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SandpitParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(SandpitParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SandpitParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SandpitParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 110, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (MULT - 65)) | (1L << (DIVIDE - 65)) | (1L << (POWER - 65)) | (1L << (MOD - 65)) | (1L << (INT_DIV - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SandpitParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SandpitParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SandpitParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 112, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (OP_AND - 75)) | (1L << (OP_OR - 75)) | (1L << (OP_XOR - 75)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SandpitParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SandpitParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(SandpitParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(SandpitParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SandpitParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(SandpitParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 114, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (GT - 72)) | (1L << (OP_EQ - 72)) | (1L << (OP_NE - 72)) | (1L << (OP_LE - 72)) | (1L << (OP_GE - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(SandpitParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(SandpitParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(SandpitParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_DECIMAL() { return GetToken(SandpitParser.LITERAL_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(SandpitParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(SandpitParser.LITERAL_STRING, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 116, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (BOOL_VALUE - 43)) | (1L << (LITERAL_INTEGER - 43)) | (1L << (LITERAL_FLOAT - 43)) | (1L << (LITERAL_DECIMAL - 43)) | (1L << (LITERAL_CHAR - 43)) | (1L << (LITERAL_STRING - 43)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(SandpitParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 118, RULE_newInstance);
		int _la;
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				Match(NEW);
				State = 760;
				type();
				State = 761;
				Match(OPEN_BRACKET);
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (MINUS - 66)) | (1L << (OP_NOT - 66)) | (1L << (IDENTIFIER - 66)) | (1L << (LITERAL_INTEGER - 66)) | (1L << (LITERAL_FLOAT - 66)) | (1L << (LITERAL_DECIMAL - 66)) | (1L << (LITERAL_CHAR - 66)) | (1L << (LITERAL_STRING - 66)))) != 0)) {
					{
					State = 762;
					argumentList();
					}
				}

				State = 765;
				Match(CLOSE_BRACKET);
				State = 767;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 766;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 769;
				Match(IDENTIFIER);
				State = 770;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SandpitParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 120, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(WITH);
			State = 774;
			Match(OPEN_BRACE);
			State = 775;
			assignment();
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 776;
				Match(COMMA);
				State = 777;
				assignment();
				}
				}
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 783;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(SandpitParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(SandpitParser.TYPENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_type);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				dataStructureType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787;
				Match(TYPENAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 788;
				Match(TYPENAME);
				State = 789;
				genericSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 790;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 791;
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecifierContext genericSpecifier() {
			return GetRuleContext<GenericSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SandpitParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(SandpitParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(SandpitParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(SandpitParser.ITERABLE, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_dataStructureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY) | (1L << LIST) | (1L << DICTIONARY) | (1L << ITERABLE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 795;
			genericSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SandpitParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SandpitParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public GenericSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecifierContext genericSpecifier() {
		GenericSpecifierContext _localctx = new GenericSpecifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_genericSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(LT);
			State = 798;
			type();
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 799;
				Match(COMMA);
				State = 800;
				type();
				}
				}
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 806;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			Match(OPEN_BRACKET);
			State = 809;
			type();
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 810;
				Match(COMMA);
				State = 811;
				type();
				}
				}
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 816;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(OPEN_BRACKET);
			State = 819;
			type();
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 820;
				Match(COMMA);
				State = 821;
				type();
				}
				}
				State = 826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 827;
			Match(ARROW);
			State = 828;
			type();
			State = 829;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 37: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '_', '\x342', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x8D', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x90', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x93', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x96', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\xAD', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xB0', '\v', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\xBD', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xC3', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xCA', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xCD', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD8', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xDE', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xE1', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\xEC', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\xF5', '\n', '\n', '\f', '\n', '\xE', '\n', '\xF8', 
		'\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x102', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x105', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x10B', '\n', '\f', '\x3', 
		'\f', '\x5', '\f', '\x10E', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x111', 
		'\n', '\f', '\x3', '\f', '\x5', '\f', '\x114', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x11D', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x124', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x128', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x139', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x13D', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x140', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x146', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x150', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x153', '\v', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x156', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x15A', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x15F', '\n', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x162', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x165', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x169', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x16D', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x17C', '\n', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x17F', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\x18B', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x18E', '\v', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x19A', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x1A0', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x1A4', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x1A9', '\n', '\x18', '\x3', '\x19', 
		'\x5', '\x19', '\x1AC', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x1B0', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x1B4', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x1BB', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x1BE', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\a', '\x1B', '\x1C3', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', 
		'\x1C6', '\v', '\x1B', '\x3', '\x1C', '\x5', '\x1C', '\x1C9', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x1D5', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', 
		'\x1E', '\x1E3', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x1E6', '\v', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1EB', 
		'\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x21F', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', 
		'\x229', '\n', '$', '\f', '$', '\xE', '$', '\x22C', '\v', '$', '\x3', 
		'$', '\x5', '$', '\x22F', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', 
		'\x24A', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x258', '\n', '\'', '\f', 
		'\'', '\xE', '\'', '\x25B', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x5', ')', '\x262', '\n', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x267', '\n', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x26C', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x5', ',', '\x283', '\n', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x5', '-', '\x290', '\n', '-', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x295', '\n', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x29B', '\n', '.', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x5', '/', '\x2A0', '\n', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\a', '\x30', '\x2A8', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x2AB', 
		'\v', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x6', '\x31', '\x2B3', '\n', '\x31', '\r', 
		'\x31', '\xE', '\x31', '\x2B4', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x2BB', '\n', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\a', '\x32', '\x2C0', '\n', '\x32', '\f', '\x32', 
		'\xE', '\x32', '\x2C3', '\v', '\x32', '\x3', '\x32', '\x5', '\x32', '\x2C6', 
		'\n', '\x32', '\x5', '\x32', '\x2C8', '\n', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x2D4', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', 
		'\x2D9', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x2DC', '\v', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x2DF', '\n', '\x34', '\x5', '\x34', '\x2E1', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x2F0', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x5', '=', '\x2FE', '\n', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x302', '\n', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x306', '\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\a', '>', '\x30D', '\n', '>', '\f', '>', '\xE', '>', '\x310', 
		'\v', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x31B', '\n', 
		'?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x324', '\n', '\x41', '\f', 
		'\x41', '\xE', '\x41', '\x327', '\v', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x6', '\x42', 
		'\x32F', '\n', '\x42', '\r', '\x42', '\xE', '\x42', '\x330', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\a', '\x43', '\x339', '\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x33C', 
		'\v', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x2', '\x3', 'L', '\x44', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x2', '\n', '\x4', '\x2', '\r', '\r', '\x1C', '\x1C', '\x3', 
		'\x2', '\x33', '\x36', '\x4', '\x2', '\x44', '\x44', 'N', 'N', '\x3', 
		'\x2', '\x43', 'I', '\x4', '\x2', 'M', 'M', 'O', 'P', '\x4', '\x2', 'J', 
		'K', 'Q', 'T', '\x4', '\x2', '-', '-', 'W', '[', '\x3', '\x2', '/', '\x32', 
		'\x2', '\x37D', '\x2', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x4', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\xA6', '\x3', '\x2', '\x2', '\x2', '\n', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xE', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x14', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x106', '\x3', '\x2', '\x2', '\x2', '\x18', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x129', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x134', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x143', '\x3', '\x2', '\x2', '\x2', '\"', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x178', '\x3', '\x2', '\x2', '\x2', '(', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x18F', '\x3', '\x2', '\x2', '\x2', ',', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1B7', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1D6', '\x3', '\x2', '\x2', '\x2', '<', '\x1F0', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1FC', '\x3', '\x2', '\x2', '\x2', '@', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x215', '\x3', '\x2', '\x2', '\x2', '\x46', '\x224', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x233', '\x3', '\x2', '\x2', '\x2', 'J', '\x238', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x25C', '\x3', '\x2', '\x2', '\x2', 'P', '\x261', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x270', '\x3', '\x2', '\x2', '\x2', 'T', '\x275', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x28F', '\x3', '\x2', '\x2', '\x2', 'Z', '\x29A', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x29F', '\x3', '\x2', '\x2', '\x2', '^', '\x2A1', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x64', '\x2CB', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x2D1', '\x3', '\x2', '\x2', '\x2', 'h', '\x2E4', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x2E8', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x2EA', '\x3', '\x2', '\x2', '\x2', 'n', '\x2EF', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x2F1', '\x3', '\x2', '\x2', '\x2', 'r', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x2F7', '\x3', '\x2', '\x2', '\x2', 'x', '\x305', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x307', '\x3', '\x2', '\x2', '\x2', '|', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x31C', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x32A', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x334', '\x3', '\x2', '\x2', '\x2', '\x86', '\x8D', 
		'\x5', '\x4', '\x3', '\x2', '\x87', '\x8D', '\x5', '\x6', '\x4', '\x2', 
		'\x88', '\x8D', '\x5', '\b', '\x5', '\x2', '\x89', '\x8D', '\x5', '\f', 
		'\a', '\x2', '\x8A', '\x8D', '\x5', '\x1A', '\xE', '\x2', '\x8B', '\x8D', 
		'\x5', '$', '\x13', '\x2', '\x8C', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x93', '\a', '\x4', '\x2', '\x2', '\x92', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x97', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\a', '\x2', '\x2', '\x3', '\x98', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\x4', '\x2', '\x2', 
		'\x9A', '\x9B', '\a', '\x1A', '\x2', '\x2', '\x9B', '\x9C', '\x5', '(', 
		'\x15', '\x2', '\x9C', '\x9D', '\a', '\x4', '\x2', '\x2', '\x9D', '\x9E', 
		'\a', '\x10', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x1A', '\x2', '\x2', 
		'\x9F', '\x5', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x4', 
		'\x2', '\x2', '\xA1', '\xA2', '\a', '\v', '\x2', '\x2', '\xA2', '\xA3', 
		'\a', 'V', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x37', '\x2', '\x2', '\xA4', 
		'\xA5', '\x5', 'L', '\'', '\x2', '\xA5', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\a', '\x4', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x11', 
		'\x2', '\x2', '\xA8', '\xA9', '\a', 'U', '\x2', '\x2', '\xA9', '\xAE', 
		'\x5', '\n', '\x6', '\x2', '\xAA', '\xAB', '\a', '\x41', '\x2', '\x2', 
		'\xAB', '\xAD', '\x5', '\n', '\x6', '\x2', '\xAC', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB2', '\a', '\x4', '\x2', '\x2', '\xB2', '\xB3', 
		'\a', '\x10', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x11', '\x2', '\x2', 
		'\xB4', '\t', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', 'V', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\x37', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'W', '\x2', '\x2', '\xB8', '\v', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBD', 
		'\x5', '\x12', '\n', '\x2', '\xBA', '\xBD', '\x5', '\xE', '\b', '\x2', 
		'\xBB', '\xBD', '\x5', '\x10', '\t', '\x2', '\xBC', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBF', '\a', '\x4', '\x2', '\x2', '\xBF', '\xC0', '\a', '\n', 
		'\x2', '\x2', '\xC0', '\xC2', '\a', 'U', '\x2', '\x2', '\xC1', '\xC3', 
		'\x5', '\x14', '\v', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xCA', '\x5', '\x16', '\f', '\x2', '\xC5', '\xCA', 
		'\x5', '\x18', '\r', '\x2', '\xC6', '\xCA', '\x5', '\x1A', '\xE', '\x2', 
		'\xC7', '\xCA', '\x5', '$', '\x13', '\x2', '\xC8', '\xCA', '\x5', '\x6', 
		'\x4', '\x2', '\xC9', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '\x4', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '\x10', '\x2', '\x2', '\xD0', '\xD1', '\a', '\n', '\x2', '\x2', 
		'\xD1', '\xF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x4', 
		'\x2', '\x2', '\xD3', '\xD4', '\a', '\x15', '\x2', '\x2', '\xD4', '\xD5', 
		'\a', '\n', '\x2', '\x2', '\xD5', '\xD7', '\a', 'U', '\x2', '\x2', '\xD6', 
		'\xD8', '\x5', '\x14', '\v', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDE', '\x5', '\x16', '\f', '\x2', '\xDA', 
		'\xDE', '\x5', '\x18', '\r', '\x2', '\xDB', '\xDE', '\x5', '\x1A', '\xE', 
		'\x2', '\xDC', '\xDE', '\x5', '\x6', '\x4', '\x2', '\xDD', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', '\x4', '\x2', '\x2', '\xE3', '\xE4', '\a', 
		'\x10', '\x2', '\x2', '\xE4', '\xE5', '\a', '\n', '\x2', '\x2', '\xE5', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x4', '\x2', 
		'\x2', '\xE7', '\xE8', '\a', '\a', '\x2', '\x2', '\xE8', '\xE9', '\a', 
		'\n', '\x2', '\x2', '\xE9', '\xEB', '\a', 'U', '\x2', '\x2', '\xEA', '\xEC', 
		'\x5', '\x14', '\v', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xF5', '\x5', '\x18', '\r', '\x2', '\xEE', '\xEF', 
		'\a', '\x4', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x13', '\x2', '\x2', 
		'\xF0', '\xF5', '\x5', '\"', '\x12', '\x2', '\xF1', '\xF2', '\a', '\x4', 
		'\x2', '\x2', '\xF2', '\xF3', '\a', '\x1E', '\x2', '\x2', '\xF3', '\xF5', 
		'\x5', '&', '\x14', '\x2', '\xF4', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFA', '\a', '\x4', '\x2', '\x2', '\xFA', '\xFB', 
		'\a', '\x10', '\x2', '\x2', '\xFB', '\xFC', '\a', '\n', '\x2', '\x2', 
		'\xFC', '\x13', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x17', 
		'\x2', '\x2', '\xFE', '\x103', '\x5', '|', '?', '\x2', '\xFF', '\x100', 
		'\a', '\x41', '\x2', '\x2', '\x100', '\x102', '\x5', '|', '?', '\x2', 
		'\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', 
		'\a', '\x4', '\x2', '\x2', '\x107', '\x113', '\a', '\f', '\x2', '\x2', 
		'\x108', '\x10A', '\a', '=', '\x2', '\x2', '\x109', '\x10B', '\a', '\x4', 
		'\x2', '\x2', '\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10E', '\x5', '\x34', '\x1B', '\x2', '\x10D', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\a', '\x4', '\x2', 
		'\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x114', '\a', '>', '\x2', '\x2', '\x113', '\x108', '\x3', '\x2', 
		'\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x5', '(', '\x15', '\x2', 
		'\x116', '\x117', '\a', '\x4', '\x2', '\x2', '\x117', '\x118', '\a', '\x10', 
		'\x2', '\x2', '\x118', '\x119', '\a', '\f', '\x2', '\x2', '\x119', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\a', '\x4', '\x2', '\x2', 
		'\x11B', '\x11D', '\a', '\x1D', '\x2', '\x2', '\x11C', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\a', '\x1F', '\x2', 
		'\x2', '\x11F', '\x123', '\a', 'V', '\x2', '\x2', '\x120', '\x124', '\x5', 
		'|', '?', '\x2', '\x121', '\x122', '\a', '\x37', '\x2', '\x2', '\x122', 
		'\x124', '\x5', 'L', '\'', '\x2', '\x123', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x124', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x5', '\x1C', '\xF', '\x2', 
		'\x126', '\x128', '\x5', '\x1E', '\x10', '\x2', '\x127', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '\x4', '\x2', 
		'\x2', '\x12A', '\x12B', '\a', '\x13', '\x2', '\x2', '\x12B', '\x12C', 
		'\x5', '\"', '\x12', '\x2', '\x12C', '\x12D', '\x5', '(', '\x15', '\x2', 
		'\x12D', '\x12E', '\a', '\x4', '\x2', '\x2', '\x12E', '\x12F', '\a', '\"', 
		'\x2', '\x2', '\x12F', '\x130', '\x5', 'L', '\'', '\x2', '\x130', '\x131', 
		'\a', '\x4', '\x2', '\x2', '\x131', '\x132', '\a', '\x10', '\x2', '\x2', 
		'\x132', '\x133', '\a', '\x13', '\x2', '\x2', '\x133', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\a', '\x4', '\x2', '\x2', '\x135', 
		'\x136', '\a', '\x13', '\x2', '\x2', '\x136', '\x138', '\x5', '\"', '\x12', 
		'\x2', '\x137', '\x139', '\a', '\x4', '\x2', '\x2', '\x138', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13C', '\a', 
		'\x38', '\x2', '\x2', '\x13B', '\x13D', '\a', '\x4', '\x2', '\x2', '\x13C', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', 
		'\x5', ' ', '\x11', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x142', '\x5', 'L', '\'', '\x2', '\x142', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x143', '\x145', '\a', '\x19', '\x2', 
		'\x2', '\x144', '\x146', '\a', '\x4', '\x2', '\x2', '\x145', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x5', 
		'.', '\x18', '\x2', '\x148', '\x149', '\a', '\x37', '\x2', '\x2', '\x149', 
		'\x151', '\x5', 'L', '\'', '\x2', '\x14A', '\x14B', '\a', '\x41', '\x2', 
		'\x2', '\x14B', '\x14C', '\x5', '.', '\x18', '\x2', '\x14C', '\x14D', 
		'\a', '\x37', '\x2', '\x2', '\x14D', '\x14E', '\x5', 'L', '\'', '\x2', 
		'\x14E', '\x150', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x153', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x155', '\x3', '\x2', '\x2', '\x2', '\x153', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x156', '\a', '\x4', '\x2', '\x2', 
		'\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x159', '\a', '\x16', '\x2', '\x2', '\x158', '\x15A', '\a', '\x4', '\x2', 
		'\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\a', 'V', '\x2', '\x2', '\x15C', '\x15E', '\a', '=', 
		'\x2', '\x2', '\x15D', '\x15F', '\a', '\x4', '\x2', '\x2', '\x15E', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x161', '\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\x5', 
		'\x34', '\x1B', '\x2', '\x161', '\x160', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x165', '\a', '\x4', '\x2', '\x2', '\x164', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x168', '\a', 
		'>', '\x2', '\x2', '\x167', '\x169', '\a', '\x4', '\x2', '\x2', '\x168', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16C', 
		'\a', '\x6', '\x2', '\x2', '\x16B', '\x16D', '\a', '\x4', '\x2', '\x2', 
		'\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\x5', '|', '?', '\x2', '\x16F', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x171', '\a', '\x4', '\x2', '\x2', '\x171', '\x172', '\a', '\x1E', 
		'\x2', '\x2', '\x172', '\x173', '\x5', '&', '\x14', '\x2', '\x173', '\x174', 
		'\x5', '(', '\x15', '\x2', '\x174', '\x175', '\a', '\x4', '\x2', '\x2', 
		'\x175', '\x176', '\a', '\x10', '\x2', '\x2', '\x176', '\x177', '\a', 
		'\x1E', '\x2', '\x2', '\x177', '%', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x179', '\a', 'V', '\x2', '\x2', '\x179', '\x17B', '\a', '=', '\x2', 
		'\x2', '\x17A', '\x17C', '\a', '\x4', '\x2', '\x2', '\x17B', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17F', '\x5', 
		'\x34', '\x1B', '\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x181', '\a', '>', '\x2', '\x2', '\x181', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x183', '\a', '\x4', '\x2', '\x2', '\x183', 
		'\x18B', '\x5', 'L', '\'', '\x2', '\x184', '\x18B', '\x5', '\x6', '\x4', 
		'\x2', '\x185', '\x18B', '\x5', '*', '\x16', '\x2', '\x186', '\x18B', 
		'\x5', ',', '\x17', '\x2', '\x187', '\x18B', '\x5', '\x38', '\x1D', '\x2', 
		'\x188', '\x189', '\a', '\x4', '\x2', '\x2', '\x189', '\x18B', '\x5', 
		'T', '+', '\x2', '\x18A', '\x182', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x186', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		')', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x190', '\a', '\x4', '\x2', '\x2', '\x190', '\x191', 
		'\a', '*', '\x2', '\x2', '\x191', '\x192', '\a', 'V', '\x2', '\x2', '\x192', 
		'\x193', '\a', '\x37', '\x2', '\x2', '\x193', '\x194', '\x5', 'L', '\'', 
		'\x2', '\x194', '+', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\a', 
		'\x4', '\x2', '\x2', '\x196', '\x199', '\x5', '.', '\x18', '\x2', '\x197', 
		'\x19A', '\a', '\x37', '\x2', '\x2', '\x198', '\x19A', '\x5', 'j', '\x36', 
		'\x2', '\x199', '\x197', '\x3', '\x2', '\x2', '\x2', '\x199', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x19C', '\x5', 'L', '\'', '\x2', '\x19C', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x19D', '\x19E', '\a', '#', '\x2', '\x2', '\x19E', '\x1A0', 
		'\a', '@', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x1A3', '\a', 'V', '\x2', '\x2', '\x1A2', 
		'\x1A4', '\x5', 'V', ',', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A9', '\a', '!', '\x2', '\x2', 
		'\x1A6', '\x1A9', '\x5', '`', '\x31', '\x2', '\x1A7', '\x1A9', '\x5', 
		'\x64', '\x33', '\x2', '\x1A8', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A9', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AC', '\t', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AF', 
		'\a', 'V', '\x2', '\x2', '\x1AE', '\x1B0', '\x5', '\x80', '\x41', '\x2', 
		'\x1AF', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B3', '\a', '=', '\x2', '\x2', '\x1B2', '\x1B4', '\x5', '\x32', '\x1A', 
		'\x2', '\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\a', '>', '\x2', '\x2', '\x1B6', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7', '\x1BC', '\x5', 'L', '\'', '\x2', '\x1B8', '\x1B9', 
		'\a', '\x41', '\x2', '\x2', '\x1B9', '\x1BB', '\x5', 'L', '\'', '\x2', 
		'\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C4', 
		'\x5', '\x36', '\x1C', '\x2', '\x1C0', '\x1C1', '\a', '\x41', '\x2', '\x2', 
		'\x1C1', '\x1C3', '\x5', '\x36', '\x1C', '\x2', '\x1C2', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x35', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C9', '\a', '\x4', '\x2', '\x2', 
		'\x1C8', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CB', '\a', 'V', '\x2', '\x2', '\x1CB', '\x1CC', '\x5', '|', '?', '\x2', 
		'\x1CC', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1D5', '\x5', 
		':', '\x1E', '\x2', '\x1CE', '\x1D5', '\x5', '<', '\x1F', '\x2', '\x1CF', 
		'\x1D5', '\x5', '>', ' ', '\x2', '\x1D0', '\x1D5', '\x5', '@', '!', '\x2', 
		'\x1D1', '\x1D5', '\x5', '\x42', '\"', '\x2', '\x1D2', '\x1D5', '\x5', 
		'\x44', '#', '\x2', '\x1D3', '\x1D5', '\x5', '\x46', '$', '\x2', '\x1D4', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1CE', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D5', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D7', '\a', '\x4', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x14', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x5', 'L', '\'', '\x2', '\x1D9', '\x1DA', '\a', 
		'%', '\x2', '\x2', '\x1DA', '\x1E4', '\x5', '(', '\x15', '\x2', '\x1DB', 
		'\x1DC', '\a', '\x4', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '\xF', '\x2', 
		'\x2', '\x1DD', '\x1DE', '\a', '\x14', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\x5', 'L', '\'', '\x2', '\x1DF', '\x1E0', '\a', '%', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\x5', '(', '\x15', '\x2', '\x1E1', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E2', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\a', '\x4', '\x2', '\x2', '\x1E8', '\x1E9', '\a', '\xF', '\x2', 
		'\x2', '\x1E9', '\x1EB', '\x5', '(', '\x15', '\x2', '\x1EA', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', 
		'\x4', '\x2', '\x2', '\x1ED', '\x1EE', '\a', '\x10', '\x2', '\x2', '\x1EE', 
		'\x1EF', '\a', '\x14', '\x2', '\x2', '\x1EF', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x1F0', '\x1F1', '\a', '\x4', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\a', '\x12', '\x2', '\x2', '\x1F2', '\x1F3', '\a', 'V', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\a', '\x37', '\x2', '\x2', '\x1F4', '\x1F5', '\x5', 
		'L', '\'', '\x2', '\x1F5', '\x1F6', '\a', '\'', '\x2', '\x2', '\x1F6', 
		'\x1F7', '\x5', 'L', '\'', '\x2', '\x1F7', '\x1F8', '\x5', '(', '\x15', 
		'\x2', '\x1F8', '\x1F9', '\a', '\x4', '\x2', '\x2', '\x1F9', '\x1FA', 
		'\a', '\x10', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x12', '\x2', '\x2', 
		'\x1FB', '=', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', '\a', '\x4', 
		'\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x12', '\x2', '\x2', '\x1FE', '\x1FF', 
		'\a', 'V', '\x2', '\x2', '\x1FF', '\x200', '\a', '\x16', '\x2', '\x2', 
		'\x200', '\x201', '\x5', 'L', '\'', '\x2', '\x201', '\x202', '\x5', '(', 
		'\x15', '\x2', '\x202', '\x203', '\a', '\x4', '\x2', '\x2', '\x203', '\x204', 
		'\a', '\x10', '\x2', '\x2', '\x204', '\x205', '\a', '\x12', '\x2', '\x2', 
		'\x205', '?', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\a', '\x4', 
		'\x2', '\x2', '\x207', '\x208', '\a', '+', '\x2', '\x2', '\x208', '\x209', 
		'\x5', 'L', '\'', '\x2', '\x209', '\x20A', '\x5', '(', '\x15', '\x2', 
		'\x20A', '\x20B', '\a', '\x4', '\x2', '\x2', '\x20B', '\x20C', '\a', '\x10', 
		'\x2', '\x2', '\x20C', '\x20D', '\a', '+', '\x2', '\x2', '\x20D', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\a', '\x4', '\x2', '\x2', 
		'\x20F', '\x210', '\a', ' ', '\x2', '\x2', '\x210', '\x211', '\x5', '(', 
		'\x15', '\x2', '\x211', '\x212', '\a', '\x4', '\x2', '\x2', '\x212', '\x213', 
		'\a', ')', '\x2', '\x2', '\x213', '\x214', '\x5', 'L', '\'', '\x2', '\x214', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\a', '\x4', '\x2', 
		'\x2', '\x216', '\x217', '\a', '(', '\x2', '\x2', '\x217', '\x21E', '\x5', 
		'(', '\x15', '\x2', '\x218', '\x219', '\a', '\x4', '\x2', '\x2', '\x219', 
		'\x21A', '\a', '\t', '\x2', '\x2', '\x21A', '\x21B', '\a', 'V', '\x2', 
		'\x2', '\x21B', '\x21C', '\x5', '|', '?', '\x2', '\x21C', '\x21D', '\x5', 
		'(', '\x15', '\x2', '\x21D', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', '\x2', '\x2', 
		'\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\a', '\x4', '\x2', '\x2', '\x221', '\x222', '\a', '\x10', '\x2', '\x2', 
		'\x222', '\x223', '\a', '(', '\x2', '\x2', '\x223', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x224', '\x225', '\a', '\x4', '\x2', '\x2', '\x225', '\x226', 
		'\a', '$', '\x2', '\x2', '\x226', '\x22A', '\x5', 'L', '\'', '\x2', '\x227', 
		'\x229', '\x5', 'H', '%', '\x2', '\x228', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x228', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'\x22B', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', '\x22F', '\x5', 'J', '&', '\x2', '\x22E', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', 
		'\a', '\x10', '\x2', '\x2', '\x231', '\x232', '\a', '$', '\x2', '\x2', 
		'\x232', 'G', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\a', '\x4', 
		'\x2', '\x2', '\x234', '\x235', '\a', '\b', '\x2', '\x2', '\x235', '\x236', 
		'\x5', 'v', '<', '\x2', '\x236', '\x237', '\x5', '(', '\x15', '\x2', '\x237', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', '\x4', '\x2', 
		'\x2', '\x239', '\x23A', '\a', '\xE', '\x2', '\x2', '\x23A', '\x23B', 
		'\x5', '(', '\x15', '\x2', '\x23B', 'K', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23D', '\b', '\'', '\x1', '\x2', '\x23D', '\x24A', '\x5', 'N', '(', 
		'\x2', '\x23E', '\x24A', '\x5', '\x30', '\x19', '\x2', '\x23F', '\x24A', 
		'\x5', 'Z', '.', '\x2', '\x240', '\x241', '\x5', 'l', '\x37', '\x2', '\x241', 
		'\x242', '\x5', 'L', '\'', '\t', '\x242', '\x24A', '\x3', '\x2', '\x2', 
		'\x2', '\x243', '\x24A', '\x5', 'x', '=', '\x2', '\x244', '\x24A', '\x5', 
		'P', ')', '\x2', '\x245', '\x24A', '\x5', 'R', '*', '\x2', '\x246', '\x24A', 
		'\x5', 'T', '+', '\x2', '\x247', '\x248', '\a', '\x4', '\x2', '\x2', '\x248', 
		'\x24A', '\x5', 'L', '\'', '\x3', '\x249', '\x23C', '\x3', '\x2', '\x2', 
		'\x2', '\x249', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x249', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', '\x249', '\x240', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x243', '\x3', '\x2', '\x2', '\x2', '\x249', '\x244', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x245', '\x3', '\x2', '\x2', '\x2', '\x249', 
		'\x246', '\x3', '\x2', '\x2', '\x2', '\x249', '\x247', '\x3', '\x2', '\x2', 
		'\x2', '\x24A', '\x259', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', 
		'\f', '\b', '\x2', '\x2', '\x24C', '\x24D', '\x5', 'n', '\x38', '\x2', 
		'\x24D', '\x24E', '\x5', 'L', '\'', '\t', '\x24E', '\x258', '\x3', '\x2', 
		'\x2', '\x2', '\x24F', '\x250', '\f', '\f', '\x2', '\x2', '\x250', '\x258', 
		'\x5', 'V', ',', '\x2', '\x251', '\x252', '\f', '\v', '\x2', '\x2', '\x252', 
		'\x253', '\a', '@', '\x2', '\x2', '\x253', '\x258', '\x5', '\x30', '\x19', 
		'\x2', '\x254', '\x255', '\f', '\n', '\x2', '\x2', '\x255', '\x256', '\a', 
		'@', '\x2', '\x2', '\x256', '\x258', '\a', 'V', '\x2', '\x2', '\x257', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x257', '\x24F', '\x3', '\x2', '\x2', 
		'\x2', '\x257', '\x251', '\x3', '\x2', '\x2', '\x2', '\x257', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x25B', '\x3', '\x2', '\x2', '\x2', 
		'\x259', '\x257', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', '\x3', 
		'\x2', '\x2', '\x2', '\x25A', 'M', '\x3', '\x2', '\x2', '\x2', '\x25B', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\a', '=', '\x2', 
		'\x2', '\x25D', '\x25E', '\x5', 'L', '\'', '\x2', '\x25E', '\x25F', '\a', 
		'>', '\x2', '\x2', '\x25F', 'O', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x262', '\a', '\x4', '\x2', '\x2', '\x261', '\x260', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x262', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\a', '\x14', '\x2', '\x2', 
		'\x264', '\x266', '\x5', 'L', '\'', '\x2', '\x265', '\x267', '\a', '\x4', 
		'\x2', '\x2', '\x266', '\x265', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', 
		'\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x269', '\a', '%', '\x2', '\x2', '\x269', '\x26B', '\x5', 'L', 
		'\'', '\x2', '\x26A', '\x26C', '\a', '\x4', '\x2', '\x2', '\x26B', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', 
		'\xF', '\x2', '\x2', '\x26E', '\x26F', '\x5', 'L', '\'', '\x2', '\x26F', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x270', '\x271', '\a', '\x18', '\x2', 
		'\x2', '\x271', '\x272', '\x5', '\x32', '\x1A', '\x2', '\x272', '\x273', 
		'\a', '\x38', '\x2', '\x2', '\x273', '\x274', '\x5', 'L', '\'', '\x2', 
		'\x274', 'S', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\a', '&', 
		'\x2', '\x2', '\x276', '\x277', '\x5', '|', '?', '\x2', '\x277', '\x278', 
		'\a', '=', '\x2', '\x2', '\x278', '\x279', '\x5', '\x32', '\x1A', '\x2', 
		'\x279', '\x27A', '\a', '>', '\x2', '\x2', '\x27A', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x27B', '\x282', '\a', ';', '\x2', '\x2', '\x27C', '\x283', 
		'\x5', 'L', '\'', '\x2', '\x27D', '\x27E', '\x5', 'L', '\'', '\x2', '\x27E', 
		'\x27F', '\a', '\x41', '\x2', '\x2', '\x27F', '\x280', '\x5', 'L', '\'', 
		'\x2', '\x280', '\x283', '\x3', '\x2', '\x2', '\x2', '\x281', '\x283', 
		'\x5', 'X', '-', '\x2', '\x282', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x282', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x284', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\a', '<', '\x2', '\x2', '\x285', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x286', '\x287', '\x5', 'L', '\'', '\x2', '\x287', '\x288', '\a', '?', 
		'\x2', '\x2', '\x288', '\x289', '\x5', 'L', '\'', '\x2', '\x289', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\x5', 'L', '\'', '\x2', 
		'\x28B', '\x28C', '\a', '?', '\x2', '\x2', '\x28C', '\x290', '\x3', '\x2', 
		'\x2', '\x2', '\x28D', '\x28E', '\a', '?', '\x2', '\x2', '\x28E', '\x290', 
		'\x5', 'L', '\'', '\x2', '\x28F', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x290', 'Y', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x29B', '\x5', 'v', '<', '\x2', '\x292', '\x293', '\a', '#', '\x2', '\x2', 
		'\x293', '\x295', '\a', '@', '\x2', '\x2', '\x294', '\x292', '\x3', '\x2', 
		'\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', '\x2', '\x295', '\x296', 
		'\x3', '\x2', '\x2', '\x2', '\x296', '\x29B', '\a', 'V', '\x2', '\x2', 
		'\x297', '\x29B', '\x5', '\\', '/', '\x2', '\x298', '\x29B', '\a', '#', 
		'\x2', '\x2', '\x299', '\x29B', '\a', '!', '\x2', '\x2', '\x29A', '\x291', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x294', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', '\x297', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x298', '\x3', 
		'\x2', '\x2', '\x2', '\x29A', '\x299', '\x3', '\x2', '\x2', '\x2', '\x29B', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x2A0', '\x5', '^', '\x30', 
		'\x2', '\x29D', '\x2A0', '\x5', '\x62', '\x32', '\x2', '\x29E', '\x2A0', 
		'\x5', '\x66', '\x34', '\x2', '\x29F', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x29E', '\x3', 
		'\x2', '\x2', '\x2', '\x2A0', ']', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\a', '=', '\x2', '\x2', '\x2A2', '\x2A3', '\x5', 'L', '\'', 
		'\x2', '\x2A3', '\x2A4', '\a', '\x41', '\x2', '\x2', '\x2A4', '\x2A9', 
		'\x5', 'L', '\'', '\x2', '\x2A5', '\x2A6', '\a', '\x41', '\x2', '\x2', 
		'\x2A6', '\x2A8', '\x5', 'L', '\'', '\x2', '\x2A7', '\x2A5', '\x3', '\x2', 
		'\x2', '\x2', '\x2A8', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2A7', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', '\x2', '\x2', '\x2', 
		'\x2AA', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2A9', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', '>', '\x2', '\x2', '\x2AD', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\a', '=', '\x2', '\x2', 
		'\x2AF', '\x2B2', '\a', 'V', '\x2', '\x2', '\x2B0', '\x2B1', '\a', '\x41', 
		'\x2', '\x2', '\x2B1', '\x2B3', '\a', 'V', '\x2', '\x2', '\x2B2', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'\x2B4', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x3', 
		'\x2', '\x2', '\x2', '\x2B5', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x2B7', '\a', '>', '\x2', '\x2', '\x2B7', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x2B8', '\x2C7', '\a', '\x39', '\x2', '\x2', '\x2B9', '\x2BB', 
		'\a', '\x4', '\x2', '\x2', '\x2BA', '\x2B9', '\x3', '\x2', '\x2', '\x2', 
		'\x2BA', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\x3', 
		'\x2', '\x2', '\x2', '\x2BC', '\x2C1', '\x5', 'L', '\'', '\x2', '\x2BD', 
		'\x2BE', '\a', '\x41', '\x2', '\x2', '\x2BE', '\x2C0', '\x5', 'L', '\'', 
		'\x2', '\x2BF', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2BF', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C4', 
		'\x2C6', '\a', '\x4', '\x2', '\x2', '\x2C5', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9', '\x2CA', '\a', ':', '\x2', '\x2', '\x2CA', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\a', '\x39', '\x2', 
		'\x2', '\x2CC', '\x2CD', '\a', 'V', '\x2', '\x2', '\x2CD', '\x2CE', '\a', 
		'\x42', '\x2', '\x2', '\x2CE', '\x2CF', '\a', 'V', '\x2', '\x2', '\x2CF', 
		'\x2D0', '\a', ':', '\x2', '\x2', '\x2D0', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', '\x2E0', '\a', '\x39', '\x2', '\x2', '\x2D2', '\x2D4', 
		'\a', '\x4', '\x2', '\x2', '\x2D3', '\x2D2', '\x3', '\x2', '\x2', '\x2', 
		'\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\x3', 
		'\x2', '\x2', '\x2', '\x2D5', '\x2DA', '\x5', 'h', '\x35', '\x2', '\x2D6', 
		'\x2D7', '\a', '\x41', '\x2', '\x2', '\x2D7', '\x2D9', '\x5', 'h', '\x35', 
		'\x2', '\x2D8', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2D8', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DE', '\x3', 
		'\x2', '\x2', '\x2', '\x2DC', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DD', 
		'\x2DF', '\a', '\x4', '\x2', '\x2', '\x2DE', '\x2DD', '\x3', '\x2', '\x2', 
		'\x2', '\x2DE', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E1', 
		'\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2D3', '\x3', '\x2', '\x2', '\x2', 
		'\x2E0', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\x3', 
		'\x2', '\x2', '\x2', '\x2E2', '\x2E3', '\a', ':', '\x2', '\x2', '\x2E3', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\x5', 'L', '\'', '\x2', 
		'\x2E5', '\x2E6', '\a', '\x42', '\x2', '\x2', '\x2E6', '\x2E7', '\x5', 
		'L', '\'', '\x2', '\x2E7', 'i', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E9', 
		'\t', '\x3', '\x2', '\x2', '\x2E9', 'k', '\x3', '\x2', '\x2', '\x2', '\x2EA', 
		'\x2EB', '\t', '\x4', '\x2', '\x2', '\x2EB', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\x2EC', '\x2F0', '\x5', 'p', '\x39', '\x2', '\x2ED', '\x2F0', 
		'\x5', 'r', ':', '\x2', '\x2EE', '\x2F0', '\x5', 't', ';', '\x2', '\x2EF', 
		'\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2ED', '\x3', '\x2', '\x2', 
		'\x2', '\x2EF', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F0', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x2F1', '\x2F2', '\t', '\x5', '\x2', '\x2', '\x2F2', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F4', '\t', '\x6', '\x2', 
		'\x2', '\x2F4', 's', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F6', '\t', 
		'\a', '\x2', '\x2', '\x2F6', 'u', '\x3', '\x2', '\x2', '\x2', '\x2F7', 
		'\x2F8', '\t', '\b', '\x2', '\x2', '\x2F8', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', '\x2FA', '\a', '\x1B', '\x2', '\x2', '\x2FA', '\x2FB', 
		'\x5', '|', '?', '\x2', '\x2FB', '\x2FD', '\a', '=', '\x2', '\x2', '\x2FC', 
		'\x2FE', '\x5', '\x32', '\x1A', '\x2', '\x2FD', '\x2FC', '\x3', '\x2', 
		'\x2', '\x2', '\x2FD', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FF', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x301', '\a', '>', '\x2', '\x2', 
		'\x300', '\x302', '\x5', 'z', '>', '\x2', '\x301', '\x300', '\x3', '\x2', 
		'\x2', '\x2', '\x301', '\x302', '\x3', '\x2', '\x2', '\x2', '\x302', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\x303', '\x304', '\a', 'V', '\x2', '\x2', 
		'\x304', '\x306', '\x5', 'z', '>', '\x2', '\x305', '\x2F9', '\x3', '\x2', 
		'\x2', '\x2', '\x305', '\x303', '\x3', '\x2', '\x2', '\x2', '\x306', 'y', 
		'\x3', '\x2', '\x2', '\x2', '\x307', '\x308', '\a', ',', '\x2', '\x2', 
		'\x308', '\x309', '\a', '\x39', '\x2', '\x2', '\x309', '\x30E', '\x5', 
		',', '\x17', '\x2', '\x30A', '\x30B', '\a', '\x41', '\x2', '\x2', '\x30B', 
		'\x30D', '\x5', ',', '\x17', '\x2', '\x30C', '\x30A', '\x3', '\x2', '\x2', 
		'\x2', '\x30D', '\x310', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30C', 
		'\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\x3', '\x2', '\x2', '\x2', 
		'\x30F', '\x311', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30E', '\x3', 
		'\x2', '\x2', '\x2', '\x311', '\x312', '\a', ':', '\x2', '\x2', '\x312', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x313', '\x31B', '\a', '.', '\x2', '\x2', 
		'\x314', '\x31B', '\x5', '~', '@', '\x2', '\x315', '\x31B', '\a', 'U', 
		'\x2', '\x2', '\x316', '\x317', '\a', 'U', '\x2', '\x2', '\x317', '\x31B', 
		'\x5', '\x80', '\x41', '\x2', '\x318', '\x31B', '\x5', '\x82', '\x42', 
		'\x2', '\x319', '\x31B', '\x5', '\x84', '\x43', '\x2', '\x31A', '\x313', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x315', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x316', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x318', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x319', '\x3', '\x2', '\x2', '\x2', '\x31B', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x31C', '\x31D', '\t', '\t', '\x2', '\x2', '\x31D', '\x31E', '\x5', 
		'\x80', '\x41', '\x2', '\x31E', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x320', '\a', 'J', '\x2', '\x2', '\x320', '\x325', '\x5', '|', '?', '\x2', 
		'\x321', '\x322', '\a', '\x41', '\x2', '\x2', '\x322', '\x324', '\x5', 
		'|', '?', '\x2', '\x323', '\x321', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x325', '\x323', '\x3', '\x2', '\x2', 
		'\x2', '\x325', '\x326', '\x3', '\x2', '\x2', '\x2', '\x326', '\x328', 
		'\x3', '\x2', '\x2', '\x2', '\x327', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x328', '\x329', '\a', 'K', '\x2', '\x2', '\x329', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x32A', '\x32B', '\a', '=', '\x2', '\x2', '\x32B', '\x32E', 
		'\x5', '|', '?', '\x2', '\x32C', '\x32D', '\a', '\x41', '\x2', '\x2', 
		'\x32D', '\x32F', '\x5', '|', '?', '\x2', '\x32E', '\x32C', '\x3', '\x2', 
		'\x2', '\x2', '\x32F', '\x330', '\x3', '\x2', '\x2', '\x2', '\x330', '\x32E', 
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x331', '\x332', '\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\a', 
		'>', '\x2', '\x2', '\x333', '\x83', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x335', '\a', '=', '\x2', '\x2', '\x335', '\x33A', '\x5', '|', '?', '\x2', 
		'\x336', '\x337', '\a', '\x41', '\x2', '\x2', '\x337', '\x339', '\x5', 
		'|', '?', '\x2', '\x338', '\x336', '\x3', '\x2', '\x2', '\x2', '\x339', 
		'\x33C', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x338', '\x3', '\x2', '\x2', 
		'\x2', '\x33A', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x33A', '\x3', '\x2', '\x2', '\x2', 
		'\x33D', '\x33E', '\a', '\x38', '\x2', '\x2', '\x33E', '\x33F', '\x5', 
		'|', '?', '\x2', '\x33F', '\x340', '\a', '>', '\x2', '\x2', '\x340', '\x85', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x8C', '\x8E', '\x94', '\xAE', '\xBC', 
		'\xC2', '\xC9', '\xCB', '\xD7', '\xDD', '\xDF', '\xEB', '\xF4', '\xF6', 
		'\x103', '\x10A', '\x10D', '\x110', '\x113', '\x11C', '\x123', '\x127', 
		'\x138', '\x13C', '\x13F', '\x145', '\x151', '\x155', '\x159', '\x15E', 
		'\x161', '\x164', '\x168', '\x16C', '\x17B', '\x17E', '\x18A', '\x18C', 
		'\x199', '\x19F', '\x1A3', '\x1A8', '\x1AB', '\x1AF', '\x1B3', '\x1BC', 
		'\x1C4', '\x1C8', '\x1D4', '\x1E4', '\x1EA', '\x21E', '\x22A', '\x22E', 
		'\x249', '\x257', '\x259', '\x261', '\x266', '\x26B', '\x282', '\x28F', 
		'\x294', '\x29A', '\x29F', '\x2A9', '\x2B4', '\x2BA', '\x2C1', '\x2C5', 
		'\x2C7', '\x2D3', '\x2DA', '\x2DE', '\x2E0', '\x2EF', '\x2FD', '\x301', 
		'\x305', '\x30E', '\x31A', '\x325', '\x330', '\x33A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
