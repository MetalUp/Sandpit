//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\GitHub\Sandpit\Compiler\SandpitAntlr\Sandpit.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SandpitParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, NL=2, LINE_CONTINUATION=3, SINGLE_LINE_COMMENT=4, AS=5, 
		ABSTRACT=6, CASE=7, CATCH=8, CLASS=9, CONSTANT=10, CONSTRUCTOR=11, CURRY=12, 
		DEFAULT=13, ELSE=14, END=15, ENUMERATION=16, FOR=17, FUNCTION=18, IF=19, 
		IMMUTABLE=20, IN=21, INHERITS=22, LAMBDA=23, LET=24, MAIN=25, METHOD=26, 
		NEW=27, PARTIAL=28, PRIVATE=29, PROCEDURE=30, PROPERTY=31, REPEAT=32, 
		RESULT=33, RETURN=34, SELF=35, SWITCH=36, THEN=37, THROW=38, TO=39, TRY=40, 
		UNTIL=41, VAR=42, WHILE=43, WITH=44, BOOL_VALUE=45, VALUE_TYPE=46, ARRAY=47, 
		LIST=48, DICTIONARY=49, ITERABLE=50, RANDOM=51, ASSIGN_ADD=52, ASSIGN_SUBTRACT=53, 
		ASSIGN_MULT=54, ASSIGN_DIV=55, ASSIGN=56, ARROW=57, OPEN_BRACE=58, CLOSE_BRACE=59, 
		OPEN_SQ_BRACKET=60, CLOSE_SQ_BRACKET=61, OPEN_BRACKET=62, CLOSE_BRACKET=63, 
		DOUBLE_DOT=64, DOT=65, COMMA=66, COLON=67, PLUS=68, MINUS=69, MULT=70, 
		DIVIDE=71, POWER=72, MOD=73, INT_DIV=74, LT=75, GT=76, NULLABLE=77, OP_AND=78, 
		OP_NOT=79, OP_OR=80, OP_XOR=81, OP_EQ=82, OP_NE=83, OP_LE=84, OP_GE=85, 
		IDENTIFIER=86, TYPENAME=87, LITERAL_INTEGER=88, LITERAL_FLOAT=89, LITERAL_DECIMAL=90, 
		LITERAL_CHAR=91, LITERAL_STRING=92, VERBATIM_ONLY_STRING=93, WHITESPACES=94, 
		NEWLINE=95, WS=96;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_constantDef = 2, RULE_classDef = 3, 
		RULE_mutableClass = 4, RULE_immutableClass = 5, RULE_abstractClass = 6, 
		RULE_inherits = 7, RULE_constructor = 8, RULE_property = 9, RULE_functionDef = 10, 
		RULE_functionWithBody = 11, RULE_expressionFunction = 12, RULE_letIn = 13, 
		RULE_functionSignature = 14, RULE_procedureDef = 15, RULE_procedureSignature = 16, 
		RULE_procedureBlock = 17, RULE_functionBlock = 18, RULE_varDef = 19, RULE_assignment = 20, 
		RULE_procedureCall = 21, RULE_assignableValue = 22, RULE_functionCall = 23, 
		RULE_argumentList = 24, RULE_parameterList = 25, RULE_parameter = 26, 
		RULE_proceduralControlFlow = 27, RULE_functionalControlFlow = 28, RULE_if = 29, 
		RULE_if_functional = 30, RULE_for = 31, RULE_for_functional = 32, RULE_forIn = 33, 
		RULE_forIn_functional = 34, RULE_while = 35, RULE_while_functional = 36, 
		RULE_repeat = 37, RULE_repeat_functional = 38, RULE_try = 39, RULE_try_functional = 40, 
		RULE_switch = 41, RULE_switch_functional = 42, RULE_case = 43, RULE_case_functional = 44, 
		RULE_caseDefault = 45, RULE_caseDefault_functional = 46, RULE_expression = 47, 
		RULE_closedExpression = 48, RULE_bracketedExpression = 49, RULE_ifExpression = 50, 
		RULE_lambda = 51, RULE_throwException = 52, RULE_index = 53, RULE_range = 54, 
		RULE_value = 55, RULE_dataStructure = 56, RULE_tuple = 57, RULE_tupleDecomp = 58, 
		RULE_list = 59, RULE_listDecomp = 60, RULE_dictionary = 61, RULE_kvp = 62, 
		RULE_assignmentOp = 63, RULE_unaryOp = 64, RULE_binaryOp = 65, RULE_arithmeticOp = 66, 
		RULE_logicalOp = 67, RULE_conditionalOp = 68, RULE_literalValue = 69, 
		RULE_newInstance = 70, RULE_withClause = 71, RULE_type = 72, RULE_enumeration = 73, 
		RULE_enumValue = 74, RULE_dataStructureType = 75, RULE_tupleType = 76, 
		RULE_arrayType = 77, RULE_listType = 78, RULE_dictionaryType = 79, RULE_iterableType = 80, 
		RULE_genericType = 81, RULE_generic = 82, RULE_funcType = 83, RULE_className = 84, 
		RULE_valueName = 85, RULE_constantName = 86, RULE_propertyName = 87, RULE_parameterName = 88, 
		RULE_variableName = 89, RULE_letName = 90, RULE_procedureName = 91, RULE_functionName = 92;
	public static readonly string[] ruleNames = {
		"file", "main", "constantDef", "classDef", "mutableClass", "immutableClass", 
		"abstractClass", "inherits", "constructor", "property", "functionDef", 
		"functionWithBody", "expressionFunction", "letIn", "functionSignature", 
		"procedureDef", "procedureSignature", "procedureBlock", "functionBlock", 
		"varDef", "assignment", "procedureCall", "assignableValue", "functionCall", 
		"argumentList", "parameterList", "parameter", "proceduralControlFlow", 
		"functionalControlFlow", "if", "if_functional", "for", "for_functional", 
		"forIn", "forIn_functional", "while", "while_functional", "repeat", "repeat_functional", 
		"try", "try_functional", "switch", "switch_functional", "case", "case_functional", 
		"caseDefault", "caseDefault_functional", "expression", "closedExpression", 
		"bracketedExpression", "ifExpression", "lambda", "throwException", "index", 
		"range", "value", "dataStructure", "tuple", "tupleDecomp", "list", "listDecomp", 
		"dictionary", "kvp", "assignmentOp", "unaryOp", "binaryOp", "arithmeticOp", 
		"logicalOp", "conditionalOp", "literalValue", "newInstance", "withClause", 
		"type", "enumeration", "enumValue", "dataStructureType", "tupleType", 
		"arrayType", "listType", "dictionaryType", "iterableType", "genericType", 
		"generic", "funcType", "className", "valueName", "constantName", "propertyName", 
		"parameterName", "variableName", "letName", "procedureName", "functionName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, "'as'", "'abstract'", 
		"'case'", "'catch'", "'class'", "'constant'", "'constructor'", "'curry'", 
		"'default'", "'else'", "'end'", "'enumeration'", "'for'", "'function'", 
		"'if'", "'immutable'", "'in'", "'inherits'", "'lambda'", "'let'", "'main'", 
		"'method'", "'new'", "'partial'", "'private'", "'procedure'", "'property'", 
		"'repeat'", "'result'", "'return'", "'self'", "'switch'", "'then'", "'throw'", 
		"'to'", "'try'", "'until'", "'var'", "'while'", "'with'", null, null, 
		"'Array'", "'List'", "'Dictionary'", "'Iter'", "'Random'", "'+='", "'-='", 
		"'*='", "'/='", "'='", "'->'", "'{'", "'}'", "'['", "']'", "'('", "')'", 
		"'..'", "'.'", null, "':'", "'+'", "'-'", "'*'", "'/'", "'^'", "'mod'", 
		"'div'", "'<'", "'>'", "'?'", "'and'", "'not'", "'or'", "'xor'", null, 
		null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "NL", "LINE_CONTINUATION", "SINGLE_LINE_COMMENT", 
		"AS", "ABSTRACT", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", 
		"CURRY", "DEFAULT", "ELSE", "END", "ENUMERATION", "FOR", "FUNCTION", "IF", 
		"IMMUTABLE", "IN", "INHERITS", "LAMBDA", "LET", "MAIN", "METHOD", "NEW", 
		"PARTIAL", "PRIVATE", "PROCEDURE", "PROPERTY", "REPEAT", "RESULT", "RETURN", 
		"SELF", "SWITCH", "THEN", "THROW", "TO", "TRY", "UNTIL", "VAR", "WHILE", 
		"WITH", "BOOL_VALUE", "VALUE_TYPE", "ARRAY", "LIST", "DICTIONARY", "ITERABLE", 
		"RANDOM", "ASSIGN_ADD", "ASSIGN_SUBTRACT", "ASSIGN_MULT", "ASSIGN_DIV", 
		"ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "DOUBLE_DOT", "DOT", "COMMA", "COLON", 
		"PLUS", "MINUS", "MULT", "DIVIDE", "POWER", "MOD", "INT_DIV", "LT", "GT", 
		"NULLABLE", "OP_AND", "OP_NOT", "OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "IDENTIFIER", "TYPENAME", "LITERAL_INTEGER", "LITERAL_FLOAT", 
		"LITERAL_DECIMAL", "LITERAL_CHAR", "LITERAL_STRING", "VERBATIM_ONLY_STRING", 
		"WHITESPACES", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sandpit.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SandpitParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SandpitParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SandpitParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SandpitParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 186;
						main();
						}
						break;
					case 2:
						{
						State = 187;
						constantDef();
						}
						break;
					case 3:
						{
						State = 188;
						classDef();
						}
						break;
					case 4:
						{
						State = 189;
						functionDef();
						}
						break;
					case 5:
						{
						State = 190;
						procedureDef();
						}
						break;
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 196;
				Match(NL);
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 202;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(SandpitParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(SandpitParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(NL);
			State = 205;
			Match(MAIN);
			State = 206;
			procedureBlock();
			State = 207;
			Match(NL);
			State = 208;
			Match(END);
			State = 209;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(SandpitParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantNameContext constantName() {
			return GetRuleContext<ConstantNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(NL);
			State = 212;
			Match(CONSTANT);
			State = 213;
			constantName();
			State = 214;
			Match(ASSIGN);
			State = 215;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractClassContext abstractClass() {
			return GetRuleContext<AbstractClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDef);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				abstractClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				mutableClass();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219;
				immutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 8, RULE_mutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(NL);
			State = 223;
			Match(CLASS);
			State = 224;
			className();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 225;
				inherits();
				}
			}

			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 233;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 228;
						constructor();
						}
						break;
					case 2:
						{
						State = 229;
						property();
						}
						break;
					case 3:
						{
						State = 230;
						functionDef();
						}
						break;
					case 4:
						{
						State = 231;
						procedureDef();
						}
						break;
					case 5:
						{
						State = 232;
						constantDef();
						}
						break;
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 238;
			Match(NL);
			State = 239;
			Match(END);
			State = 240;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(SandpitParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 10, RULE_immutableClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(NL);
			State = 243;
			Match(IMMUTABLE);
			State = 244;
			Match(CLASS);
			State = 245;
			className();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 246;
				inherits();
				}
			}

			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 253;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 249;
						constructor();
						}
						break;
					case 2:
						{
						State = 250;
						property();
						}
						break;
					case 3:
						{
						State = 251;
						functionDef();
						}
						break;
					case 4:
						{
						State = 252;
						constantDef();
						}
						break;
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 258;
			Match(NL);
			State = 259;
			Match(END);
			State = 260;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(SandpitParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritsContext inherits() {
			return GetRuleContext<InheritsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(SandpitParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(SandpitParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext[] functionSignature() {
			return GetRuleContexts<FunctionSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature(int i) {
			return GetRuleContext<FunctionSignatureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(SandpitParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(SandpitParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext[] procedureSignature() {
			return GetRuleContexts<ProcedureSignatureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature(int i) {
			return GetRuleContext<ProcedureSignatureContext>(i);
		}
		public AbstractClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractClassContext abstractClass() {
		AbstractClassContext _localctx = new AbstractClassContext(Context, State);
		EnterRule(_localctx, 12, RULE_abstractClass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(NL);
			State = 263;
			Match(ABSTRACT);
			State = 264;
			Match(CLASS);
			State = 265;
			className();
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 266;
				inherits();
				}
			}

			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 276;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						State = 269;
						property();
						}
						break;
					case 2:
						{
						State = 270;
						Match(NL);
						State = 271;
						Match(FUNCTION);
						State = 272;
						functionSignature();
						}
						break;
					case 3:
						{
						State = 273;
						Match(NL);
						State = 274;
						Match(PROCEDURE);
						State = 275;
						procedureSignature();
						}
						break;
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 281;
			Match(NL);
			State = 282;
			Match(END);
			State = 283;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(SandpitParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public InheritsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritsContext inherits() {
		InheritsContext _localctx = new InheritsContext(Context, State);
		EnterRule(_localctx, 14, RULE_inherits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(INHERITS);
			State = 286;
			type();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 287;
				Match(COMMA);
				State = 288;
				type();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(SandpitParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(SandpitParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 16, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(NL);
			State = 295;
			Match(CONSTRUCTOR);
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 296;
				Match(OPEN_BRACKET);
				State = 298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 297;
					Match(NL);
					}
					break;
				}
				State = 301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 300;
					parameterList();
					}
					break;
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 303;
					Match(NL);
					}
				}

				State = 306;
				Match(CLOSE_BRACKET);
				}
			}

			State = 309;
			functionBlock();
			State = 310;
			Match(NL);
			State = 311;
			Match(END);
			State = 312;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SandpitParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(SandpitParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 18, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(NL);
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 315;
				Match(PRIVATE);
				}
			}

			State = 318;
			Match(PROPERTY);
			State = 319;
			propertyName();
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case VALUE_TYPE:
			case ARRAY:
			case LIST:
			case DICTIONARY:
			case ITERABLE:
			case RANDOM:
			case OPEN_BRACKET:
			case IDENTIFIER:
				{
				State = 320;
				type();
				}
				break;
			case ASSIGN:
				{
				{
				State = 321;
				Match(ASSIGN);
				State = 322;
				expression(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionDef);
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(SandpitParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(SandpitParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(SandpitParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(NL);
			State = 330;
			Match(FUNCTION);
			State = 331;
			functionSignature();
			State = 332;
			functionBlock();
			State = 333;
			Match(NL);
			State = 334;
			Match(RETURN);
			State = 335;
			expression(0);
			State = 336;
			Match(NL);
			State = 337;
			Match(END);
			State = 338;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SandpitParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetInContext letIn() {
			return GetRuleContext<LetInContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expressionFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(NL);
			State = 341;
			Match(FUNCTION);
			State = 342;
			functionSignature();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 343;
				Match(NL);
				}
			}

			State = 346;
			Match(ARROW);
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 347;
				Match(NL);
				}
				break;
			}
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 350;
				letIn();
				}
			}

			State = 353;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(SandpitParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext[] assignableValue() {
			return GetRuleContexts<AssignableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue(int i) {
			return GetRuleContext<AssignableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(SandpitParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(SandpitParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SandpitParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public LetInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetInContext letIn() {
		LetInContext _localctx = new LetInContext(Context, State);
		EnterRule(_localctx, 26, RULE_letIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(LET);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 356;
				Match(NL);
				}
			}

			State = 359;
			assignableValue();
			State = 360;
			Match(ASSIGN);
			State = 361;
			expression(0);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 362;
				Match(COMMA);
				State = 363;
				assignableValue();
				State = 364;
				Match(ASSIGN);
				State = 365;
				expression(0);
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 372;
				Match(NL);
				}
			}

			State = 375;
			Match(IN);
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 376;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(SandpitParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			functionName();
			State = 380;
			Match(OPEN_BRACKET);
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 381;
				Match(NL);
				}
				break;
			}
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 384;
				parameterList();
				}
				break;
			}
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 387;
				Match(NL);
				}
			}

			State = 390;
			Match(CLOSE_BRACKET);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 391;
				Match(NL);
				}
			}

			State = 394;
			Match(AS);
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 395;
				Match(NL);
				}
				break;
			}
			State = 398;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(SandpitParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(SandpitParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(NL);
			State = 401;
			Match(PROCEDURE);
			State = 402;
			procedureSignature();
			State = 403;
			procedureBlock();
			State = 404;
			Match(NL);
			State = 405;
			Match(END);
			State = 406;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 32, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			procedureName();
			State = 409;
			Match(OPEN_BRACKET);
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 410;
				Match(NL);
				}
				break;
			}
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL || _la==IDENTIFIER) {
				{
				State = 413;
				parameterList();
				}
			}

			State = 416;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext[] procedureCall() {
			return GetRuleContexts<ProcedureCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall(int i) {
			return GetRuleContext<ProcedureCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext[] proceduralControlFlow() {
			return GetRuleContexts<ProceduralControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProceduralControlFlowContext proceduralControlFlow(int i) {
			return GetRuleContext<ProceduralControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext[] throwException() {
			return GetRuleContexts<ThrowExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException(int i) {
			return GetRuleContext<ThrowExceptionContext>(i);
		}
		public ProcedureBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBlockContext procedureBlock() {
		ProcedureBlockContext _localctx = new ProcedureBlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_procedureBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 424;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						State = 418;
						procedureCall();
						}
						break;
					case 2:
						{
						State = 419;
						constantDef();
						}
						break;
					case 3:
						{
						State = 420;
						varDef();
						}
						break;
					case 4:
						{
						State = 421;
						assignment();
						}
						break;
					case 5:
						{
						State = 422;
						proceduralControlFlow();
						}
						break;
					case 6:
						{
						State = 423;
						throwException();
						}
						break;
					}
					} 
				}
				State = 428;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionalControlFlowContext[] functionalControlFlow() {
			return GetRuleContexts<FunctionalControlFlowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionalControlFlowContext functionalControlFlow(int i) {
			return GetRuleContext<FunctionalControlFlowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext[] throwException() {
			return GetRuleContexts<ThrowExceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException(int i) {
			return GetRuleContext<ThrowExceptionContext>(i);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 434;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						State = 429;
						constantDef();
						}
						break;
					case 2:
						{
						State = 430;
						varDef();
						}
						break;
					case 3:
						{
						State = 431;
						assignment();
						}
						break;
					case 4:
						{
						State = 432;
						functionalControlFlow();
						}
						break;
					case 5:
						{
						State = 433;
						throwException();
						}
						break;
					}
					} 
				}
				State = 438;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SandpitParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(NL);
			State = 440;
			Match(VAR);
			State = 441;
			variableName();
			State = 442;
			Match(ASSIGN);
			State = 443;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOpContext assignmentOp() {
			return GetRuleContext<AssignmentOpContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(NL);
			State = 446;
			assignableValue();
			State = 449;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 447;
				Match(ASSIGN);
				}
				break;
			case ASSIGN_ADD:
			case ASSIGN_SUBTRACT:
			case ASSIGN_MULT:
			case ASSIGN_DIV:
				{
				State = 448;
				assignmentOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 451;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosedExpressionContext closedExpression() {
			return GetRuleContext<ClosedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 42, RULE_procedureCall);
		int _la;
		try {
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				Match(NL);
				State = 454;
				procedureName();
				State = 455;
				Match(OPEN_BRACKET);
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (MINUS - 69)) | (1L << (OP_NOT - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (LITERAL_INTEGER - 69)) | (1L << (LITERAL_FLOAT - 69)) | (1L << (LITERAL_DECIMAL - 69)) | (1L << (LITERAL_CHAR - 69)) | (1L << (LITERAL_STRING - 69)))) != 0)) {
					{
					State = 456;
					argumentList();
					}
				}

				State = 459;
				Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461;
				Match(NL);
				State = 462;
				closedExpression(0);
				State = 463;
				Match(DOT);
				State = 464;
				procedureName();
				State = 465;
				Match(OPEN_BRACKET);
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (MINUS - 69)) | (1L << (OP_NOT - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (LITERAL_INTEGER - 69)) | (1L << (LITERAL_FLOAT - 69)) | (1L << (LITERAL_DECIMAL - 69)) | (1L << (LITERAL_CHAR - 69)) | (1L << (LITERAL_STRING - 69)))) != 0)) {
					{
					State = 466;
					argumentList();
					}
				}

				State = 469;
				Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(SandpitParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(SandpitParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleDecompContext tupleDecomp() {
			return GetRuleContext<TupleDecompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignableValue);
		int _la;
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELF:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 473;
					Match(SELF);
					State = 474;
					Match(DOT);
					}
				}

				State = 477;
				valueName();
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_SQ_BRACKET) {
					{
					State = 478;
					index();
					}
				}

				}
				}
				break;
			case RESULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481;
				Match(RESULT);
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 482;
				tupleDecomp();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 483;
				listDecomp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRY() { return GetToken(SandpitParser.CURRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(SandpitParser.PARTIAL, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRY || _la==PARTIAL) {
				{
				State = 486;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRY || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 489;
			functionName();
			State = 490;
			Match(OPEN_BRACKET);
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (MINUS - 69)) | (1L << (OP_NOT - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (LITERAL_INTEGER - 69)) | (1L << (LITERAL_FLOAT - 69)) | (1L << (LITERAL_DECIMAL - 69)) | (1L << (LITERAL_CHAR - 69)) | (1L << (LITERAL_STRING - 69)))) != 0)) {
				{
				State = 491;
				argumentList();
				}
			}

			State = 494;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			expression(0);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 497;
				Match(COMMA);
				State = 498;
				expression(0);
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			parameter();
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 505;
				Match(COMMA);
				State = 506;
				parameter();
				}
				}
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 512;
				Match(NL);
				}
			}

			State = 515;
			parameterName();
			State = 516;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduralControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInContext forIn() {
			return GetRuleContext<ForInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ProceduralControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduralControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProceduralControlFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduralControlFlowContext proceduralControlFlow() {
		ProceduralControlFlowContext _localctx = new ProceduralControlFlowContext(Context, State);
		EnterRule(_localctx, 54, RULE_proceduralControlFlow);
		try {
			State = 525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 520;
				forIn();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 521;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 522;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 523;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 524;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalControlFlowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_functionalContext if_functional() {
			return GetRuleContext<If_functionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_functionalContext for_functional() {
			return GetRuleContext<For_functionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForIn_functionalContext forIn_functional() {
			return GetRuleContext<ForIn_functionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_functionalContext while_functional() {
			return GetRuleContext<While_functionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_functionalContext repeat_functional() {
			return GetRuleContext<Repeat_functionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_functionalContext switch_functional() {
			return GetRuleContext<Switch_functionalContext>(0);
		}
		public FunctionalControlFlowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalControlFlow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalControlFlow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalControlFlowContext functionalControlFlow() {
		FunctionalControlFlowContext _localctx = new FunctionalControlFlowContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionalControlFlow);
		try {
			State = 533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527;
				if_functional();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				for_functional();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 529;
				forIn_functional();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 530;
				while_functional();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 531;
				repeat_functional();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 532;
				switch_functional();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SandpitParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SandpitParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(SandpitParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(SandpitParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext[] procedureBlock() {
			return GetRuleContexts<ProcedureBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock(int i) {
			return GetRuleContext<ProcedureBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SandpitParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SandpitParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 58, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(NL);
			State = 536;
			Match(IF);
			State = 537;
			expression(0);
			State = 538;
			Match(THEN);
			State = 539;
			procedureBlock();
			State = 549;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 540;
					Match(NL);
					State = 541;
					Match(ELSE);
					State = 542;
					Match(IF);
					State = 543;
					expression(0);
					State = 544;
					Match(THEN);
					State = 545;
					procedureBlock();
					}
					} 
				}
				State = 551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 552;
				Match(NL);
				State = 553;
				Match(ELSE);
				State = 554;
				procedureBlock();
				}
				break;
			}
			State = 557;
			Match(NL);
			State = 558;
			Match(END);
			State = 559;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SandpitParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SandpitParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(SandpitParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(SandpitParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext[] functionBlock() {
			return GetRuleContexts<FunctionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock(int i) {
			return GetRuleContext<FunctionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SandpitParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SandpitParser.ELSE, i);
		}
		public If_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_functionalContext if_functional() {
		If_functionalContext _localctx = new If_functionalContext(Context, State);
		EnterRule(_localctx, 60, RULE_if_functional);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(NL);
			State = 562;
			Match(IF);
			State = 563;
			expression(0);
			State = 564;
			Match(THEN);
			State = 565;
			functionBlock();
			State = 575;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 566;
					Match(NL);
					State = 567;
					Match(ELSE);
					State = 568;
					Match(IF);
					State = 569;
					expression(0);
					State = 570;
					Match(THEN);
					State = 571;
					functionBlock();
					}
					} 
				}
				State = 577;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 578;
				Match(NL);
				State = 579;
				Match(ELSE);
				State = 580;
				functionBlock();
				}
				break;
			}
			State = 583;
			Match(NL);
			State = 584;
			Match(END);
			State = 585;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SandpitParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 62, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			Match(NL);
			State = 588;
			Match(FOR);
			State = 589;
			variableName();
			State = 590;
			Match(ASSIGN);
			State = 591;
			expression(0);
			State = 592;
			Match(TO);
			State = 593;
			expression(0);
			State = 594;
			procedureBlock();
			State = 595;
			Match(NL);
			State = 596;
			Match(END);
			State = 597;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(SandpitParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public For_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_functionalContext for_functional() {
		For_functionalContext _localctx = new For_functionalContext(Context, State);
		EnterRule(_localctx, 64, RULE_for_functional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(NL);
			State = 600;
			Match(FOR);
			State = 601;
			variableName();
			State = 602;
			Match(ASSIGN);
			State = 603;
			expression(0);
			State = 604;
			Match(TO);
			State = 605;
			expression(0);
			State = 606;
			functionBlock();
			State = 607;
			Match(NL);
			State = 608;
			Match(END);
			State = 609;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SandpitParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ForInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInContext forIn() {
		ForInContext _localctx = new ForInContext(Context, State);
		EnterRule(_localctx, 66, RULE_forIn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(NL);
			State = 612;
			Match(FOR);
			State = 613;
			variableName();
			State = 614;
			Match(IN);
			State = 615;
			expression(0);
			State = 616;
			procedureBlock();
			State = 617;
			Match(NL);
			State = 618;
			Match(END);
			State = 619;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIn_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SandpitParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ForIn_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIn_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIn_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForIn_functionalContext forIn_functional() {
		ForIn_functionalContext _localctx = new ForIn_functionalContext(Context, State);
		EnterRule(_localctx, 68, RULE_forIn_functional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(NL);
			State = 622;
			Match(FOR);
			State = 623;
			variableName();
			State = 624;
			Match(IN);
			State = 625;
			expression(0);
			State = 626;
			functionBlock();
			State = 627;
			Match(NL);
			State = 628;
			Match(END);
			State = 629;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SandpitParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SandpitParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 70, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(NL);
			State = 632;
			Match(WHILE);
			State = 633;
			expression(0);
			State = 634;
			procedureBlock();
			State = 635;
			Match(NL);
			State = 636;
			Match(END);
			State = 637;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SandpitParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SandpitParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public While_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_functionalContext while_functional() {
		While_functionalContext _localctx = new While_functionalContext(Context, State);
		EnterRule(_localctx, 72, RULE_while_functional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(NL);
			State = 640;
			Match(WHILE);
			State = 641;
			expression(0);
			State = 642;
			functionBlock();
			State = 643;
			Match(NL);
			State = 644;
			Match(END);
			State = 645;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SandpitParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(SandpitParser.REPEAT, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 74, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(NL);
			{
			State = 648;
			Match(REPEAT);
			}
			State = 649;
			procedureBlock();
			State = 650;
			Match(NL);
			State = 651;
			Match(UNTIL);
			State = 652;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SandpitParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(SandpitParser.REPEAT, 0); }
		public Repeat_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_functionalContext repeat_functional() {
		Repeat_functionalContext _localctx = new Repeat_functionalContext(Context, State);
		EnterRule(_localctx, 76, RULE_repeat_functional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(NL);
			{
			State = 655;
			Match(REPEAT);
			}
			State = 656;
			functionBlock();
			State = 657;
			Match(NL);
			State = 658;
			Match(UNTIL);
			State = 659;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(SandpitParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(SandpitParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext[] procedureBlock() {
			return GetRuleContexts<ProcedureBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock(int i) {
			return GetRuleContext<ProcedureBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(SandpitParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 78, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(NL);
			State = 662;
			Match(TRY);
			State = 663;
			procedureBlock();
			State = 670;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 664;
				Match(NL);
				State = 665;
				Match(CATCH);
				State = 666;
				variableName();
				State = 667;
				type();
				State = 668;
				procedureBlock();
				}
				break;
			}
			State = 672;
			Match(NL);
			State = 673;
			Match(END);
			State = 674;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(SandpitParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(SandpitParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext[] functionBlock() {
			return GetRuleContexts<FunctionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock(int i) {
			return GetRuleContext<FunctionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(SandpitParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Try_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_functionalContext try_functional() {
		Try_functionalContext _localctx = new Try_functionalContext(Context, State);
		EnterRule(_localctx, 80, RULE_try_functional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(NL);
			State = 677;
			Match(TRY);
			State = 678;
			functionBlock();
			State = 685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 679;
				Match(NL);
				State = 680;
				Match(CATCH);
				State = 681;
				variableName();
				State = 682;
				type();
				State = 683;
				functionBlock();
				}
				break;
			}
			State = 687;
			Match(NL);
			State = 688;
			Match(END);
			State = 689;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(SandpitParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(SandpitParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefaultContext caseDefault() {
			return GetRuleContext<CaseDefaultContext>(0);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 82, RULE_switch);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(NL);
			State = 692;
			Match(SWITCH);
			State = 693;
			expression(0);
			State = 697;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 694;
					@case();
					}
					} 
				}
				State = 699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 700;
				caseDefault();
				}
			}

			State = 703;
			Match(END);
			State = 704;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(SandpitParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(SandpitParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_functionalContext[] case_functional() {
			return GetRuleContexts<Case_functionalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_functionalContext case_functional(int i) {
			return GetRuleContext<Case_functionalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseDefault_functionalContext caseDefault_functional() {
			return GetRuleContext<CaseDefault_functionalContext>(0);
		}
		public Switch_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_functionalContext switch_functional() {
		Switch_functionalContext _localctx = new Switch_functionalContext(Context, State);
		EnterRule(_localctx, 84, RULE_switch_functional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(NL);
			State = 707;
			Match(SWITCH);
			State = 708;
			expression(0);
			State = 712;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 709;
					case_functional();
					}
					} 
				}
				State = 714;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 715;
				caseDefault_functional();
				}
			}

			State = 718;
			Match(END);
			State = 719;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SandpitParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 86, RULE_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(NL);
			State = 722;
			Match(CASE);
			State = 723;
			literalValue();
			State = 724;
			procedureBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SandpitParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		public Case_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_functionalContext case_functional() {
		Case_functionalContext _localctx = new Case_functionalContext(Context, State);
		EnterRule(_localctx, 88, RULE_case_functional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(NL);
			State = 727;
			Match(CASE);
			State = 728;
			literalValue();
			State = 729;
			functionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SandpitParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefaultContext caseDefault() {
		CaseDefaultContext _localctx = new CaseDefaultContext(Context, State);
		EnterRule(_localctx, 90, RULE_caseDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(NL);
			State = 732;
			Match(DEFAULT);
			State = 733;
			procedureBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseDefault_functionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SandpitParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		public CaseDefault_functionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseDefault_functional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault_functional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseDefault_functionalContext caseDefault_functional() {
		CaseDefault_functionalContext _localctx = new CaseDefault_functionalContext(Context, State);
		EnterRule(_localctx, 92, RULE_caseDefault_functional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			Match(NL);
			State = 736;
			Match(DEFAULT);
			State = 737;
			functionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClosedExpressionContext closedExpression() {
			return GetRuleContext<ClosedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceContext newInstance() {
			return GetRuleContext<NewInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExceptionContext throwException() {
			return GetRuleContext<ThrowExceptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(SandpitParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 740;
				closedExpression(0);
				}
				break;
			case 2:
				{
				State = 741;
				unaryOp();
				State = 742;
				expression(7);
				}
				break;
			case 3:
				{
				State = 744;
				newInstance();
				}
				break;
			case 4:
				{
				State = 745;
				ifExpression();
				}
				break;
			case 5:
				{
				State = 746;
				lambda();
				}
				break;
			case 6:
				{
				State = 747;
				throwException();
				}
				break;
			case 7:
				{
				State = 748;
				Match(NL);
				State = 749;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 758;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 752;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 753;
					binaryOp();
					State = 754;
					expression(7);
					}
					} 
				}
				State = 760;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ClosedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExpressionContext bracketedExpression() {
			return GetRuleContext<BracketedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosedExpressionContext closedExpression() {
			return GetRuleContext<ClosedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ClosedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosedExpressionContext closedExpression() {
		return closedExpression(0);
	}

	private ClosedExpressionContext closedExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ClosedExpressionContext _localctx = new ClosedExpressionContext(Context, _parentState);
		ClosedExpressionContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_closedExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 762;
				bracketedExpression();
				}
				break;
			case 2:
				{
				State = 763;
				functionCall();
				}
				break;
			case 3:
				{
				State = 764;
				value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 777;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 775;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						_localctx = new ClosedExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_closedExpression);
						State = 767;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 768;
						index();
						}
						break;
					case 2:
						{
						_localctx = new ClosedExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_closedExpression);
						State = 769;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 770;
						Match(DOT);
						State = 771;
						functionCall();
						}
						break;
					case 3:
						{
						_localctx = new ClosedExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_closedExpression);
						State = 772;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 773;
						Match(DOT);
						State = 774;
						propertyName();
						}
						break;
					}
					} 
				}
				State = 779;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracketedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		public BracketedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExpressionContext bracketedExpression() {
		BracketedExpressionContext _localctx = new BracketedExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_bracketedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(OPEN_BRACKET);
			State = 781;
			expression(0);
			State = 782;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SandpitParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SandpitParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SandpitParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_ifExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 784;
				Match(NL);
				}
			}

			State = 787;
			Match(IF);
			State = 788;
			expression(0);
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 789;
				Match(NL);
				}
			}

			State = 792;
			Match(THEN);
			State = 793;
			expression(0);
			State = 795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 794;
				Match(NL);
				}
			}

			State = 797;
			Match(ELSE);
			State = 798;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(SandpitParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 102, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(LAMBDA);
			State = 801;
			argumentList();
			State = 802;
			Match(ARROW);
			State = 803;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(SandpitParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		public ThrowExceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwException; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowException(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExceptionContext throwException() {
		ThrowExceptionContext _localctx = new ThrowExceptionContext(Context, State);
		EnterRule(_localctx, 104, RULE_throwException);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			Match(THROW);
			State = 806;
			type();
			{
			State = 807;
			Match(OPEN_BRACKET);
			State = 808;
			argumentList();
			State = 809;
			Match(CLOSE_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(SandpitParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(SandpitParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SandpitParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 106, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(OPEN_SQ_BRACKET);
			State = 818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 812;
				expression(0);
				}
				break;
			case 2:
				{
				State = 813;
				expression(0);
				State = 814;
				Match(COMMA);
				State = 815;
				expression(0);
				}
				break;
			case 3:
				{
				State = 817;
				range();
				}
				break;
			}
			State = 820;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(SandpitParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 108, RULE_range);
		try {
			State = 831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 822;
				expression(0);
				State = 823;
				Match(DOUBLE_DOT);
				State = 824;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 826;
				expression(0);
				State = 827;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 829;
				Match(DOUBLE_DOT);
				State = 830;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(SandpitParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureContext dataStructure() {
			return GetRuleContext<DataStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(SandpitParser.RESULT, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 110, RULE_value);
		int _la;
		try {
			State = 842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 833;
				literalValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELF) {
					{
					State = 834;
					Match(SELF);
					State = 835;
					Match(DOT);
					}
				}

				State = 838;
				valueName();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 839;
				dataStructure();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 840;
				Match(SELF);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 841;
				Match(RESULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryContext dictionary() {
			return GetRuleContext<DictionaryContext>(0);
		}
		public DataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureContext dataStructure() {
		DataStructureContext _localctx = new DataStructureContext(Context, State);
		EnterRule(_localctx, 112, RULE_dataStructure);
		try {
			State = 847;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 845;
				list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 846;
				dictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 114, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(OPEN_BRACKET);
			State = 850;
			expression(0);
			State = 851;
			Match(COMMA);
			State = 852;
			expression(0);
			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 853;
				Match(COMMA);
				State = 854;
				expression(0);
				}
				}
				State = 859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 860;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext[] valueName() {
			return GetRuleContexts<ValueNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName(int i) {
			return GetRuleContext<ValueNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public TupleDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDecompContext tupleDecomp() {
		TupleDecompContext _localctx = new TupleDecompContext(Context, State);
		EnterRule(_localctx, 116, RULE_tupleDecomp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(OPEN_BRACKET);
			State = 863;
			valueName();
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 864;
				Match(COMMA);
				State = 865;
				valueName();
				}
				}
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 870;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 118, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(OPEN_BRACE);
			State = 887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (MINUS - 69)) | (1L << (OP_NOT - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (LITERAL_INTEGER - 69)) | (1L << (LITERAL_FLOAT - 69)) | (1L << (LITERAL_DECIMAL - 69)) | (1L << (LITERAL_CHAR - 69)) | (1L << (LITERAL_STRING - 69)))) != 0)) {
				{
				State = 874;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 873;
					Match(NL);
					}
					break;
				}
				State = 876;
				expression(0);
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 877;
					Match(COMMA);
					State = 878;
					expression(0);
					}
					}
					State = 883;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 884;
					Match(NL);
					}
				}

				}
			}

			State = 889;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext[] valueName() {
			return GetRuleContexts<ValueNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName(int i) {
			return GetRuleContext<ValueNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 120, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			Match(OPEN_BRACE);
			State = 892;
			valueName();
			State = 893;
			Match(COLON);
			State = 894;
			valueName();
			State = 895;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public DictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryContext dictionary() {
		DictionaryContext _localctx = new DictionaryContext(Context, State);
		EnterRule(_localctx, 122, RULE_dictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(OPEN_BRACE);
			State = 912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (MINUS - 69)) | (1L << (OP_NOT - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (LITERAL_INTEGER - 69)) | (1L << (LITERAL_FLOAT - 69)) | (1L << (LITERAL_DECIMAL - 69)) | (1L << (LITERAL_CHAR - 69)) | (1L << (LITERAL_STRING - 69)))) != 0)) {
				{
				State = 899;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 898;
					Match(NL);
					}
					break;
				}
				State = 901;
				kvp();
				State = 906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 902;
					Match(COMMA);
					State = 903;
					kvp();
					}
					}
					State = 908;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 909;
					Match(NL);
					}
				}

				}
			}

			State = 914;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 124, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916;
			expression(0);
			State = 917;
			Match(COLON);
			State = 918;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_ADD() { return GetToken(SandpitParser.ASSIGN_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SUBTRACT() { return GetToken(SandpitParser.ASSIGN_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_MULT() { return GetToken(SandpitParser.ASSIGN_MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_DIV() { return GetToken(SandpitParser.ASSIGN_DIV, 0); }
		public AssignmentOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOpContext assignmentOp() {
		AssignmentOpContext _localctx = new AssignmentOpContext(Context, State);
		EnterRule(_localctx, 126, RULE_assignmentOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN_ADD) | (1L << ASSIGN_SUBTRACT) | (1L << ASSIGN_MULT) | (1L << ASSIGN_DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SandpitParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(SandpitParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 128, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 130, RULE_binaryOp);
		try {
			State = 927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 924;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 925;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 926;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SandpitParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(SandpitParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SandpitParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SandpitParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(SandpitParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SandpitParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SandpitParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 132, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PLUS - 68)) | (1L << (MINUS - 68)) | (1L << (MULT - 68)) | (1L << (DIVIDE - 68)) | (1L << (POWER - 68)) | (1L << (MOD - 68)) | (1L << (INT_DIV - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SandpitParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SandpitParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SandpitParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (OP_AND - 78)) | (1L << (OP_OR - 78)) | (1L << (OP_XOR - 78)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SandpitParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SandpitParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(SandpitParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(SandpitParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SandpitParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(SandpitParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (LT - 75)) | (1L << (GT - 75)) | (1L << (OP_EQ - 75)) | (1L << (OP_NE - 75)) | (1L << (OP_LE - 75)) | (1L << (OP_GE - 75)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_VALUE() { return GetToken(SandpitParser.BOOL_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(SandpitParser.LITERAL_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(SandpitParser.LITERAL_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_DECIMAL() { return GetToken(SandpitParser.LITERAL_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(SandpitParser.LITERAL_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(SandpitParser.LITERAL_STRING, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 138, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (BOOL_VALUE - 45)) | (1L << (LITERAL_INTEGER - 45)) | (1L << (LITERAL_FLOAT - 45)) | (1L << (LITERAL_DECIMAL - 45)) | (1L << (LITERAL_CHAR - 45)) | (1L << (LITERAL_STRING - 45)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(SandpitParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		public NewInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceContext newInstance() {
		NewInstanceContext _localctx = new NewInstanceContext(Context, State);
		EnterRule(_localctx, 140, RULE_newInstance);
		int _la;
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 937;
				Match(NEW);
				State = 938;
				type();
				State = 939;
				Match(OPEN_BRACKET);
				State = 941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << CURRY) | (1L << IF) | (1L << LAMBDA) | (1L << NEW) | (1L << PARTIAL) | (1L << RESULT) | (1L << SELF) | (1L << THROW) | (1L << BOOL_VALUE) | (1L << OPEN_BRACE) | (1L << OPEN_BRACKET))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (MINUS - 69)) | (1L << (OP_NOT - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (LITERAL_INTEGER - 69)) | (1L << (LITERAL_FLOAT - 69)) | (1L << (LITERAL_DECIMAL - 69)) | (1L << (LITERAL_CHAR - 69)) | (1L << (LITERAL_STRING - 69)))) != 0)) {
					{
					State = 940;
					argumentList();
					}
				}

				State = 943;
				Match(CLOSE_BRACKET);
				State = 945;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 944;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 947;
				valueName();
				State = 948;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SandpitParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 142, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			Match(WITH);
			State = 953;
			Match(OPEN_BRACE);
			State = 954;
			assignment();
			State = 959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 955;
				Match(COMMA);
				State = 956;
				assignment();
				}
				}
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 962;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(SandpitParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext enumeration() {
			return GetRuleContext<EnumerationContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_type);
		try {
			State = 969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964;
				Match(VALUE_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 965;
				className();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 966;
				dataStructureType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 967;
				funcType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 968;
				enumeration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(SandpitParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(SandpitParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENUMERATION() { return GetTokens(SandpitParser.ENUMERATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION(int i) {
			return GetToken(SandpitParser.ENUMERATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 146, RULE_enumeration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(NL);
			State = 972;
			Match(ENUMERATION);
			{
			State = 973;
			enumValue();
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 974;
				Match(COMMA);
				State = 975;
				enumValue();
				}
				}
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 981;
			Match(NL);
			State = 982;
			Match(END);
			State = 983;
			Match(ENUMERATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(SandpitParser.LITERAL_INTEGER, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 148, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			Match(IDENTIFIER);
			{
			State = 986;
			Match(ASSIGN);
			State = 987;
			Match(LITERAL_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryTypeContext dictionaryType() {
			return GetRuleContext<DictionaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterableTypeContext iterableType() {
			return GetRuleContext<IterableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(SandpitParser.RANDOM, 0); }
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_dataStructureType);
		try {
			State = 995;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 989;
				arrayType();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 990;
				listType();
				}
				break;
			case DICTIONARY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 991;
				dictionaryType();
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 992;
				tupleType();
				}
				break;
			case ITERABLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 993;
				iterableType();
				}
				break;
			case RANDOM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 994;
				Match(RANDOM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			Match(OPEN_BRACKET);
			State = 998;
			type();
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 999;
				Match(COMMA);
				State = 1000;
				type();
				}
				}
				State = 1003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 1005;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SandpitParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			Match(ARRAY);
			State = 1008;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(SandpitParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			Match(LIST);
			State = 1011;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(SandpitParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public DictionaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryTypeContext dictionaryType() {
		DictionaryTypeContext _localctx = new DictionaryTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_dictionaryType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			Match(DICTIONARY);
			State = 1014;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERABLE() { return GetToken(SandpitParser.ITERABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public IterableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterableTypeContext iterableType() {
		IterableTypeContext _localctx = new IterableTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_iterableType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			Match(ITERABLE);
			State = 1017;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019;
			type();
			State = 1020;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SandpitParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SandpitParser.GT, 0); }
		public GenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericContext generic() {
		GenericContext _localctx = new GenericContext(Context, State);
		EnterRule(_localctx, 164, RULE_generic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			Match(LT);
			State = 1023;
			type();
			State = 1024;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026;
			Match(OPEN_BRACKET);
			State = 1027;
			type();
			State = 1032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1028;
				Match(COMMA);
				State = 1029;
				type();
				}
				}
				State = 1034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1035;
			Match(ARROW);
			State = 1036;
			type();
			State = 1037;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 168, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantNameContext constantName() {
			return GetRuleContext<ConstantNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetNameContext letName() {
			return GetRuleContext<LetNameContext>(0);
		}
		public ValueNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueNameContext valueName() {
		ValueNameContext _localctx = new ValueNameContext(Context, State);
		EnterRule(_localctx, 170, RULE_valueName);
		try {
			State = 1044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1041;
				constantName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1042;
				variableName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1043;
				letName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantNameContext constantName() {
		ConstantNameContext _localctx = new ConstantNameContext(Context, State);
		EnterRule(_localctx, 172, RULE_constantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 174, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 176, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 178, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public LetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetNameContext letName() {
		LetNameContext _localctx = new LetNameContext(Context, State);
		EnterRule(_localctx, 180, RULE_letName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 182, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 184, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 47: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 48: return closedExpression_sempred((ClosedExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}
	private bool closedExpression_sempred(ClosedExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x62', '\x427', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\xC2', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xC5', '\v', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\xC8', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\xCB', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xDF', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\xE5', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xEC', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xEF', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xFA', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x100', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x103', '\v', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x10E', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\x117', '\n', '\b', '\f', '\b', '\xE', '\b', '\x11A', 
		'\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x124', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x127', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x12D', '\n', '\n', '\x3', 
		'\n', '\x5', '\n', '\x130', '\n', '\n', '\x3', '\n', '\x5', '\n', '\x133', 
		'\n', '\n', '\x3', '\n', '\x5', '\n', '\x136', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x13F', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x146', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x14A', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x15B', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x15F', '\n', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x162', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x168', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x172', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x175', '\v', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x178', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x17C', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x181', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x184', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x187', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x18B', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x18F', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x19E', '\n', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x1A1', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\a', '\x13', '\x1AB', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\x1AE', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x1B5', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x1B8', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x1C4', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x1CC', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x1D6', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x1DA', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x1DE', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x1E2', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x1E7', '\n', '\x18', '\x3', '\x19', '\x5', '\x19', 
		'\x1EA', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x1EF', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x1F6', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x1F9', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x1FE', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x201', '\v', '\x1B', '\x3', '\x1C', '\x5', '\x1C', '\x204', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x210', '\n', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x218', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', 
		'\x226', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x229', '\v', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x22E', '\n', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', 
		' ', '\x240', '\n', ' ', '\f', ' ', '\xE', ' ', '\x243', '\v', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x248', '\n', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x2A1', '\n', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x2B0', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', 
		'\x2BA', '\n', '+', '\f', '+', '\xE', '+', '\x2BD', '\v', '+', '\x3', 
		'+', '\x5', '+', '\x2C0', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x2C9', '\n', 
		',', '\f', ',', '\xE', ',', '\x2CC', '\v', ',', '\x3', ',', '\x5', ',', 
		'\x2CF', '\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x5', '\x31', '\x2F1', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x2F7', '\n', '\x31', '\f', 
		'\x31', '\xE', '\x31', '\x2FA', '\v', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x300', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x30A', '\n', '\x32', 
		'\f', '\x32', '\xE', '\x32', '\x30D', '\v', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x5', '\x34', '\x314', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x319', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x31E', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x335', '\n', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x342', '\n', '\x38', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x347', '\n', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x34D', 
		'\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x352', 
		'\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\a', ';', '\x35A', '\n', ';', '\f', ';', '\xE', ';', '\x35D', 
		'\v', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x6', '<', '\x365', '\n', '<', '\r', '<', '\xE', '<', '\x366', 
		'\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x5', '=', '\x36D', '\n', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x372', '\n', '=', 
		'\f', '=', '\xE', '=', '\x375', '\v', '=', '\x3', '=', '\x5', '=', '\x378', 
		'\n', '=', '\x5', '=', '\x37A', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'?', '\x3', '?', '\x5', '?', '\x386', '\n', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\a', '?', '\x38B', '\n', '?', '\f', '?', '\xE', '?', '\x38E', 
		'\v', '?', '\x3', '?', '\x5', '?', '\x391', '\n', '?', '\x5', '?', '\x393', 
		'\n', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x3A2', '\n', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x5', 'H', '\x3B0', '\n', 'H', '\x3', 'H', '\x3', 
		'H', '\x5', 'H', '\x3B4', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x5', 'H', '\x3B9', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\a', 'I', '\x3C0', '\n', 'I', '\f', 'I', '\xE', 'I', 
		'\x3C3', '\v', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x3CC', '\n', 'J', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x3D3', '\n', 
		'K', '\f', 'K', '\xE', 'K', '\x3D6', '\v', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x5', 'M', '\x3E6', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x6', 'N', '\x3EC', '\n', 'N', '\r', 'N', '\xE', 'N', '\x3ED', '\x3', 
		'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\a', 'U', '\x409', '\n', 'U', '\f', 'U', '\xE', 'U', '\x40C', '\v', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 
		'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x417', '\n', 'W', 
		'\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', 
		'\x3', '^', '\x3', '^', '\x3', '^', '\x2', '\x4', '`', '\x62', '_', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', 
		'|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', 
		'\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', 
		'\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', 
		'\xB4', '\xB6', '\xB8', '\xBA', '\x2', '\t', '\x4', '\x2', '\xE', '\xE', 
		'\x1E', '\x1E', '\x3', '\x2', '\x36', '\x39', '\x4', '\x2', 'G', 'G', 
		'Q', 'Q', '\x3', '\x2', '\x46', 'L', '\x4', '\x2', 'P', 'P', 'R', 'S', 
		'\x4', '\x2', 'M', 'N', 'T', 'W', '\x4', '\x2', '/', '/', 'Z', '^', '\x2', 
		'\x45C', '\x2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x4', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\n', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xE', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x14', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x149', '\x3', '\x2', '\x2', '\x2', '\x18', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x156', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x192', '\x3', '\x2', '\x2', '\x2', '\"', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x1AC', '\x3', '\x2', '\x2', '\x2', '&', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x1BF', '\x3', '\x2', '\x2', '\x2', ',', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x36', '\x203', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x20F', '\x3', '\x2', '\x2', '\x2', ':', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x233', '\x3', '\x2', '\x2', '\x2', '@', '\x24D', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x259', '\x3', '\x2', '\x2', '\x2', '\x44', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x279', '\x3', '\x2', '\x2', '\x2', 'J', '\x281', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x289', '\x3', '\x2', '\x2', '\x2', 'N', '\x290', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x2A6', '\x3', '\x2', '\x2', '\x2', 'T', '\x2B5', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x2C4', '\x3', '\x2', '\x2', '\x2', 'X', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x2D8', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x2DD', '\x3', '\x2', '\x2', '\x2', '^', '\x2E1', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x62', '\x2FF', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x30E', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x313', '\x3', '\x2', '\x2', '\x2', 'h', '\x322', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x327', '\x3', '\x2', '\x2', '\x2', 'l', '\x32D', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x34C', '\x3', '\x2', '\x2', '\x2', 'r', '\x351', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x353', '\x3', '\x2', '\x2', '\x2', 'v', '\x360', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x37D', '\x3', '\x2', '\x2', '\x2', '|', '\x383', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x396', '\x3', '\x2', '\x2', '\x2', '\x80', '\x39A', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x39C', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x86', '\x3A3', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x3A7', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x3A9', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x90', '\x3BA', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x94', '\x3CD', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x3E7', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x3F4', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x3F7', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x3FD', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x400', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x404', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x411', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x416', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x418', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x41A', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x41C', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x41E', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x420', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x422', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x424', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xC2', 
		'\x5', '\x4', '\x3', '\x2', '\xBD', '\xC2', '\x5', '\x6', '\x4', '\x2', 
		'\xBE', '\xC2', '\x5', '\b', '\x5', '\x2', '\xBF', '\xC2', '\x5', '\x16', 
		'\f', '\x2', '\xC0', '\xC2', '\x5', ' ', '\x11', '\x2', '\xC1', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', 
		'\a', '\x4', '\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '\x2', '\x2', '\x3', '\xCD', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '\x4', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '\x1B', '\x2', '\x2', '\xD0', '\xD1', '\x5', '$', '\x13', '\x2', 
		'\xD1', '\xD2', '\a', '\x4', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x11', 
		'\x2', '\x2', '\xD3', '\xD4', '\a', '\x1B', '\x2', '\x2', '\xD4', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x4', '\x2', '\x2', 
		'\xD6', '\xD7', '\a', '\f', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\xAE', 
		'X', '\x2', '\xD8', '\xD9', '\a', ':', '\x2', '\x2', '\xD9', '\xDA', '\x5', 
		'`', '\x31', '\x2', '\xDA', '\a', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDF', '\x5', '\xE', '\b', '\x2', '\xDC', '\xDF', '\x5', '\n', '\x6', 
		'\x2', '\xDD', '\xDF', '\x5', '\f', '\a', '\x2', '\xDE', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', '\x4', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		'\v', '\x2', '\x2', '\xE2', '\xE4', '\x5', '\xAA', 'V', '\x2', '\xE3', 
		'\xE5', '\x5', '\x10', '\t', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xEC', '\x5', '\x12', '\n', '\x2', '\xE7', 
		'\xEC', '\x5', '\x14', '\v', '\x2', '\xE8', '\xEC', '\x5', '\x16', '\f', 
		'\x2', '\xE9', '\xEC', '\x5', ' ', '\x11', '\x2', '\xEA', '\xEC', '\x5', 
		'\x6', '\x4', '\x2', '\xEB', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '\x4', '\x2', '\x2', '\xF1', 
		'\xF2', '\a', '\x11', '\x2', '\x2', '\xF2', '\xF3', '\a', '\v', '\x2', 
		'\x2', '\xF3', '\v', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', 
		'\x4', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x16', '\x2', '\x2', '\xF6', 
		'\xF7', '\a', '\v', '\x2', '\x2', '\xF7', '\xF9', '\x5', '\xAA', 'V', 
		'\x2', '\xF8', '\xFA', '\x5', '\x10', '\t', '\x2', '\xF9', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\xFB', '\x100', '\x5', '\x12', '\n', 
		'\x2', '\xFC', '\x100', '\x5', '\x14', '\v', '\x2', '\xFD', '\x100', '\x5', 
		'\x16', '\f', '\x2', '\xFE', '\x100', '\x5', '\x6', '\x4', '\x2', '\xFF', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\x4', '\x2', '\x2', 
		'\x105', '\x106', '\a', '\x11', '\x2', '\x2', '\x106', '\x107', '\a', 
		'\v', '\x2', '\x2', '\x107', '\r', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\a', '\x4', '\x2', '\x2', '\x109', '\x10A', '\a', '\b', '\x2', 
		'\x2', '\x10A', '\x10B', '\a', '\v', '\x2', '\x2', '\x10B', '\x10D', '\x5', 
		'\xAA', 'V', '\x2', '\x10C', '\x10E', '\x5', '\x10', '\t', '\x2', '\x10D', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x118', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x117', 
		'\x5', '\x14', '\v', '\x2', '\x110', '\x111', '\a', '\x4', '\x2', '\x2', 
		'\x111', '\x112', '\a', '\x14', '\x2', '\x2', '\x112', '\x117', '\x5', 
		'\x1E', '\x10', '\x2', '\x113', '\x114', '\a', '\x4', '\x2', '\x2', '\x114', 
		'\x115', '\a', ' ', '\x2', '\x2', '\x115', '\x117', '\x5', '\"', '\x12', 
		'\x2', '\x116', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x116', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11C', '\a', '\x4', '\x2', '\x2', '\x11C', '\x11D', 
		'\a', '\x11', '\x2', '\x2', '\x11D', '\x11E', '\a', '\v', '\x2', '\x2', 
		'\x11E', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '\x18', 
		'\x2', '\x2', '\x120', '\x125', '\x5', '\x92', 'J', '\x2', '\x121', '\x122', 
		'\a', '\x44', '\x2', '\x2', '\x122', '\x124', '\x5', '\x92', 'J', '\x2', 
		'\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', 
		'\a', '\x4', '\x2', '\x2', '\x129', '\x135', '\a', '\r', '\x2', '\x2', 
		'\x12A', '\x12C', '\a', '@', '\x2', '\x2', '\x12B', '\x12D', '\a', '\x4', 
		'\x2', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x130', '\x5', '\x34', '\x1B', '\x2', '\x12F', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', '\a', '\x4', '\x2', 
		'\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x136', '\a', '\x41', '\x2', '\x2', '\x135', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x5', '&', '\x14', 
		'\x2', '\x138', '\x139', '\a', '\x4', '\x2', '\x2', '\x139', '\x13A', 
		'\a', '\x11', '\x2', '\x2', '\x13A', '\x13B', '\a', '\r', '\x2', '\x2', 
		'\x13B', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\a', '\x4', 
		'\x2', '\x2', '\x13D', '\x13F', '\a', '\x1F', '\x2', '\x2', '\x13E', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\a', 
		'!', '\x2', '\x2', '\x141', '\x145', '\x5', '\xB0', 'Y', '\x2', '\x142', 
		'\x146', '\x5', '\x92', 'J', '\x2', '\x143', '\x144', '\a', ':', '\x2', 
		'\x2', '\x144', '\x146', '\x5', '`', '\x31', '\x2', '\x145', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x15', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', '\x5', 
		'\x18', '\r', '\x2', '\x148', '\x14A', '\x5', '\x1A', '\xE', '\x2', '\x149', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x149', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', 
		'\a', '\x4', '\x2', '\x2', '\x14C', '\x14D', '\a', '\x14', '\x2', '\x2', 
		'\x14D', '\x14E', '\x5', '\x1E', '\x10', '\x2', '\x14E', '\x14F', '\x5', 
		'&', '\x14', '\x2', '\x14F', '\x150', '\a', '\x4', '\x2', '\x2', '\x150', 
		'\x151', '\a', '$', '\x2', '\x2', '\x151', '\x152', '\x5', '`', '\x31', 
		'\x2', '\x152', '\x153', '\a', '\x4', '\x2', '\x2', '\x153', '\x154', 
		'\a', '\x11', '\x2', '\x2', '\x154', '\x155', '\a', '\x14', '\x2', '\x2', 
		'\x155', '\x19', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\a', '\x4', 
		'\x2', '\x2', '\x157', '\x158', '\a', '\x14', '\x2', '\x2', '\x158', '\x15A', 
		'\x5', '\x1E', '\x10', '\x2', '\x159', '\x15B', '\a', '\x4', '\x2', '\x2', 
		'\x15A', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15E', '\a', ';', '\x2', '\x2', '\x15D', '\x15F', '\a', '\x4', '\x2', 
		'\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x162', '\x5', '\x1C', '\xF', '\x2', '\x161', '\x160', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x5', '`', '\x31', 
		'\x2', '\x164', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', 
		'\a', '\x1A', '\x2', '\x2', '\x166', '\x168', '\a', '\x4', '\x2', '\x2', 
		'\x167', '\x166', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\x5', '.', '\x18', '\x2', '\x16A', '\x16B', '\a', ':', '\x2', 
		'\x2', '\x16B', '\x173', '\x5', '`', '\x31', '\x2', '\x16C', '\x16D', 
		'\a', '\x44', '\x2', '\x2', '\x16D', '\x16E', '\x5', '.', '\x18', '\x2', 
		'\x16E', '\x16F', '\a', ':', '\x2', '\x2', '\x16F', '\x170', '\x5', '`', 
		'\x31', '\x2', '\x170', '\x172', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x173', '\x3', '\x2', '\x2', '\x2', '\x176', '\x178', '\a', 
		'\x4', '\x2', '\x2', '\x177', '\x176', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17B', '\a', '\x17', '\x2', '\x2', '\x17A', '\x17C', 
		'\a', '\x4', '\x2', '\x2', '\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17E', '\x5', '\xBA', '^', '\x2', '\x17E', 
		'\x180', '\a', '@', '\x2', '\x2', '\x17F', '\x181', '\a', '\x4', '\x2', 
		'\x2', '\x180', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x184', '\x5', '\x34', '\x1B', '\x2', '\x183', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x185', '\x187', '\a', '\x4', '\x2', 
		'\x2', '\x186', '\x185', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x18A', '\a', '\x41', '\x2', '\x2', '\x189', '\x18B', '\a', 
		'\x4', '\x2', '\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x18E', '\a', '\a', '\x2', '\x2', '\x18D', '\x18F', '\a', 
		'\x4', '\x2', '\x2', '\x18E', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\x5', '\x92', 'J', '\x2', '\x191', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x193', '\a', '\x4', '\x2', '\x2', '\x193', 
		'\x194', '\a', ' ', '\x2', '\x2', '\x194', '\x195', '\x5', '\"', '\x12', 
		'\x2', '\x195', '\x196', '\x5', '$', '\x13', '\x2', '\x196', '\x197', 
		'\a', '\x4', '\x2', '\x2', '\x197', '\x198', '\a', '\x11', '\x2', '\x2', 
		'\x198', '\x199', '\a', ' ', '\x2', '\x2', '\x199', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x19A', '\x19B', '\x5', '\xB8', ']', '\x2', '\x19B', '\x19D', 
		'\a', '@', '\x2', '\x2', '\x19C', '\x19E', '\a', '\x4', '\x2', '\x2', 
		'\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x1A1', '\x5', '\x34', '\x1B', '\x2', '\x1A0', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\a', '\x41', '\x2', '\x2', 
		'\x1A3', '#', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1AB', '\x5', ',', 
		'\x17', '\x2', '\x1A5', '\x1AB', '\x5', '\x6', '\x4', '\x2', '\x1A6', 
		'\x1AB', '\x5', '(', '\x15', '\x2', '\x1A7', '\x1AB', '\x5', '*', '\x16', 
		'\x2', '\x1A8', '\x1AB', '\x5', '\x38', '\x1D', '\x2', '\x1A9', '\x1AB', 
		'\x5', 'j', '\x36', '\x2', '\x1AA', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '%', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF', '\x1B5', '\x5', '\x6', '\x4', '\x2', '\x1B0', '\x1B5', 
		'\x5', '(', '\x15', '\x2', '\x1B1', '\x1B5', '\x5', '*', '\x16', '\x2', 
		'\x1B2', '\x1B5', '\x5', ':', '\x1E', '\x2', '\x1B3', '\x1B5', '\x5', 
		'j', '\x36', '\x2', '\x1B4', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\'', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\a', '\x4', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\a', ',', '\x2', '\x2', '\x1BB', '\x1BC', '\x5', 
		'\xB4', '[', '\x2', '\x1BC', '\x1BD', '\a', ':', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\x5', '`', '\x31', '\x2', '\x1BE', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C0', '\a', '\x4', '\x2', '\x2', '\x1C0', '\x1C3', 
		'\x5', '.', '\x18', '\x2', '\x1C1', '\x1C4', '\a', ':', '\x2', '\x2', 
		'\x1C2', '\x1C4', '\x5', '\x80', '\x41', '\x2', '\x1C3', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x5', '`', '\x31', 
		'\x2', '\x1C6', '+', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\a', 
		'\x4', '\x2', '\x2', '\x1C8', '\x1C9', '\x5', '\xB8', ']', '\x2', '\x1C9', 
		'\x1CB', '\a', '@', '\x2', '\x2', '\x1CA', '\x1CC', '\x5', '\x32', '\x1A', 
		'\x2', '\x1CB', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CE', '\a', '\x41', '\x2', '\x2', '\x1CE', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\a', '\x4', '\x2', '\x2', '\x1D0', 
		'\x1D1', '\x5', '\x62', '\x32', '\x2', '\x1D1', '\x1D2', '\a', '\x43', 
		'\x2', '\x2', '\x1D2', '\x1D3', '\x5', '\xB8', ']', '\x2', '\x1D3', '\x1D5', 
		'\a', '@', '\x2', '\x2', '\x1D4', '\x1D6', '\x5', '\x32', '\x1A', '\x2', 
		'\x1D5', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D8', '\a', '\x41', '\x2', '\x2', '\x1D8', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\a', '%', '\x2', '\x2', '\x1DC', '\x1DE', '\a', '\x43', 
		'\x2', '\x2', '\x1DD', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1E1', '\x5', '\xAC', 'W', '\x2', '\x1E0', '\x1E2', '\x5', 
		'l', '\x37', '\x2', '\x1E1', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E7', '\a', '#', '\x2', '\x2', '\x1E4', '\x1E7', '\x5', 
		'v', '<', '\x2', '\x1E5', '\x1E7', '\x5', 'z', '>', '\x2', '\x1E6', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E5', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '/', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1EA', '\t', '\x2', '\x2', '\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x5', '\xBA', '^', '\x2', 
		'\x1EC', '\x1EE', '\a', '@', '\x2', '\x2', '\x1ED', '\x1EF', '\x5', '\x32', 
		'\x1A', '\x2', '\x1EE', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', 
		'\x2', '\x1F0', '\x1F1', '\a', '\x41', '\x2', '\x2', '\x1F1', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F7', '\x5', '`', '\x31', '\x2', 
		'\x1F3', '\x1F4', '\a', '\x44', '\x2', '\x2', '\x1F4', '\x1F6', '\x5', 
		'`', '\x31', '\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x1FA', '\x1FF', '\x5', '\x36', '\x1C', '\x2', '\x1FB', '\x1FC', '\a', 
		'\x44', '\x2', '\x2', '\x1FC', '\x1FE', '\x5', '\x36', '\x1C', '\x2', 
		'\x1FD', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x1FF', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FF', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x200', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x202', '\x204', 
		'\a', '\x4', '\x2', '\x2', '\x203', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x206', '\x5', '\xB2', 'Z', '\x2', '\x206', 
		'\x207', '\x5', '\x92', 'J', '\x2', '\x207', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x208', '\x210', '\x5', '<', '\x1F', '\x2', '\x209', '\x210', 
		'\x5', '@', '!', '\x2', '\x20A', '\x210', '\x5', '\x44', '#', '\x2', '\x20B', 
		'\x210', '\x5', 'H', '%', '\x2', '\x20C', '\x210', '\x5', 'L', '\'', '\x2', 
		'\x20D', '\x210', '\x5', 'P', ')', '\x2', '\x20E', '\x210', '\x5', 'T', 
		'+', '\x2', '\x20F', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x20F', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x20F', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x20C', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20F', 
		'\x20E', '\x3', '\x2', '\x2', '\x2', '\x210', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x211', '\x218', '\x5', '>', ' ', '\x2', '\x212', '\x218', '\x5', 
		'\x42', '\"', '\x2', '\x213', '\x218', '\x5', '\x46', '$', '\x2', '\x214', 
		'\x218', '\x5', 'J', '&', '\x2', '\x215', '\x218', '\x5', 'N', '(', '\x2', 
		'\x216', '\x218', '\x5', 'V', ',', '\x2', '\x217', '\x211', '\x3', '\x2', 
		'\x2', '\x2', '\x217', '\x212', '\x3', '\x2', '\x2', '\x2', '\x217', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x215', '\x3', '\x2', '\x2', '\x2', '\x217', '\x216', '\x3', 
		'\x2', '\x2', '\x2', '\x218', ';', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\a', '\x4', '\x2', '\x2', '\x21A', '\x21B', '\a', '\x15', '\x2', 
		'\x2', '\x21B', '\x21C', '\x5', '`', '\x31', '\x2', '\x21C', '\x21D', 
		'\a', '\'', '\x2', '\x2', '\x21D', '\x227', '\x5', '$', '\x13', '\x2', 
		'\x21E', '\x21F', '\a', '\x4', '\x2', '\x2', '\x21F', '\x220', '\a', '\x10', 
		'\x2', '\x2', '\x220', '\x221', '\a', '\x15', '\x2', '\x2', '\x221', '\x222', 
		'\x5', '`', '\x31', '\x2', '\x222', '\x223', '\a', '\'', '\x2', '\x2', 
		'\x223', '\x224', '\x5', '$', '\x13', '\x2', '\x224', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '\x228', '\x3', '\x2', '\x2', '\x2', '\x228', '\x22D', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\a', '\x4', '\x2', '\x2', '\x22B', '\x22C', '\a', '\x10', 
		'\x2', '\x2', '\x22C', '\x22E', '\x5', '$', '\x13', '\x2', '\x22D', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', '\x2', '\x2', '\x2', 
		'\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\a', 
		'\x4', '\x2', '\x2', '\x230', '\x231', '\a', '\x11', '\x2', '\x2', '\x231', 
		'\x232', '\a', '\x15', '\x2', '\x2', '\x232', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x233', '\x234', '\a', '\x4', '\x2', '\x2', '\x234', '\x235', 
		'\a', '\x15', '\x2', '\x2', '\x235', '\x236', '\x5', '`', '\x31', '\x2', 
		'\x236', '\x237', '\a', '\'', '\x2', '\x2', '\x237', '\x241', '\x5', '&', 
		'\x14', '\x2', '\x238', '\x239', '\a', '\x4', '\x2', '\x2', '\x239', '\x23A', 
		'\a', '\x10', '\x2', '\x2', '\x23A', '\x23B', '\a', '\x15', '\x2', '\x2', 
		'\x23B', '\x23C', '\x5', '`', '\x31', '\x2', '\x23C', '\x23D', '\a', '\'', 
		'\x2', '\x2', '\x23D', '\x23E', '\x5', '&', '\x14', '\x2', '\x23E', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '\x23F', '\x238', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\x243', '\x3', '\x2', '\x2', '\x2', '\x241', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x241', '\x242', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x243', '\x241', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x245', '\a', '\x4', '\x2', '\x2', '\x245', '\x246', 
		'\a', '\x10', '\x2', '\x2', '\x246', '\x248', '\x5', '&', '\x14', '\x2', 
		'\x247', '\x244', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x248', '\x249', '\x3', '\x2', '\x2', '\x2', '\x249', 
		'\x24A', '\a', '\x4', '\x2', '\x2', '\x24A', '\x24B', '\a', '\x11', '\x2', 
		'\x2', '\x24B', '\x24C', '\a', '\x15', '\x2', '\x2', '\x24C', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24E', '\a', '\x4', '\x2', '\x2', '\x24E', 
		'\x24F', '\a', '\x13', '\x2', '\x2', '\x24F', '\x250', '\x5', '\xB4', 
		'[', '\x2', '\x250', '\x251', '\a', ':', '\x2', '\x2', '\x251', '\x252', 
		'\x5', '`', '\x31', '\x2', '\x252', '\x253', '\a', ')', '\x2', '\x2', 
		'\x253', '\x254', '\x5', '`', '\x31', '\x2', '\x254', '\x255', '\x5', 
		'$', '\x13', '\x2', '\x255', '\x256', '\a', '\x4', '\x2', '\x2', '\x256', 
		'\x257', '\a', '\x11', '\x2', '\x2', '\x257', '\x258', '\a', '\x13', '\x2', 
		'\x2', '\x258', '\x41', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', 
		'\a', '\x4', '\x2', '\x2', '\x25A', '\x25B', '\a', '\x13', '\x2', '\x2', 
		'\x25B', '\x25C', '\x5', '\xB4', '[', '\x2', '\x25C', '\x25D', '\a', ':', 
		'\x2', '\x2', '\x25D', '\x25E', '\x5', '`', '\x31', '\x2', '\x25E', '\x25F', 
		'\a', ')', '\x2', '\x2', '\x25F', '\x260', '\x5', '`', '\x31', '\x2', 
		'\x260', '\x261', '\x5', '&', '\x14', '\x2', '\x261', '\x262', '\a', '\x4', 
		'\x2', '\x2', '\x262', '\x263', '\a', '\x11', '\x2', '\x2', '\x263', '\x264', 
		'\a', '\x13', '\x2', '\x2', '\x264', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x265', '\x266', '\a', '\x4', '\x2', '\x2', '\x266', '\x267', '\a', '\x13', 
		'\x2', '\x2', '\x267', '\x268', '\x5', '\xB4', '[', '\x2', '\x268', '\x269', 
		'\a', '\x17', '\x2', '\x2', '\x269', '\x26A', '\x5', '`', '\x31', '\x2', 
		'\x26A', '\x26B', '\x5', '$', '\x13', '\x2', '\x26B', '\x26C', '\a', '\x4', 
		'\x2', '\x2', '\x26C', '\x26D', '\a', '\x11', '\x2', '\x2', '\x26D', '\x26E', 
		'\a', '\x13', '\x2', '\x2', '\x26E', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x270', '\a', '\x4', '\x2', '\x2', '\x270', '\x271', '\a', '\x13', 
		'\x2', '\x2', '\x271', '\x272', '\x5', '\xB4', '[', '\x2', '\x272', '\x273', 
		'\a', '\x17', '\x2', '\x2', '\x273', '\x274', '\x5', '`', '\x31', '\x2', 
		'\x274', '\x275', '\x5', '&', '\x14', '\x2', '\x275', '\x276', '\a', '\x4', 
		'\x2', '\x2', '\x276', '\x277', '\a', '\x11', '\x2', '\x2', '\x277', '\x278', 
		'\a', '\x13', '\x2', '\x2', '\x278', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x27A', '\a', '\x4', '\x2', '\x2', '\x27A', '\x27B', '\a', '-', 
		'\x2', '\x2', '\x27B', '\x27C', '\x5', '`', '\x31', '\x2', '\x27C', '\x27D', 
		'\x5', '$', '\x13', '\x2', '\x27D', '\x27E', '\a', '\x4', '\x2', '\x2', 
		'\x27E', '\x27F', '\a', '\x11', '\x2', '\x2', '\x27F', '\x280', '\a', 
		'-', '\x2', '\x2', '\x280', 'I', '\x3', '\x2', '\x2', '\x2', '\x281', 
		'\x282', '\a', '\x4', '\x2', '\x2', '\x282', '\x283', '\a', '-', '\x2', 
		'\x2', '\x283', '\x284', '\x5', '`', '\x31', '\x2', '\x284', '\x285', 
		'\x5', '&', '\x14', '\x2', '\x285', '\x286', '\a', '\x4', '\x2', '\x2', 
		'\x286', '\x287', '\a', '\x11', '\x2', '\x2', '\x287', '\x288', '\a', 
		'-', '\x2', '\x2', '\x288', 'K', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x28A', '\a', '\x4', '\x2', '\x2', '\x28A', '\x28B', '\a', '\"', '\x2', 
		'\x2', '\x28B', '\x28C', '\x5', '$', '\x13', '\x2', '\x28C', '\x28D', 
		'\a', '\x4', '\x2', '\x2', '\x28D', '\x28E', '\a', '+', '\x2', '\x2', 
		'\x28E', '\x28F', '\x5', '`', '\x31', '\x2', '\x28F', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x290', '\x291', '\a', '\x4', '\x2', '\x2', '\x291', '\x292', 
		'\a', '\"', '\x2', '\x2', '\x292', '\x293', '\x5', '&', '\x14', '\x2', 
		'\x293', '\x294', '\a', '\x4', '\x2', '\x2', '\x294', '\x295', '\a', '+', 
		'\x2', '\x2', '\x295', '\x296', '\x5', '`', '\x31', '\x2', '\x296', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x297', '\x298', '\a', '\x4', '\x2', '\x2', 
		'\x298', '\x299', '\a', '*', '\x2', '\x2', '\x299', '\x2A0', '\x5', '$', 
		'\x13', '\x2', '\x29A', '\x29B', '\a', '\x4', '\x2', '\x2', '\x29B', '\x29C', 
		'\a', '\n', '\x2', '\x2', '\x29C', '\x29D', '\x5', '\xB4', '[', '\x2', 
		'\x29D', '\x29E', '\x5', '\x92', 'J', '\x2', '\x29E', '\x29F', '\x5', 
		'$', '\x13', '\x2', '\x29F', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A0', 
		'\x29A', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', 
		'\a', '\x4', '\x2', '\x2', '\x2A3', '\x2A4', '\a', '\x11', '\x2', '\x2', 
		'\x2A4', '\x2A5', '\a', '*', '\x2', '\x2', '\x2A5', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6', '\x2A7', '\a', '\x4', '\x2', '\x2', '\x2A7', '\x2A8', 
		'\a', '*', '\x2', '\x2', '\x2A8', '\x2AF', '\x5', '&', '\x14', '\x2', 
		'\x2A9', '\x2AA', '\a', '\x4', '\x2', '\x2', '\x2AA', '\x2AB', '\a', '\n', 
		'\x2', '\x2', '\x2AB', '\x2AC', '\x5', '\xB4', '[', '\x2', '\x2AC', '\x2AD', 
		'\x5', '\x92', 'J', '\x2', '\x2AD', '\x2AE', '\x5', '&', '\x14', '\x2', 
		'\x2AE', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2A9', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\a', '\x4', '\x2', 
		'\x2', '\x2B2', '\x2B3', '\a', '\x11', '\x2', '\x2', '\x2B3', '\x2B4', 
		'\a', '*', '\x2', '\x2', '\x2B4', 'S', '\x3', '\x2', '\x2', '\x2', '\x2B5', 
		'\x2B6', '\a', '\x4', '\x2', '\x2', '\x2B6', '\x2B7', '\a', '&', '\x2', 
		'\x2', '\x2B7', '\x2BB', '\x5', '`', '\x31', '\x2', '\x2B8', '\x2BA', 
		'\x5', 'X', '-', '\x2', '\x2B9', '\x2B8', '\x3', '\x2', '\x2', '\x2', 
		'\x2BA', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2B9', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BB', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2C0', '\x5', '\\', '/', '\x2', '\x2BF', '\x2BE', '\x3', 
		'\x2', '\x2', '\x2', '\x2BF', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\a', '\x11', '\x2', 
		'\x2', '\x2C2', '\x2C3', '\a', '&', '\x2', '\x2', '\x2C3', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\a', '\x4', '\x2', '\x2', '\x2C5', 
		'\x2C6', '\a', '&', '\x2', '\x2', '\x2C6', '\x2CA', '\x5', '`', '\x31', 
		'\x2', '\x2C7', '\x2C9', '\x5', 'Z', '.', '\x2', '\x2C8', '\x2C7', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\x3', '\x2', '\x2', 
		'\x2', '\x2CB', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CA', 
		'\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CF', '\x5', '^', '\x30', '\x2', 
		'\x2CE', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x2D1', '\a', '\x11', '\x2', '\x2', '\x2D1', '\x2D2', '\a', '&', '\x2', 
		'\x2', '\x2D2', 'W', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\a', 
		'\x4', '\x2', '\x2', '\x2D4', '\x2D5', '\a', '\t', '\x2', '\x2', '\x2D5', 
		'\x2D6', '\x5', '\x8C', 'G', '\x2', '\x2D6', '\x2D7', '\x5', '$', '\x13', 
		'\x2', '\x2D7', 'Y', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\a', 
		'\x4', '\x2', '\x2', '\x2D9', '\x2DA', '\a', '\t', '\x2', '\x2', '\x2DA', 
		'\x2DB', '\x5', '\x8C', 'G', '\x2', '\x2DB', '\x2DC', '\x5', '&', '\x14', 
		'\x2', '\x2DC', '[', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', '\a', 
		'\x4', '\x2', '\x2', '\x2DE', '\x2DF', '\a', '\xF', '\x2', '\x2', '\x2DF', 
		'\x2E0', '\x5', '$', '\x13', '\x2', '\x2E0', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x2E1', '\x2E2', '\a', '\x4', '\x2', '\x2', '\x2E2', '\x2E3', 
		'\a', '\xF', '\x2', '\x2', '\x2E3', '\x2E4', '\x5', '&', '\x14', '\x2', 
		'\x2E4', '_', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\b', '\x31', 
		'\x1', '\x2', '\x2E6', '\x2F1', '\x5', '\x62', '\x32', '\x2', '\x2E7', 
		'\x2E8', '\x5', '\x82', '\x42', '\x2', '\x2E8', '\x2E9', '\x5', '`', '\x31', 
		'\t', '\x2E9', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2F1', 
		'\x5', '\x8E', 'H', '\x2', '\x2EB', '\x2F1', '\x5', '\x66', '\x34', '\x2', 
		'\x2EC', '\x2F1', '\x5', 'h', '\x35', '\x2', '\x2ED', '\x2F1', '\x5', 
		'j', '\x36', '\x2', '\x2EE', '\x2EF', '\a', '\x4', '\x2', '\x2', '\x2EF', 
		'\x2F1', '\x5', '`', '\x31', '\x3', '\x2F0', '\x2E5', '\x3', '\x2', '\x2', 
		'\x2', '\x2F0', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EB', '\x3', '\x2', '\x2', '\x2', 
		'\x2F0', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2ED', '\x3', 
		'\x2', '\x2', '\x2', '\x2F0', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F1', 
		'\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', '\f', '\b', '\x2', 
		'\x2', '\x2F3', '\x2F4', '\x5', '\x84', '\x43', '\x2', '\x2F4', '\x2F5', 
		'\x5', '`', '\x31', '\t', '\x2F5', '\x2F7', '\x3', '\x2', '\x2', '\x2', 
		'\x2F6', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2FA', '\x3', 
		'\x2', '\x2', '\x2', '\x2F8', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FC', 
		'\b', '\x32', '\x1', '\x2', '\x2FC', '\x300', '\x5', '\x64', '\x33', '\x2', 
		'\x2FD', '\x300', '\x5', '\x30', '\x19', '\x2', '\x2FE', '\x300', '\x5', 
		'p', '\x39', '\x2', '\x2FF', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FF', 
		'\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FE', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x301', '\x302', 
		'\f', '\x5', '\x2', '\x2', '\x302', '\x30A', '\x5', 'l', '\x37', '\x2', 
		'\x303', '\x304', '\f', '\x4', '\x2', '\x2', '\x304', '\x305', '\a', '\x43', 
		'\x2', '\x2', '\x305', '\x30A', '\x5', '\x30', '\x19', '\x2', '\x306', 
		'\x307', '\f', '\x3', '\x2', '\x2', '\x307', '\x308', '\a', '\x43', '\x2', 
		'\x2', '\x308', '\x30A', '\x5', '\xB0', 'Y', '\x2', '\x309', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\x309', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x309', '\x306', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x30B', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x30C', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x30D', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', 
		'\a', '@', '\x2', '\x2', '\x30F', '\x310', '\x5', '`', '\x31', '\x2', 
		'\x310', '\x311', '\a', '\x41', '\x2', '\x2', '\x311', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x312', '\x314', '\a', '\x4', '\x2', '\x2', '\x313', 
		'\x312', '\x3', '\x2', '\x2', '\x2', '\x313', '\x314', '\x3', '\x2', '\x2', 
		'\x2', '\x314', '\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', 
		'\a', '\x15', '\x2', '\x2', '\x316', '\x318', '\x5', '`', '\x31', '\x2', 
		'\x317', '\x319', '\a', '\x4', '\x2', '\x2', '\x318', '\x317', '\x3', 
		'\x2', '\x2', '\x2', '\x318', '\x319', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x31A', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\a', '\'', '\x2', 
		'\x2', '\x31B', '\x31D', '\x5', '`', '\x31', '\x2', '\x31C', '\x31E', 
		'\a', '\x4', '\x2', '\x2', '\x31D', '\x31C', '\x3', '\x2', '\x2', '\x2', 
		'\x31D', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x320', '\a', '\x10', '\x2', '\x2', '\x320', 
		'\x321', '\x5', '`', '\x31', '\x2', '\x321', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x322', '\x323', '\a', '\x19', '\x2', '\x2', '\x323', '\x324', 
		'\x5', '\x32', '\x1A', '\x2', '\x324', '\x325', '\a', ';', '\x2', '\x2', 
		'\x325', '\x326', '\x5', '`', '\x31', '\x2', '\x326', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x327', '\x328', '\a', '(', '\x2', '\x2', '\x328', '\x329', 
		'\x5', '\x92', 'J', '\x2', '\x329', '\x32A', '\a', '@', '\x2', '\x2', 
		'\x32A', '\x32B', '\x5', '\x32', '\x1A', '\x2', '\x32B', '\x32C', '\a', 
		'\x41', '\x2', '\x2', '\x32C', 'k', '\x3', '\x2', '\x2', '\x2', '\x32D', 
		'\x334', '\a', '>', '\x2', '\x2', '\x32E', '\x335', '\x5', '`', '\x31', 
		'\x2', '\x32F', '\x330', '\x5', '`', '\x31', '\x2', '\x330', '\x331', 
		'\a', '\x44', '\x2', '\x2', '\x331', '\x332', '\x5', '`', '\x31', '\x2', 
		'\x332', '\x335', '\x3', '\x2', '\x2', '\x2', '\x333', '\x335', '\x5', 
		'n', '\x38', '\x2', '\x334', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x32F', '\x3', '\x2', '\x2', '\x2', '\x334', '\x333', '\x3', '\x2', '\x2', 
		'\x2', '\x335', '\x336', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', 
		'\a', '?', '\x2', '\x2', '\x337', 'm', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x339', '\x5', '`', '\x31', '\x2', '\x339', '\x33A', '\a', '\x42', '\x2', 
		'\x2', '\x33A', '\x33B', '\x5', '`', '\x31', '\x2', '\x33B', '\x342', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x33D', '\x5', '`', '\x31', '\x2', 
		'\x33D', '\x33E', '\a', '\x42', '\x2', '\x2', '\x33E', '\x342', '\x3', 
		'\x2', '\x2', '\x2', '\x33F', '\x340', '\a', '\x42', '\x2', '\x2', '\x340', 
		'\x342', '\x5', '`', '\x31', '\x2', '\x341', '\x338', '\x3', '\x2', '\x2', 
		'\x2', '\x341', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x341', '\x33F', 
		'\x3', '\x2', '\x2', '\x2', '\x342', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x34D', '\x5', '\x8C', 'G', '\x2', '\x344', '\x345', '\a', '%', 
		'\x2', '\x2', '\x345', '\x347', '\a', '\x43', '\x2', '\x2', '\x346', '\x344', 
		'\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', 
		'\x347', '\x348', '\x3', '\x2', '\x2', '\x2', '\x348', '\x34D', '\x5', 
		'\xAC', 'W', '\x2', '\x349', '\x34D', '\x5', 'r', ':', '\x2', '\x34A', 
		'\x34D', '\a', '%', '\x2', '\x2', '\x34B', '\x34D', '\a', '#', '\x2', 
		'\x2', '\x34C', '\x343', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x346', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x349', '\x3', '\x2', '\x2', '\x2', 
		'\x34C', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34B', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', 'q', '\x3', '\x2', '\x2', '\x2', '\x34E', 
		'\x352', '\x5', 't', ';', '\x2', '\x34F', '\x352', '\x5', 'x', '=', '\x2', 
		'\x350', '\x352', '\x5', '|', '?', '\x2', '\x351', '\x34E', '\x3', '\x2', 
		'\x2', '\x2', '\x351', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x351', '\x350', 
		'\x3', '\x2', '\x2', '\x2', '\x352', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x353', '\x354', '\a', '@', '\x2', '\x2', '\x354', '\x355', '\x5', '`', 
		'\x31', '\x2', '\x355', '\x356', '\a', '\x44', '\x2', '\x2', '\x356', 
		'\x35B', '\x5', '`', '\x31', '\x2', '\x357', '\x358', '\a', '\x44', '\x2', 
		'\x2', '\x358', '\x35A', '\x5', '`', '\x31', '\x2', '\x359', '\x357', 
		'\x3', '\x2', '\x2', '\x2', '\x35A', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x35B', '\x359', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', '\x3', 
		'\x2', '\x2', '\x2', '\x35C', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x35D', 
		'\x35B', '\x3', '\x2', '\x2', '\x2', '\x35E', '\x35F', '\a', '\x41', '\x2', 
		'\x2', '\x35F', 'u', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', '\a', 
		'@', '\x2', '\x2', '\x361', '\x364', '\x5', '\xAC', 'W', '\x2', '\x362', 
		'\x363', '\a', '\x44', '\x2', '\x2', '\x363', '\x365', '\x5', '\xAC', 
		'W', '\x2', '\x364', '\x362', '\x3', '\x2', '\x2', '\x2', '\x365', '\x366', 
		'\x3', '\x2', '\x2', '\x2', '\x366', '\x364', '\x3', '\x2', '\x2', '\x2', 
		'\x366', '\x367', '\x3', '\x2', '\x2', '\x2', '\x367', '\x368', '\x3', 
		'\x2', '\x2', '\x2', '\x368', '\x369', '\a', '\x41', '\x2', '\x2', '\x369', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x379', '\a', '<', '\x2', '\x2', 
		'\x36B', '\x36D', '\a', '\x4', '\x2', '\x2', '\x36C', '\x36B', '\x3', 
		'\x2', '\x2', '\x2', '\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', 
		'\x36E', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x373', '\x5', '`', '\x31', 
		'\x2', '\x36F', '\x370', '\a', '\x44', '\x2', '\x2', '\x370', '\x372', 
		'\x5', '`', '\x31', '\x2', '\x371', '\x36F', '\x3', '\x2', '\x2', '\x2', 
		'\x372', '\x375', '\x3', '\x2', '\x2', '\x2', '\x373', '\x371', '\x3', 
		'\x2', '\x2', '\x2', '\x373', '\x374', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x377', '\x3', '\x2', '\x2', '\x2', '\x375', '\x373', '\x3', '\x2', '\x2', 
		'\x2', '\x376', '\x378', '\a', '\x4', '\x2', '\x2', '\x377', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x377', '\x378', '\x3', '\x2', '\x2', '\x2', 
		'\x378', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x379', '\x36C', '\x3', 
		'\x2', '\x2', '\x2', '\x379', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x37A', 
		'\x37B', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x37C', '\a', '=', '\x2', 
		'\x2', '\x37C', 'y', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\a', 
		'<', '\x2', '\x2', '\x37E', '\x37F', '\x5', '\xAC', 'W', '\x2', '\x37F', 
		'\x380', '\a', '\x45', '\x2', '\x2', '\x380', '\x381', '\x5', '\xAC', 
		'W', '\x2', '\x381', '\x382', '\a', '=', '\x2', '\x2', '\x382', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x392', '\a', '<', '\x2', '\x2', '\x384', 
		'\x386', '\a', '\x4', '\x2', '\x2', '\x385', '\x384', '\x3', '\x2', '\x2', 
		'\x2', '\x385', '\x386', '\x3', '\x2', '\x2', '\x2', '\x386', '\x387', 
		'\x3', '\x2', '\x2', '\x2', '\x387', '\x38C', '\x5', '~', '@', '\x2', 
		'\x388', '\x389', '\a', '\x44', '\x2', '\x2', '\x389', '\x38B', '\x5', 
		'~', '@', '\x2', '\x38A', '\x388', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38E', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38A', '\x3', '\x2', '\x2', 
		'\x2', '\x38C', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x38D', '\x390', 
		'\x3', '\x2', '\x2', '\x2', '\x38E', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\x38F', '\x391', '\a', '\x4', '\x2', '\x2', '\x390', '\x38F', '\x3', 
		'\x2', '\x2', '\x2', '\x390', '\x391', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x393', '\x3', '\x2', '\x2', '\x2', '\x392', '\x385', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x393', '\x3', '\x2', '\x2', '\x2', '\x393', '\x394', 
		'\x3', '\x2', '\x2', '\x2', '\x394', '\x395', '\a', '=', '\x2', '\x2', 
		'\x395', '}', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', '\x5', '`', 
		'\x31', '\x2', '\x397', '\x398', '\a', '\x45', '\x2', '\x2', '\x398', 
		'\x399', '\x5', '`', '\x31', '\x2', '\x399', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x39A', '\x39B', '\t', '\x3', '\x2', '\x2', '\x39B', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x39C', '\x39D', '\t', '\x4', '\x2', '\x2', '\x39D', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x3A2', '\x5', '\x86', '\x44', 
		'\x2', '\x39F', '\x3A2', '\x5', '\x88', '\x45', '\x2', '\x3A0', '\x3A2', 
		'\x5', '\x8A', '\x46', '\x2', '\x3A1', '\x39E', '\x3', '\x2', '\x2', '\x2', 
		'\x3A1', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A0', '\x3', 
		'\x2', '\x2', '\x2', '\x3A2', '\x85', '\x3', '\x2', '\x2', '\x2', '\x3A3', 
		'\x3A4', '\t', '\x5', '\x2', '\x2', '\x3A4', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x3A5', '\x3A6', '\t', '\x6', '\x2', '\x2', '\x3A6', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x3A7', '\x3A8', '\t', '\a', '\x2', '\x2', '\x3A8', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\t', '\b', '\x2', 
		'\x2', '\x3AA', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AC', 
		'\a', '\x1D', '\x2', '\x2', '\x3AC', '\x3AD', '\x5', '\x92', 'J', '\x2', 
		'\x3AD', '\x3AF', '\a', '@', '\x2', '\x2', '\x3AE', '\x3B0', '\x5', '\x32', 
		'\x1A', '\x2', '\x3AF', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AF', 
		'\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B1', '\x3', '\x2', '\x2', 
		'\x2', '\x3B1', '\x3B3', '\a', '\x41', '\x2', '\x2', '\x3B2', '\x3B4', 
		'\x5', '\x90', 'I', '\x2', '\x3B3', '\x3B2', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B9', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3B6', '\x5', '\xAC', 'W', '\x2', '\x3B6', 
		'\x3B7', '\x5', '\x90', 'I', '\x2', '\x3B7', '\x3B9', '\x3', '\x2', '\x2', 
		'\x2', '\x3B8', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B5', 
		'\x3', '\x2', '\x2', '\x2', '\x3B9', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x3BA', '\x3BB', '\a', '.', '\x2', '\x2', '\x3BB', '\x3BC', '\a', '<', 
		'\x2', '\x2', '\x3BC', '\x3C1', '\x5', '*', '\x16', '\x2', '\x3BD', '\x3BE', 
		'\a', '\x44', '\x2', '\x2', '\x3BE', '\x3C0', '\x5', '*', '\x16', '\x2', 
		'\x3BF', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3C3', '\x3', 
		'\x2', '\x2', '\x2', '\x3C1', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3C1', 
		'\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C4', '\x3', '\x2', '\x2', 
		'\x2', '\x3C3', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C5', 
		'\a', '=', '\x2', '\x2', '\x3C5', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x3CC', '\a', '\x30', '\x2', '\x2', '\x3C7', '\x3CC', '\x5', 
		'\xAA', 'V', '\x2', '\x3C8', '\x3CC', '\x5', '\x98', 'M', '\x2', '\x3C9', 
		'\x3CC', '\x5', '\xA8', 'U', '\x2', '\x3CA', '\x3CC', '\x5', '\x94', 'K', 
		'\x2', '\x3CB', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3C7', 
		'\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3C8', '\x3', '\x2', '\x2', '\x2', 
		'\x3CB', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CA', '\x3', 
		'\x2', '\x2', '\x2', '\x3CC', '\x93', '\x3', '\x2', '\x2', '\x2', '\x3CD', 
		'\x3CE', '\a', '\x4', '\x2', '\x2', '\x3CE', '\x3CF', '\a', '\x12', '\x2', 
		'\x2', '\x3CF', '\x3D4', '\x5', '\x96', 'L', '\x2', '\x3D0', '\x3D1', 
		'\a', '\x44', '\x2', '\x2', '\x3D1', '\x3D3', '\x5', '\x96', 'L', '\x2', 
		'\x3D2', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D6', '\x3', 
		'\x2', '\x2', '\x2', '\x3D4', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D4', 
		'\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D7', '\x3', '\x2', '\x2', 
		'\x2', '\x3D6', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D8', 
		'\a', '\x4', '\x2', '\x2', '\x3D8', '\x3D9', '\a', '\x11', '\x2', '\x2', 
		'\x3D9', '\x3DA', '\a', '\x12', '\x2', '\x2', '\x3DA', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x3DB', '\x3DC', '\a', 'X', '\x2', '\x2', '\x3DC', 
		'\x3DD', '\a', ':', '\x2', '\x2', '\x3DD', '\x3DE', '\a', 'Z', '\x2', 
		'\x2', '\x3DE', '\x97', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E6', 
		'\x5', '\x9C', 'O', '\x2', '\x3E0', '\x3E6', '\x5', '\x9E', 'P', '\x2', 
		'\x3E1', '\x3E6', '\x5', '\xA0', 'Q', '\x2', '\x3E2', '\x3E6', '\x5', 
		'\x9A', 'N', '\x2', '\x3E3', '\x3E6', '\x5', '\xA2', 'R', '\x2', '\x3E4', 
		'\x3E6', '\a', '\x35', '\x2', '\x2', '\x3E5', '\x3DF', '\x3', '\x2', '\x2', 
		'\x2', '\x3E5', '\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E1', 
		'\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E2', '\x3', '\x2', '\x2', '\x2', 
		'\x3E5', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E4', '\x3', 
		'\x2', '\x2', '\x2', '\x3E6', '\x99', '\x3', '\x2', '\x2', '\x2', '\x3E7', 
		'\x3E8', '\a', '@', '\x2', '\x2', '\x3E8', '\x3EB', '\x5', '\x92', 'J', 
		'\x2', '\x3E9', '\x3EA', '\a', '\x44', '\x2', '\x2', '\x3EA', '\x3EC', 
		'\x5', '\x92', 'J', '\x2', '\x3EB', '\x3E9', '\x3', '\x2', '\x2', '\x2', 
		'\x3EC', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3ED', '\x3EB', '\x3', 
		'\x2', '\x2', '\x2', '\x3ED', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3EE', 
		'\x3EF', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '\x41', '\x2', 
		'\x2', '\x3F0', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F2', 
		'\a', '\x31', '\x2', '\x2', '\x3F2', '\x3F3', '\x5', '\xA6', 'T', '\x2', 
		'\x3F3', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F5', '\a', '\x32', 
		'\x2', '\x2', '\x3F5', '\x3F6', '\x5', '\xA6', 'T', '\x2', '\x3F6', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3F8', '\a', '\x33', '\x2', '\x2', 
		'\x3F8', '\x3F9', '\x5', '\xA6', 'T', '\x2', '\x3F9', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x3FA', '\x3FB', '\a', '\x34', '\x2', '\x2', '\x3FB', '\x3FC', 
		'\x5', '\xA6', 'T', '\x2', '\x3FC', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x3FD', '\x3FE', '\x5', '\x92', 'J', '\x2', '\x3FE', '\x3FF', '\x5', 
		'\xA6', 'T', '\x2', '\x3FF', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x400', 
		'\x401', '\a', 'M', '\x2', '\x2', '\x401', '\x402', '\x5', '\x92', 'J', 
		'\x2', '\x402', '\x403', '\a', 'N', '\x2', '\x2', '\x403', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x404', '\x405', '\a', '@', '\x2', '\x2', '\x405', 
		'\x40A', '\x5', '\x92', 'J', '\x2', '\x406', '\x407', '\a', '\x44', '\x2', 
		'\x2', '\x407', '\x409', '\x5', '\x92', 'J', '\x2', '\x408', '\x406', 
		'\x3', '\x2', '\x2', '\x2', '\x409', '\x40C', '\x3', '\x2', '\x2', '\x2', 
		'\x40A', '\x408', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40B', '\x3', 
		'\x2', '\x2', '\x2', '\x40B', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x40C', 
		'\x40A', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x40E', '\a', ';', '\x2', 
		'\x2', '\x40E', '\x40F', '\x5', '\x92', 'J', '\x2', '\x40F', '\x410', 
		'\a', '\x41', '\x2', '\x2', '\x410', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\x411', '\x412', '\a', 'X', '\x2', '\x2', '\x412', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\x413', '\x417', '\x5', '\xAE', 'X', '\x2', '\x414', '\x417', 
		'\x5', '\xB4', '[', '\x2', '\x415', '\x417', '\x5', '\xB6', '\\', '\x2', 
		'\x416', '\x413', '\x3', '\x2', '\x2', '\x2', '\x416', '\x414', '\x3', 
		'\x2', '\x2', '\x2', '\x416', '\x415', '\x3', '\x2', '\x2', '\x2', '\x417', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x418', '\x419', '\a', 'X', '\x2', 
		'\x2', '\x419', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', 
		'\a', 'X', '\x2', '\x2', '\x41B', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x41C', '\x41D', '\a', 'X', '\x2', '\x2', '\x41D', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\x41E', '\x41F', '\a', 'X', '\x2', '\x2', '\x41F', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x421', '\a', 'X', '\x2', '\x2', 
		'\x421', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x422', '\x423', '\a', 'X', 
		'\x2', '\x2', '\x423', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x424', '\x425', 
		'\a', 'X', '\x2', '\x2', '\x425', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\xC1', '\xC3', '\xC9', '\xDE', '\xE4', '\xEB', '\xED', '\xF9', 
		'\xFF', '\x101', '\x10D', '\x116', '\x118', '\x125', '\x12C', '\x12F', 
		'\x132', '\x135', '\x13E', '\x145', '\x149', '\x15A', '\x15E', '\x161', 
		'\x167', '\x173', '\x177', '\x17B', '\x180', '\x183', '\x186', '\x18A', 
		'\x18E', '\x19D', '\x1A0', '\x1AA', '\x1AC', '\x1B4', '\x1B6', '\x1C3', 
		'\x1CB', '\x1D5', '\x1D9', '\x1DD', '\x1E1', '\x1E6', '\x1E9', '\x1EE', 
		'\x1F7', '\x1FF', '\x203', '\x20F', '\x217', '\x227', '\x22D', '\x241', 
		'\x247', '\x2A0', '\x2AF', '\x2BB', '\x2BF', '\x2CA', '\x2CE', '\x2F0', 
		'\x2F8', '\x2FF', '\x309', '\x30B', '\x313', '\x318', '\x31D', '\x334', 
		'\x341', '\x346', '\x34C', '\x351', '\x35B', '\x366', '\x36C', '\x373', 
		'\x377', '\x379', '\x385', '\x38C', '\x390', '\x392', '\x3A1', '\x3AF', 
		'\x3B3', '\x3B8', '\x3C1', '\x3CB', '\x3D4', '\x3E5', '\x3ED', '\x40A', 
		'\x416',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
