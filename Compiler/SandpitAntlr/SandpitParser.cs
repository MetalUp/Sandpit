//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\GitHub\Sandpit\Compiler\SandpitAntlr\Sandpit.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SandpitParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, INT=24, BOOL=25, 
		STRING=26, ID=27, NEWLINE=28, WS=29;
	public const int
		RULE_file = 0, RULE_mainDecl = 1, RULE_procDecl = 2, RULE_funcDecl = 3, 
		RULE_constDecl = 4, RULE_varDecl = 5, RULE_letDecl = 6, RULE_whileStat = 7, 
		RULE_param = 8, RULE_constVal = 9, RULE_expr = 10, RULE_stat = 11, RULE_type = 12, 
		RULE_procBody = 13, RULE_funcBody = 14;
	public static readonly string[] ruleNames = {
		"file", "mainDecl", "procDecl", "funcDecl", "constDecl", "varDecl", "letDecl", 
		"whileStat", "param", "constVal", "expr", "stat", "type", "procBody", 
		"funcBody"
	};

	private static readonly string[] _LiteralNames = {
		null, "'main'", "'end main'", "'procedure'", "'('", "')'", "'end procedure'", 
		"'function'", "':'", "'end function'", "'constant'", "'='", "'var'", "'let'", 
		"'while'", "'end while'", "'{'", "','", "'}'", "'=='", "'Integer'", "'String'", 
		"'Boolean'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"INT", "BOOL", "STRING", "ID", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sandpit.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SandpitParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SandpitParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SandpitParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcDeclContext[] procDecl() {
			return GetRuleContexts<ProcDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcDeclContext procDecl(int i) {
			return GetRuleContext<ProcDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainDeclContext[] mainDecl() {
			return GetRuleContexts<MainDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainDeclContext mainDecl(int i) {
			return GetRuleContext<MainDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SandpitParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SandpitParser.NEWLINE, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__6) | (1L << T__9) | (1L << NEWLINE))) != 0)) {
				{
				State = 35;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 30;
					constDecl();
					}
					break;
				case T__2:
					{
					State = 31;
					procDecl();
					}
					break;
				case T__6:
					{
					State = 32;
					funcDecl();
					}
					break;
				case T__0:
					{
					State = 33;
					mainDecl();
					}
					break;
				case NEWLINE:
					{
					State = 34;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SandpitParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SandpitParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcBodyContext procBody() {
			return GetRuleContext<ProcBodyContext>(0);
		}
		public MainDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainDeclContext mainDecl() {
		MainDeclContext _localctx = new MainDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(T__0);
			State = 41;
			Match(NEWLINE);
			State = 42;
			procBody();
			State = 43;
			Match(T__1);
			State = 44;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SandpitParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SandpitParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SandpitParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcBodyContext procBody() {
			return GetRuleContext<ProcBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ProcDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcDeclContext procDecl() {
		ProcDeclContext _localctx = new ProcDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_procDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(T__2);
			State = 47;
			Match(ID);
			State = 48;
			Match(T__3);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 49;
				param();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55;
			Match(T__4);
			State = 56;
			Match(NEWLINE);
			State = 57;
			procBody();
			State = 58;
			Match(T__5);
			State = 59;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SandpitParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SandpitParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SandpitParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__6);
			State = 62;
			Match(ID);
			State = 63;
			Match(T__3);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 64;
				param();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(T__4);
			State = 71;
			Match(T__7);
			State = 72;
			type();
			State = 73;
			Match(NEWLINE);
			State = 74;
			funcBody();
			State = 75;
			Match(T__8);
			State = 76;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SandpitParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstValContext constVal() {
			return GetRuleContext<ConstValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SandpitParser.NEWLINE, 0); }
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_constDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(T__9);
			State = 79;
			Match(ID);
			State = 80;
			Match(T__10);
			State = 81;
			constVal();
			State = 82;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SandpitParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SandpitParser.NEWLINE, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__11);
			State = 85;
			Match(ID);
			State = 86;
			Match(T__10);
			State = 87;
			expr(0);
			State = 88;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SandpitParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SandpitParser.NEWLINE, 0); }
		public LetDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclContext letDecl() {
		LetDeclContext _localctx = new LetDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_letDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__12);
			State = 91;
			Match(ID);
			State = 92;
			Match(T__10);
			State = 93;
			expr(0);
			State = 94;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SandpitParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(SandpitParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcBodyContext procBody() {
			return GetRuleContext<ProcBodyContext>(0);
		}
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(T__13);
			State = 97;
			expr(0);
			State = 98;
			Match(NEWLINE);
			State = 99;
			procBody();
			State = 100;
			Match(T__14);
			State = 101;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SandpitParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 16, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 103;
			Match(ID);
			State = 104;
			Match(T__7);
			State = 105;
			type();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SandpitParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SandpitParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SandpitParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstValContext[] constVal() {
			return GetRuleContexts<ConstValContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstValContext constVal(int i) {
			return GetRuleContext<ConstValContext>(i);
		}
		public ConstValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstValContext constVal() {
		ConstValContext _localctx = new ConstValContext(Context, State);
		EnterRule(_localctx, 18, RULE_constVal);
		int _la;
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				Match(INT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				Match(STRING);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110;
				Match(T__15);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << INT) | (1L << BOOL) | (1L << STRING))) != 0)) {
					{
					State = 111;
					constVal();
					}
				}

				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 114;
					Match(T__16);
					State = 115;
					constVal();
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121;
				Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstValContext constVal() {
			return GetRuleContext<ConstValContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SandpitParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
			case INT:
			case BOOL:
			case STRING:
				{
				State = 125;
				constVal();
				}
				break;
			case ID:
				{
				State = 126;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 129;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 130;
					Match(T__18);
					State = 131;
					expr(2);
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 22, RULE_stat);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				varDecl();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				whileStat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProcBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcBodyContext procBody() {
		ProcBodyContext _localctx = new ProcBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_procBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 143;
				stat();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__11 || _la==T__13 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SandpitParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LetDeclContext[] letDecl() {
			return GetRuleContexts<LetDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetDeclContext letDecl(int i) {
			return GetRuleContext<LetDeclContext>(i);
		}
		public FuncBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncBodyContext funcBody() {
		FuncBodyContext _localctx = new FuncBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 148;
				letDecl();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(T__22);
			State = 155;
			expr(0);
			State = 156;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\xA1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x35', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x38', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'\x44', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'G', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 's', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'w', '\n', '\v', '\f', 
		'\v', '\xE', '\v', 'z', '\v', '\v', '\x3', '\v', '\x5', '\v', '}', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x82', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x87', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\x8A', '\v', '\f', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x8E', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x6', '\xF', '\x93', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x94', 
		'\x3', '\x10', '\a', '\x10', '\x98', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x9B', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x2', '\x3', '\x16', '\x11', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', '\x2', '\x3', '\x3', '\x2', '\x16', '\x18', '\x2', 
		'\xA2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x30', '\x3', '\x2', '\x2', '\x2', '\b', '?', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'P', '\x3', '\x2', '\x2', '\x2', '\f', 'V', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\\', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x12', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '|', '\x3', '\x2', '\x2', '\x2', '\x16', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x99', '\x3', '\x2', '\x2', '\x2', ' ', '&', '\x5', '\n', 
		'\x6', '\x2', '!', '&', '\x5', '\x6', '\x4', '\x2', '\"', '&', '\x5', 
		'\b', '\x5', '\x2', '#', '&', '\x5', '\x4', '\x3', '\x2', '$', '&', '\a', 
		'\x1E', '\x2', '\x2', '%', ' ', '\x3', '\x2', '\x2', '\x2', '%', '!', 
		'\x3', '\x2', '\x2', '\x2', '%', '\"', '\x3', '\x2', '\x2', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '\x3', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x3', 
		'\x2', '\x2', '+', ',', '\a', '\x1E', '\x2', '\x2', ',', '-', '\x5', '\x1C', 
		'\xF', '\x2', '-', '.', '\a', '\x4', '\x2', '\x2', '.', '/', '\a', '\x1E', 
		'\x2', '\x2', '/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x5', '\x2', '\x2', '\x31', '\x32', '\a', '\x1D', '\x2', '\x2', 
		'\x32', '\x36', '\a', '\x6', '\x2', '\x2', '\x33', '\x35', '\x5', '\x12', 
		'\n', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\a', '\a', '\x2', '\x2', ':', ';', '\a', '\x1E', '\x2', '\x2', ';', '<', 
		'\x5', '\x1C', '\xF', '\x2', '<', '=', '\a', '\b', '\x2', '\x2', '=', 
		'>', '\a', '\x1E', '\x2', '\x2', '>', '\a', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\a', '\t', '\x2', '\x2', '@', '\x41', '\a', '\x1D', '\x2', 
		'\x2', '\x41', '\x45', '\a', '\x6', '\x2', '\x2', '\x42', '\x44', '\x5', 
		'\x12', '\n', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\a', '\a', '\x2', '\x2', 'I', 'J', '\a', '\n', '\x2', '\x2', 'J', 'K', 
		'\x5', '\x1A', '\xE', '\x2', 'K', 'L', '\a', '\x1E', '\x2', '\x2', 'L', 
		'M', '\x5', '\x1E', '\x10', '\x2', 'M', 'N', '\a', '\v', '\x2', '\x2', 
		'N', 'O', '\a', '\x1E', '\x2', '\x2', 'O', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\a', '\f', '\x2', '\x2', 'Q', 'R', '\a', '\x1D', '\x2', 
		'\x2', 'R', 'S', '\a', '\r', '\x2', '\x2', 'S', 'T', '\x5', '\x14', '\v', 
		'\x2', 'T', 'U', '\a', '\x1E', '\x2', '\x2', 'U', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '\xE', '\x2', '\x2', 'W', 'X', '\a', '\x1D', 
		'\x2', '\x2', 'X', 'Y', '\a', '\r', '\x2', '\x2', 'Y', 'Z', '\x5', '\x16', 
		'\f', '\x2', 'Z', '[', '\a', '\x1E', '\x2', '\x2', '[', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\a', '\xF', '\x2', '\x2', ']', '^', '\a', '\x1D', 
		'\x2', '\x2', '^', '_', '\a', '\r', '\x2', '\x2', '_', '`', '\x5', '\x16', 
		'\f', '\x2', '`', '\x61', '\a', '\x1E', '\x2', '\x2', '\x61', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x10', '\x2', '\x2', '\x63', 
		'\x64', '\x5', '\x16', '\f', '\x2', '\x64', '\x65', '\a', '\x1E', '\x2', 
		'\x2', '\x65', '\x66', '\x5', '\x1C', '\xF', '\x2', '\x66', 'g', '\a', 
		'\x11', '\x2', '\x2', 'g', 'h', '\a', '\x1E', '\x2', '\x2', 'h', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x1D', '\x2', '\x2', 'j', 
		'k', '\a', '\n', '\x2', '\x2', 'k', 'l', '\x5', '\x1A', '\xE', '\x2', 
		'l', '\x13', '\x3', '\x2', '\x2', '\x2', 'm', '}', '\a', '\x1A', '\x2', 
		'\x2', 'n', '}', '\a', '\x1B', '\x2', '\x2', 'o', '}', '\a', '\x1C', '\x2', 
		'\x2', 'p', 'r', '\a', '\x12', '\x2', '\x2', 'q', 's', '\x5', '\x14', 
		'\v', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', 
		'\x2', '\x2', 's', 'x', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\x13', 
		'\x2', '\x2', 'u', 'w', '\x5', '\x14', '\v', '\x2', 'v', 't', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', 
		'\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '}', '\a', '\x14', 
		'\x2', '\x2', '|', 'm', '\x3', '\x2', '\x2', '\x2', '|', 'n', '\x3', '\x2', 
		'\x2', '\x2', '|', 'o', '\x3', '\x2', '\x2', '\x2', '|', 'p', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x15', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\b', 
		'\f', '\x1', '\x2', '\x7F', '\x82', '\x5', '\x14', '\v', '\x2', '\x80', 
		'\x82', '\a', '\x1D', '\x2', '\x2', '\x81', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\f', '\x3', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\x15', '\x2', '\x2', '\x85', '\x87', '\x5', '\x16', '\f', 
		'\x4', '\x86', '\x83', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', '\x5', 
		'\f', '\a', '\x2', '\x8C', '\x8E', '\x5', '\x10', '\t', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\t', 
		'\x2', '\x2', '\x2', '\x90', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x93', '\x5', '\x18', '\r', '\x2', '\x92', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x5', '\xE', '\b', 
		'\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', 
		'\x19', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x16', '\f', '\x2', '\x9E', 
		'\x9F', '\a', '\x1E', '\x2', '\x2', '\x9F', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '%', '\'', '\x36', '\x45', 'r', 'x', '|', '\x81', '\x88', 
		'\x8D', '\x94', '\x99',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
