//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\GitHub\Sandpit\Compiler\SandpitAntlr\Sandpit.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SandpitParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, BYTE_ORDER_MARK=2, SOL=3, LINE_CONTINUATION=4, SINGLE_LINE_COMMENT=5, 
		ABSTRACT=6, CASE=7, CATCH=8, CLASS=9, CONSTANT=10, CONSTRUCTOR=11, DEFAULT=12, 
		DO=13, ELSE=14, END=15, FOR=16, FUNCTION=17, IF=18, IMMUTABLE=19, INPUT=20, 
		IN=21, LAMBDA=22, LET=23, MAIN=24, METHOD=25, NEW=26, NEXT=27, NOW=28, 
		PARAM=29, PRIVATE=30, PROCEDURE=31, PROP=32, PROPERTY=33, RANDOM=34, REPEAT=35, 
		RETURN=36, SWITCH=37, THIS=38, THEN=39, THROW=40, TODAY=41, TRY=42, UNTIL=43, 
		VAR=44, WHILE=45, WITH=46, BOOL=47, VALUE_TYPE=48, ARRAY=49, LIST=50, 
		DICTIONARY=51, IDENTIFIER=52, TYPENAME=53, LITERAL_INTEGER=54, LITERAL_FLOAT=55, 
		LITERAL_DECIMAL=56, LITERAL_CHAR=57, LITERAL_STRING=58, VERBATIM_ONLY_STRING=59, 
		ASSIGN_ADD=60, ASSIGN_SUBTRACT=61, ASSIGN_MULT=62, ASSIGN_DIV=63, ASSIGN=64, 
		ARROW=65, OPEN_BRACE=66, CLOSE_BRACE=67, OPEN_SQ_BRACKET=68, CLOSE_SQ_BRACKET=69, 
		OPEN_BRACKET=70, CLOSE_BRACKET=71, DOUBLE_DOT=72, DOT=73, COMMA=74, COLON=75, 
		PLUS=76, MINUS=77, MULT=78, DIVIDE=79, POWER=80, MOD=81, INT_DIV=82, LT=83, 
		GT=84, NULLABLE=85, OP_AND=86, OP_NOT=87, OP_OR=88, OP_XOR=89, OP_EQ=90, 
		OP_NE=91, OP_LE=92, OP_GE=93, WHITESPACES=94, NEWLINE=95, WS=96;
	public const int
		RULE_file = 0, RULE_main = 1, RULE_constantDef = 2, RULE_classDef = 3, 
		RULE_mutableClass = 4, RULE_immutableClass = 5, RULE_procedureMethod = 6, 
		RULE_functionMethod = 7, RULE_functionDef = 8, RULE_functionWithBody = 9, 
		RULE_expressionFunction = 10, RULE_functionSignature = 11, RULE_procedureDef = 12, 
		RULE_procedureSignature = 13, RULE_constructor = 14, RULE_property = 15, 
		RULE_procedureBlock = 16, RULE_functionBlock = 17, RULE_procedureStatement = 18, 
		RULE_functionStatement = 19, RULE_systemCall = 20, RULE_varDef = 21, RULE_assignment = 22, 
		RULE_procedureCall = 23, RULE_argumentList = 24, RULE_parameterList = 25, 
		RULE_parameter = 26, RULE_assignmentOp = 27, RULE_unaryOp = 28, RULE_binaryOp = 29, 
		RULE_arithmeticOp = 30, RULE_logicalOp = 31, RULE_conditionalOp = 32, 
		RULE_controlFlowStatement = 33, RULE_condition = 34, RULE_if = 35, RULE_for = 36, 
		RULE_forIn = 37, RULE_while = 38, RULE_repeat = 39, RULE_try = 40, RULE_switch = 41, 
		RULE_case = 42, RULE_case_default = 43, RULE_expression = 44, RULE_lambda = 45, 
		RULE_letIn = 46, RULE_simpleExpression = 47, RULE_indexedValue = 48, RULE_sliceOfList = 49, 
		RULE_range = 50, RULE_assignableValue = 51, RULE_tupleDecomp = 52, RULE_listDecomp = 53, 
		RULE_literal = 54, RULE_literalValue = 55, RULE_bool = 56, RULE_integer = 57, 
		RULE_float = 58, RULE_decimal = 59, RULE_char = 60, RULE_string = 61, 
		RULE_literalDataStructure = 62, RULE_literalList = 63, RULE_literalDictionary = 64, 
		RULE_kvp = 65, RULE_functionCall = 66, RULE_instantiation = 67, RULE_withClause = 68, 
		RULE_type = 69, RULE_dataStructureType = 70, RULE_arrayType = 71, RULE_listType = 72, 
		RULE_dictionaryType = 73, RULE_generic = 74, RULE_funcType = 75, RULE_className = 76, 
		RULE_valueName = 77, RULE_constantName = 78, RULE_propertyName = 79, RULE_parameterName = 80, 
		RULE_variableName = 81, RULE_letName = 82, RULE_procedureName = 83, RULE_functionName = 84;
	public static readonly string[] ruleNames = {
		"file", "main", "constantDef", "classDef", "mutableClass", "immutableClass", 
		"procedureMethod", "functionMethod", "functionDef", "functionWithBody", 
		"expressionFunction", "functionSignature", "procedureDef", "procedureSignature", 
		"constructor", "property", "procedureBlock", "functionBlock", "procedureStatement", 
		"functionStatement", "systemCall", "varDef", "assignment", "procedureCall", 
		"argumentList", "parameterList", "parameter", "assignmentOp", "unaryOp", 
		"binaryOp", "arithmeticOp", "logicalOp", "conditionalOp", "controlFlowStatement", 
		"condition", "if", "for", "forIn", "while", "repeat", "try", "switch", 
		"case", "case_default", "expression", "lambda", "letIn", "simpleExpression", 
		"indexedValue", "sliceOfList", "range", "assignableValue", "tupleDecomp", 
		"listDecomp", "literal", "literalValue", "bool", "integer", "float", "decimal", 
		"char", "string", "literalDataStructure", "literalList", "literalDictionary", 
		"kvp", "functionCall", "instantiation", "withClause", "type", "dataStructureType", 
		"arrayType", "listType", "dictionaryType", "generic", "funcType", "className", 
		"valueName", "constantName", "propertyName", "parameterName", "variableName", 
		"letName", "procedureName", "functionName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'to'", "'\u00EF\u00BB\u00BF'", null, null, null, "'abstract'", 
		"'case'", "'catch'", "'class'", "'constant'", "'constructor'", "'default'", 
		"'do'", "'else'", "'end'", "'for'", "'function'", "'if'", "'immutable'", 
		"'input'", "'in'", "'lambda'", "'let'", "'main'", "'method'", "'new'", 
		"'next'", "'now'", "'param'", "'private'", "'procedure'", "'prop'", "'property'", 
		"'random'", "'repeat'", "'return'", "'switch'", "'this'", "'then'", "'throw'", 
		"'today'", "'try'", "'until'", "'var'", "'while'", "'with'", null, null, 
		"'Array'", "'List'", "'Dictionary'", null, null, null, null, null, null, 
		null, null, "'+='", "'-='", "'*='", "'/='", "'='", "'->'", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'..'", "'.'", "','", "':'", "'+'", "'-'", 
		"'*'", "'/'", "'^'", "'mod'", "'div'", "'<'", "'>'", "'?'", "'and'", "'not'", 
		"'or'", "'xor'", null, null, "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "BYTE_ORDER_MARK", "SOL", "LINE_CONTINUATION", "SINGLE_LINE_COMMENT", 
		"ABSTRACT", "CASE", "CATCH", "CLASS", "CONSTANT", "CONSTRUCTOR", "DEFAULT", 
		"DO", "ELSE", "END", "FOR", "FUNCTION", "IF", "IMMUTABLE", "INPUT", "IN", 
		"LAMBDA", "LET", "MAIN", "METHOD", "NEW", "NEXT", "NOW", "PARAM", "PRIVATE", 
		"PROCEDURE", "PROP", "PROPERTY", "RANDOM", "REPEAT", "RETURN", "SWITCH", 
		"THIS", "THEN", "THROW", "TODAY", "TRY", "UNTIL", "VAR", "WHILE", "WITH", 
		"BOOL", "VALUE_TYPE", "ARRAY", "LIST", "DICTIONARY", "IDENTIFIER", "TYPENAME", 
		"LITERAL_INTEGER", "LITERAL_FLOAT", "LITERAL_DECIMAL", "LITERAL_CHAR", 
		"LITERAL_STRING", "VERBATIM_ONLY_STRING", "ASSIGN_ADD", "ASSIGN_SUBTRACT", 
		"ASSIGN_MULT", "ASSIGN_DIV", "ASSIGN", "ARROW", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"DOUBLE_DOT", "DOT", "COMMA", "COLON", "PLUS", "MINUS", "MULT", "DIVIDE", 
		"POWER", "MOD", "INT_DIV", "LT", "GT", "NULLABLE", "OP_AND", "OP_NOT", 
		"OP_OR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "WHITESPACES", 
		"NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sandpit.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SandpitParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SandpitParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SandpitParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SandpitParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainContext[] main() {
			return GetRuleContexts<MainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main(int i) {
			return GetRuleContext<MainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext[] procedureDef() {
			return GetRuleContexts<ProcedureDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDefContext procedureDef(int i) {
			return GetRuleContext<ProcedureDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext[] functionDef() {
			return GetRuleContexts<FunctionDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefContext functionDef(int i) {
			return GetRuleContext<FunctionDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 175;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 170;
						main();
						}
						break;
					case 2:
						{
						State = 171;
						constantDef();
						}
						break;
					case 3:
						{
						State = 172;
						classDef();
						}
						break;
					case 4:
						{
						State = 173;
						procedureDef();
						}
						break;
					case 5:
						{
						State = 174;
						functionDef();
						}
						break;
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SOL) {
				{
				{
				State = 180;
				Match(SOL);
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAIN() { return GetTokens(SandpitParser.MAIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN(int i) {
			return GetToken(SandpitParser.MAIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(SOL);
			State = 189;
			Match(MAIN);
			State = 190;
			procedureBlock();
			State = 191;
			Match(SOL);
			State = 192;
			Match(END);
			State = 193;
			Match(MAIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(SandpitParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantNameContext constantName() {
			return GetRuleContext<ConstantNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefContext constantDef() {
		ConstantDefContext _localctx = new ConstantDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_constantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(SOL);
			State = 196;
			Match(CONSTANT);
			State = 197;
			constantName();
			State = 198;
			Match(ASSIGN);
			State = 199;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MutableClassContext mutableClass() {
			return GetRuleContext<MutableClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmutableClassContext immutableClass() {
			return GetRuleContext<ImmutableClassContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDef);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				mutableClass();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				immutableClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionMethodContext[] functionMethod() {
			return GetRuleContexts<FunctionMethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionMethodContext functionMethod(int i) {
			return GetRuleContext<FunctionMethodContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureMethodContext[] procedureMethod() {
			return GetRuleContexts<ProcedureMethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureMethodContext procedureMethod(int i) {
			return GetRuleContext<ProcedureMethodContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		public MutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MutableClassContext mutableClass() {
		MutableClassContext _localctx = new MutableClassContext(Context, State);
		EnterRule(_localctx, 8, RULE_mutableClass);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(SOL);
			State = 206;
			Match(CLASS);
			State = 207;
			className();
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 208;
					Match(SOL);
					State = 214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 209;
						constructor();
						}
						break;
					case 2:
						{
						State = 210;
						property();
						}
						break;
					case 3:
						{
						State = 211;
						functionMethod();
						}
						break;
					case 4:
						{
						State = 212;
						procedureMethod();
						}
						break;
					case 5:
						{
						State = 213;
						constantDef();
						}
						break;
					}
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 221;
			Match(SOL);
			State = 222;
			Match(END);
			State = 223;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmutableClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(SandpitParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLASS() { return GetTokens(SandpitParser.CLASS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS(int i) {
			return GetToken(SandpitParser.CLASS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext[] constructor() {
			return GetRuleContexts<ConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor(int i) {
			return GetRuleContext<ConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionMethodContext[] functionMethod() {
			return GetRuleContexts<FunctionMethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionMethodContext functionMethod(int i) {
			return GetRuleContext<FunctionMethodContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext[] constantDef() {
			return GetRuleContexts<ConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef(int i) {
			return GetRuleContext<ConstantDefContext>(i);
		}
		public ImmutableClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immutableClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmutableClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmutableClassContext immutableClass() {
		ImmutableClassContext _localctx = new ImmutableClassContext(Context, State);
		EnterRule(_localctx, 10, RULE_immutableClass);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(SOL);
			State = 226;
			Match(IMMUTABLE);
			State = 227;
			Match(CLASS);
			State = 228;
			className();
			State = 238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 229;
					Match(SOL);
					State = 234;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 230;
						constructor();
						}
						break;
					case 2:
						{
						State = 231;
						property();
						}
						break;
					case 3:
						{
						State = 232;
						functionMethod();
						}
						break;
					case 4:
						{
						State = 233;
						constantDef();
						}
						break;
					}
					}
					} 
				}
				State = 240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 241;
			Match(SOL);
			State = 242;
			Match(END);
			State = 243;
			Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] METHOD() { return GetTokens(SandpitParser.METHOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD(int i) {
			return GetToken(SandpitParser.METHOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(SandpitParser.PRIVATE, 0); }
		public ProcedureMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureMethodContext procedureMethod() {
		ProcedureMethodContext _localctx = new ProcedureMethodContext(Context, State);
		EnterRule(_localctx, 12, RULE_procedureMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(SOL);
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 246;
				Match(PRIVATE);
				}
			}

			State = 249;
			Match(METHOD);
			State = 250;
			procedureSignature();
			State = 251;
			procedureBlock();
			State = 252;
			Match(SOL);
			State = 253;
			Match(END);
			State = 254;
			Match(METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] METHOD() { return GetTokens(SandpitParser.METHOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD(int i) {
			return GetToken(SandpitParser.METHOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(SandpitParser.PRIVATE, 0); }
		public FunctionMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionMethodContext functionMethod() {
		FunctionMethodContext _localctx = new FunctionMethodContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(SOL);
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 257;
				Match(PRIVATE);
				}
			}

			State = 260;
			Match(METHOD);
			State = 261;
			functionSignature();
			State = 262;
			functionBlock();
			State = 263;
			Match(SOL);
			State = 264;
			Match(END);
			State = 265;
			Match(METHOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionWithBodyContext functionWithBody() {
			return GetRuleContext<FunctionWithBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionFunctionContext expressionFunction() {
			return GetRuleContext<ExpressionFunctionContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDef);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				functionWithBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				expressionFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionWithBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(SandpitParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(SandpitParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public FunctionWithBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionWithBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWithBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionWithBodyContext functionWithBody() {
		FunctionWithBodyContext _localctx = new FunctionWithBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionWithBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(SOL);
			State = 272;
			Match(FUNCTION);
			State = 273;
			functionSignature();
			State = 274;
			functionBlock();
			State = 275;
			Match(SOL);
			State = 276;
			Match(END);
			State = 277;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(SandpitParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionFunctionContext expressionFunction() {
		ExpressionFunctionContext _localctx = new ExpressionFunctionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(SOL);
			State = 280;
			Match(FUNCTION);
			State = 281;
			functionSignature();
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SOL) {
				{
				State = 282;
				Match(SOL);
				}
			}

			State = 285;
			Match(ARROW);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SOL) {
				{
				State = 286;
				Match(SOL);
				}
			}

			State = 289;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionSignature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			functionName();
			State = 292;
			Match(OPEN_BRACKET);
			State = 293;
			parameterList();
			State = 294;
			Match(CLOSE_BRACKET);
			State = 295;
			Match(ARROW);
			State = 296;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURE() { return GetTokens(SandpitParser.PROCEDURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE(int i) {
			return GetToken(SandpitParser.PROCEDURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSignatureContext procedureSignature() {
			return GetRuleContext<ProcedureSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public ProcedureDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDefContext procedureDef() {
		ProcedureDefContext _localctx = new ProcedureDefContext(Context, State);
		EnterRule(_localctx, 24, RULE_procedureDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(SOL);
			State = 299;
			Match(PROCEDURE);
			State = 300;
			procedureSignature();
			State = 301;
			procedureBlock();
			State = 302;
			Match(SOL);
			State = 303;
			Match(END);
			State = 304;
			Match(PROCEDURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ProcedureSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSignatureContext procedureSignature() {
		ProcedureSignatureContext _localctx = new ProcedureSignatureContext(Context, State);
		EnterRule(_localctx, 26, RULE_procedureSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			procedureName();
			State = 307;
			Match(OPEN_BRACKET);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SOL || _la==IDENTIFIER) {
				{
				State = 308;
				parameterList();
				}
			}

			State = 311;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRUCTOR() { return GetTokens(SandpitParser.CONSTRUCTOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(SandpitParser.CONSTRUCTOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 28, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(SOL);
			State = 314;
			Match(CONSTRUCTOR);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 315;
				Match(OPEN_BRACKET);
				State = 316;
				parameterList();
				State = 317;
				Match(CLOSE_BRACKET);
				}
			}

			State = 321;
			procedureBlock();
			State = 322;
			Match(SOL);
			State = 323;
			Match(END);
			State = 324;
			Match(CONSTRUCTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(SandpitParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(SandpitParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 30, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(SOL);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 327;
				Match(PRIVATE);
				}
			}

			State = 330;
			Match(PROPERTY);
			State = 331;
			propertyName();
			State = 335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE_TYPE:
			case ARRAY:
			case LIST:
			case DICTIONARY:
			case TYPENAME:
			case OPEN_BRACKET:
				{
				State = 332;
				type();
				}
				break;
			case ASSIGN:
				{
				{
				State = 333;
				Match(ASSIGN);
				State = 334;
				literal();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStatementContext[] procedureStatement() {
			return GetRuleContexts<ProcedureStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStatementContext procedureStatement(int i) {
			return GetRuleContext<ProcedureStatementContext>(i);
		}
		public ProcedureBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBlockContext procedureBlock() {
		ProcedureBlockContext _localctx = new ProcedureBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_procedureBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 337;
					procedureStatement();
					}
					} 
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext[] functionStatement() {
			return GetRuleContexts<FunctionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement(int i) {
			return GetRuleContext<FunctionStatementContext>(i);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 343;
					functionStatement();
					}
					} 
				}
				State = 348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemCallContext systemCall() {
			return GetRuleContext<SystemCallContext>(0);
		}
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_procedureStatement);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349;
				functionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				procedureCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 351;
				systemCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDefContext constantDef() {
			return GetRuleContext<ConstantDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlFlowStatementContext controlFlowStatement() {
			return GetRuleContext<ControlFlowStatementContext>(0);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionStatement);
		try {
			State = 358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				constantDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				varDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 356;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 357;
				controlFlowStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SandpitParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(SandpitParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(SandpitParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TODAY() { return GetToken(SandpitParser.TODAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(SandpitParser.NOW, 0); }
		public SystemCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemCallContext systemCall() {
		SystemCallContext _localctx = new SystemCallContext(Context, State);
		EnterRule(_localctx, 40, RULE_systemCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(SOL);
			State = 361;
			Match(VAR);
			State = 362;
			variableName();
			State = 363;
			Match(ASSIGN);
			State = 364;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INPUT) | (1L << NOW) | (1L << RANDOM) | (1L << TODAY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(SandpitParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_varDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(SOL);
			State = 367;
			Match(VAR);
			State = 368;
			variableName();
			State = 369;
			Match(ASSIGN);
			State = 370;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableValueContext assignableValue() {
			return GetRuleContext<AssignableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOpContext assignmentOp() {
			return GetRuleContext<AssignmentOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROP() { return GetToken(SandpitParser.PROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(SandpitParser.PARAM, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(SOL);
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAM || _la==PROP) {
				{
				State = 373;
				_la = TokenStream.LA(1);
				if ( !(_la==PARAM || _la==PROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 376;
			assignableValue();
			State = 379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 377;
				Match(ASSIGN);
				}
				break;
			case ASSIGN_ADD:
			case ASSIGN_SUBTRACT:
			case ASSIGN_MULT:
			case ASSIGN_DIV:
				{
				State = 378;
				assignmentOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 381;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 46, RULE_procedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(SOL);
			State = 384;
			procedureName();
			State = 385;
			Match(OPEN_BRACKET);
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LINE_CONTINUATION) | (1L << IF) | (1L << LAMBDA) | (1L << LET) | (1L << NEW) | (1L << PROP) | (1L << BOOL) | (1L << IDENTIFIER) | (1L << LITERAL_INTEGER) | (1L << LITERAL_FLOAT) | (1L << LITERAL_DECIMAL) | (1L << LITERAL_CHAR) | (1L << LITERAL_STRING))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (OPEN_BRACE - 66)) | (1L << (OPEN_BRACKET - 66)) | (1L << (MINUS - 66)) | (1L << (OP_NOT - 66)))) != 0)) {
				{
				State = 386;
				argumentList();
				}
			}

			State = 389;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 48, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			expression(0);
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 392;
				Match(COMMA);
				State = 393;
				expression(0);
				}
				}
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			parameter();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 400;
				Match(COMMA);
				State = 401;
				parameter();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SOL) {
				{
				State = 407;
				Match(SOL);
				}
			}

			State = 410;
			parameterName();
			State = 411;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_ADD() { return GetToken(SandpitParser.ASSIGN_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SUBTRACT() { return GetToken(SandpitParser.ASSIGN_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_MULT() { return GetToken(SandpitParser.ASSIGN_MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_DIV() { return GetToken(SandpitParser.ASSIGN_DIV, 0); }
		public AssignmentOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOpContext assignmentOp() {
		AssignmentOpContext _localctx = new AssignmentOpContext(Context, State);
		EnterRule(_localctx, 54, RULE_assignmentOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN_ADD) | (1L << ASSIGN_SUBTRACT) | (1L << ASSIGN_MULT) | (1L << ASSIGN_DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SandpitParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(SandpitParser.OP_NOT, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 56, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==OP_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOpContext arithmeticOp() {
			return GetRuleContext<ArithmeticOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 58, RULE_binaryOp);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULT:
			case DIVIDE:
			case POWER:
			case MOD:
			case INT_DIV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417;
				arithmeticOp();
				}
				break;
			case OP_AND:
			case OP_OR:
			case OP_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418;
				logicalOp();
				}
				break;
			case LT:
			case GT:
			case OP_EQ:
			case OP_NE:
			case OP_LE:
			case OP_GE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 419;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(SandpitParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(SandpitParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(SandpitParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(SandpitParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DIV() { return GetToken(SandpitParser.INT_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SandpitParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SandpitParser.MINUS, 0); }
		public ArithmeticOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOpContext arithmeticOp() {
		ArithmeticOpContext _localctx = new ArithmeticOpContext(Context, State);
		EnterRule(_localctx, 60, RULE_arithmeticOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PLUS - 76)) | (1L << (MINUS - 76)) | (1L << (MULT - 76)) | (1L << (DIVIDE - 76)) | (1L << (POWER - 76)) | (1L << (MOD - 76)) | (1L << (INT_DIV - 76)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SandpitParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SandpitParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SandpitParser.OP_XOR, 0); }
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 62, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (OP_AND - 86)) | (1L << (OP_OR - 86)) | (1L << (OP_XOR - 86)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SandpitParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SandpitParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(SandpitParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(SandpitParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(SandpitParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(SandpitParser.OP_NE, 0); }
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 64, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (LT - 83)) | (1L << (GT - 83)) | (1L << (OP_EQ - 83)) | (1L << (OP_NE - 83)) | (1L << (OP_LE - 83)) | (1L << (OP_GE - 83)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlFlowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInContext forIn() {
			return GetRuleContext<ForInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryContext @try() {
			return GetRuleContext<TryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public ControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlFlowStatementContext controlFlowStatement() {
		ControlFlowStatementContext _localctx = new ControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_controlFlowStatement);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				@for();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				forIn();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 431;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 432;
				repeat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 433;
				@try();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 434;
				@switch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 68, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			expression(0);
			State = 438;
			conditionalOp();
			State = 439;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(SandpitParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(SandpitParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(SandpitParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(SandpitParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext[] procedureBlock() {
			return GetRuleContexts<ProcedureBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock(int i) {
			return GetRuleContext<ProcedureBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(SandpitParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(SandpitParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 70, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(SOL);
			State = 442;
			Match(IF);
			State = 443;
			condition();
			State = 444;
			Match(THEN);
			State = 445;
			procedureBlock();
			State = 446;
			Match(SOL);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE) {
				{
				{
				State = 447;
				Match(ELSE);
				State = 448;
				Match(IF);
				State = 449;
				condition();
				State = 450;
				Match(THEN);
				State = 451;
				procedureBlock();
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 458;
				Match(SOL);
				State = 459;
				Match(ELSE);
				State = 460;
				procedureBlock();
				}
				break;
			}
			State = 463;
			Match(SOL);
			State = 464;
			Match(END);
			State = 465;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(SandpitParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(SandpitParser.NEXT, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 72, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(SOL);
			State = 468;
			Match(FOR);
			State = 469;
			variableName();
			State = 470;
			Match(ASSIGN);
			State = 471;
			expression(0);
			State = 472;
			Match(T__0);
			State = 473;
			expression(0);
			State = 474;
			procedureBlock();
			State = 475;
			Match(SOL);
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END:
				{
				{
				State = 476;
				Match(END);
				State = 477;
				Match(FOR);
				}
				}
				break;
			case NEXT:
				{
				{
				State = 478;
				Match(NEXT);
				State = 479;
				variableName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(SandpitParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(SandpitParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext[] variableName() {
			return GetRuleContexts<VariableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName(int i) {
			return GetRuleContext<VariableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SandpitParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(SandpitParser.NEXT, 0); }
		public ForInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInContext forIn() {
		ForInContext _localctx = new ForInContext(Context, State);
		EnterRule(_localctx, 74, RULE_forIn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(SOL);
			State = 483;
			Match(FOR);
			State = 484;
			variableName();
			State = 485;
			Match(IN);
			State = 486;
			expression(0);
			State = 487;
			procedureBlock();
			State = 488;
			Match(SOL);
			State = 493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END:
				{
				{
				State = 489;
				Match(END);
				State = 490;
				Match(FOR);
				}
				}
				break;
			case NEXT:
				{
				{
				State = 491;
				Match(NEXT);
				State = 492;
				variableName();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(SandpitParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(SandpitParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 76, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(SOL);
			State = 496;
			Match(WHILE);
			State = 497;
			condition();
			State = 498;
			procedureBlock();
			State = 499;
			Match(SOL);
			State = 500;
			Match(END);
			State = 501;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(SandpitParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(SandpitParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(SandpitParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 78, RULE_repeat);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				Match(SOL);
				State = 504;
				Match(REPEAT);
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				Match(DO);
				State = 506;
				procedureBlock();
				State = 507;
				Match(SOL);
				State = 508;
				Match(UNTIL);
				State = 509;
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOL() { return GetTokens(SandpitParser.SOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL(int i) {
			return GetToken(SandpitParser.SOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(SandpitParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(SandpitParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext[] procedureBlock() {
			return GetRuleContexts<ProcedureBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock(int i) {
			return GetRuleContext<ProcedureBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(SandpitParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(SandpitParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryContext @try() {
		TryContext _localctx = new TryContext(Context, State);
		EnterRule(_localctx, 80, RULE_try);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(SOL);
			State = 514;
			Match(TRY);
			State = 515;
			procedureBlock();
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 516;
				Match(SOL);
				State = 517;
				Match(CATCH);
				State = 518;
				Match(CATCH);
				State = 519;
				variableName();
				State = 520;
				type();
				State = 521;
				procedureBlock();
				}
				break;
			}
			State = 525;
			Match(SOL);
			State = 526;
			Match(END);
			State = 527;
			Match(TRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SWITCH() { return GetTokens(SandpitParser.SWITCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH(int i) {
			return GetToken(SandpitParser.SWITCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(SandpitParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_defaultContext case_default() {
			return GetRuleContext<Case_defaultContext>(0);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 82, RULE_switch);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(SOL);
			State = 530;
			Match(SWITCH);
			State = 531;
			expression(0);
			State = 532;
			Match(COLON);
			State = 536;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 533;
					@case();
					}
					} 
				}
				State = 538;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SOL) {
				{
				State = 539;
				case_default();
				}
			}

			State = 542;
			Match(END);
			State = 543;
			Match(SWITCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(SandpitParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 84, RULE_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(SOL);
			State = 546;
			Match(CASE);
			State = 547;
			Match(COLON);
			State = 548;
			procedureBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOL() { return GetToken(SandpitParser.SOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(SandpitParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBlockContext procedureBlock() {
			return GetRuleContext<ProcedureBlockContext>(0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_defaultContext case_default() {
		Case_defaultContext _localctx = new Case_defaultContext(Context, State);
		EnterRule(_localctx, 86, RULE_case_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(SOL);
			State = 551;
			Match(DEFAULT);
			State = 552;
			Match(COLON);
			State = 553;
			procedureBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_CONTINUATION() { return GetToken(SandpitParser.LINE_CONTINUATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedValueContext indexedValue() {
			return GetRuleContext<IndexedValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceOfListContext sliceOfList() {
			return GetRuleContext<SliceOfListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstantiationContext instantiation() {
			return GetRuleContext<InstantiationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SandpitParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(SandpitParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(SandpitParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetInContext letIn() {
			return GetRuleContext<LetInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(SandpitParser.DOT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 556;
				Match(LINE_CONTINUATION);
				State = 557;
				expression(13);
				}
				break;
			case 2:
				{
				State = 558;
				simpleExpression();
				}
				break;
			case 3:
				{
				State = 559;
				indexedValue();
				}
				break;
			case 4:
				{
				State = 560;
				sliceOfList();
				}
				break;
			case 5:
				{
				State = 561;
				unaryOp();
				State = 562;
				expression(9);
				}
				break;
			case 6:
				{
				State = 564;
				functionCall();
				}
				break;
			case 7:
				{
				State = 565;
				instantiation();
				}
				break;
			case 8:
				{
				State = 566;
				Match(IF);
				State = 567;
				expression(0);
				State = 568;
				Match(THEN);
				State = 569;
				expression(0);
				State = 570;
				Match(ELSE);
				State = 571;
				expression(4);
				}
				break;
			case 9:
				{
				State = 573;
				Match(OPEN_BRACKET);
				State = 574;
				expression(0);
				State = 575;
				Match(CLOSE_BRACKET);
				}
				break;
			case 10:
				{
				State = 577;
				lambda();
				}
				break;
			case 11:
				{
				State = 578;
				letIn();
				State = 579;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 592;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 590;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 583;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 584;
						binaryOp();
						State = 585;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 587;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 588;
						Match(DOT);
						State = 589;
						functionCall();
						}
						break;
					}
					} 
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(SandpitParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 90, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			Match(LAMBDA);
			State = 596;
			argumentList();
			State = 597;
			Match(ARROW);
			State = 598;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(SandpitParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext[] varDef() {
			return GetRuleContexts<VarDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef(int i) {
			return GetRuleContext<VarDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(SandpitParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public LetInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetInContext letIn() {
		LetInContext _localctx = new LetInContext(Context, State);
		EnterRule(_localctx, 92, RULE_letIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(LET);
			State = 601;
			varDef();
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 602;
				Match(COMMA);
				State = 603;
				varDef();
				}
				}
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 609;
			Match(IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROP() { return GetToken(SandpitParser.PROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(SandpitParser.PARAM, 0); }
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_simpleExpression);
		int _la;
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_DECIMAL:
			case LITERAL_CHAR:
			case LITERAL_STRING:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 611;
				literal();
				}
				break;
			case PROP:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PROP) {
					{
					State = 612;
					Match(PROP);
					State = 613;
					Match(PARAM);
					}
				}

				State = 616;
				valueName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(SandpitParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(SandpitParser.CLOSE_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(SandpitParser.COMMA, 0); }
		public IndexedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexedValueContext indexedValue() {
		IndexedValueContext _localctx = new IndexedValueContext(Context, State);
		EnterRule(_localctx, 96, RULE_indexedValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			valueName();
			State = 620;
			Match(OPEN_SQ_BRACKET);
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 621;
				expression(0);
				}
				break;
			case 2:
				{
				State = 622;
				expression(0);
				State = 623;
				Match(COMMA);
				State = 624;
				expression(0);
				}
				break;
			}
			State = 628;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceOfListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQ_BRACKET() { return GetToken(SandpitParser.OPEN_SQ_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQ_BRACKET() { return GetToken(SandpitParser.CLOSE_SQ_BRACKET, 0); }
		public SliceOfListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceOfList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceOfList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceOfListContext sliceOfList() {
		SliceOfListContext _localctx = new SliceOfListContext(Context, State);
		EnterRule(_localctx, 98, RULE_sliceOfList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			valueName();
			State = 631;
			Match(OPEN_SQ_BRACKET);
			State = 632;
			range();
			State = 633;
			Match(CLOSE_SQ_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(SandpitParser.DOUBLE_DOT, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 100, RULE_range);
		try {
			State = 644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635;
				expression(0);
				State = 636;
				Match(DOUBLE_DOT);
				State = 637;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 639;
				expression(0);
				State = 640;
				Match(DOUBLE_DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 642;
				Match(DOUBLE_DOT);
				State = 643;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedValueContext indexedValue() {
			return GetRuleContext<IndexedValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleDecompContext tupleDecomp() {
			return GetRuleContext<TupleDecompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListDecompContext listDecomp() {
			return GetRuleContext<ListDecompContext>(0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableValueContext assignableValue() {
		AssignableValueContext _localctx = new AssignableValueContext(Context, State);
		EnterRule(_localctx, 102, RULE_assignableValue);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646;
				valueName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 647;
				indexedValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 648;
				tupleDecomp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 649;
				listDecomp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext[] valueName() {
			return GetRuleContexts<ValueNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName(int i) {
			return GetRuleContext<ValueNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public TupleDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDecompContext tupleDecomp() {
		TupleDecompContext _localctx = new TupleDecompContext(Context, State);
		EnterRule(_localctx, 104, RULE_tupleDecomp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(OPEN_BRACKET);
			State = 653;
			valueName();
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 654;
				Match(COMMA);
				State = 655;
				valueName();
				}
				}
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 660;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDecompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext[] valueName() {
			return GetRuleContexts<ValueNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName(int i) {
			return GetRuleContext<ValueNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		public ListDecompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDecomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDecomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDecompContext listDecomp() {
		ListDecompContext _localctx = new ListDecompContext(Context, State);
		EnterRule(_localctx, 106, RULE_listDecomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			Match(OPEN_BRACE);
			State = 663;
			valueName();
			State = 664;
			Match(COLON);
			State = 665;
			valueName();
			State = 666;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDataStructureContext literalDataStructure() {
			return GetRuleContext<LiteralDataStructureContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_literal);
		try {
			State = 670;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_DECIMAL:
			case LITERAL_CHAR:
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 668;
				literalValue();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 669;
				literalDataStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharContext @char() {
			return GetRuleContext<CharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 110, RULE_literalValue);
		try {
			State = 678;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 672;
				@bool();
				}
				break;
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 673;
				integer();
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 674;
				@float();
				}
				break;
			case LITERAL_DECIMAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 675;
				@decimal();
				}
				break;
			case LITERAL_CHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 676;
				@char();
				}
				break;
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 677;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(SandpitParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 112, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(SandpitParser.LITERAL_INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 114, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(LITERAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(SandpitParser.LITERAL_FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 116, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(LITERAL_FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_DECIMAL() { return GetToken(SandpitParser.LITERAL_DECIMAL, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(Context, State);
		EnterRule(_localctx, 118, RULE_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(LITERAL_DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_CHAR() { return GetToken(SandpitParser.LITERAL_CHAR, 0); }
		public CharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharContext @char() {
		CharContext _localctx = new CharContext(Context, State);
		EnterRule(_localctx, 120, RULE_char);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(LITERAL_CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(SandpitParser.LITERAL_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 122, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(LITERAL_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDataStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDictionaryContext literalDictionary() {
			return GetRuleContext<LiteralDictionaryContext>(0);
		}
		public LiteralDataStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDataStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDataStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDataStructureContext literalDataStructure() {
		LiteralDataStructureContext _localctx = new LiteralDataStructureContext(Context, State);
		EnterRule(_localctx, 124, RULE_literalDataStructure);
		try {
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692;
				literalList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693;
				literalDictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 126, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(OPEN_BRACE);
			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (BOOL - 47)) | (1L << (LITERAL_INTEGER - 47)) | (1L << (LITERAL_FLOAT - 47)) | (1L << (LITERAL_DECIMAL - 47)) | (1L << (LITERAL_CHAR - 47)) | (1L << (LITERAL_STRING - 47)) | (1L << (OPEN_BRACE - 47)))) != 0)) {
				{
				State = 697;
				literal();
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 698;
					Match(COMMA);
					State = 699;
					literal();
					}
					}
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 707;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext[] kvp() {
			return GetRuleContexts<KvpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpContext kvp(int i) {
			return GetRuleContext<KvpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public LiteralDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDictionaryContext literalDictionary() {
		LiteralDictionaryContext _localctx = new LiteralDictionaryContext(Context, State);
		EnterRule(_localctx, 128, RULE_literalDictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			Match(OPEN_BRACE);
			State = 718;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (BOOL - 47)) | (1L << (LITERAL_INTEGER - 47)) | (1L << (LITERAL_FLOAT - 47)) | (1L << (LITERAL_DECIMAL - 47)) | (1L << (LITERAL_CHAR - 47)) | (1L << (LITERAL_STRING - 47)) | (1L << (OPEN_BRACE - 47)))) != 0)) {
				{
				State = 710;
				kvp();
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 711;
					Match(COMMA);
					State = 712;
					kvp();
					}
					}
					State = 717;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 720;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SandpitParser.COLON, 0); }
		public KvpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpContext kvp() {
		KvpContext _localctx = new KvpContext(Context, State);
		EnterRule(_localctx, 130, RULE_kvp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			literal();
			State = 723;
			Match(COLON);
			State = 724;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 132, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			functionName();
			State = 727;
			Match(OPEN_BRACKET);
			State = 729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LINE_CONTINUATION) | (1L << IF) | (1L << LAMBDA) | (1L << LET) | (1L << NEW) | (1L << PROP) | (1L << BOOL) | (1L << IDENTIFIER) | (1L << LITERAL_INTEGER) | (1L << LITERAL_FLOAT) | (1L << LITERAL_DECIMAL) | (1L << LITERAL_CHAR) | (1L << LITERAL_STRING))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (OPEN_BRACE - 66)) | (1L << (OPEN_BRACKET - 66)) | (1L << (MINUS - 66)) | (1L << (OP_NOT - 66)))) != 0)) {
				{
				State = 728;
				argumentList();
				}
			}

			State = 731;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstantiationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(SandpitParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueNameContext valueName() {
			return GetRuleContext<ValueNameContext>(0);
		}
		public InstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instantiation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstantiationContext instantiation() {
		InstantiationContext _localctx = new InstantiationContext(Context, State);
		EnterRule(_localctx, 134, RULE_instantiation);
		int _la;
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733;
				Match(NEW);
				State = 734;
				type();
				State = 735;
				Match(OPEN_BRACKET);
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LINE_CONTINUATION) | (1L << IF) | (1L << LAMBDA) | (1L << LET) | (1L << NEW) | (1L << PROP) | (1L << BOOL) | (1L << IDENTIFIER) | (1L << LITERAL_INTEGER) | (1L << LITERAL_FLOAT) | (1L << LITERAL_DECIMAL) | (1L << LITERAL_CHAR) | (1L << LITERAL_STRING))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (OPEN_BRACE - 66)) | (1L << (OPEN_BRACKET - 66)) | (1L << (MINUS - 66)) | (1L << (OP_NOT - 66)))) != 0)) {
					{
					State = 736;
					argumentList();
					}
				}

				State = 739;
				Match(CLOSE_BRACKET);
				State = 741;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 740;
					withClause();
					}
					break;
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743;
				valueName();
				State = 744;
				withClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(SandpitParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(SandpitParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(SandpitParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 136, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(WITH);
			State = 749;
			Match(OPEN_BRACE);
			State = 750;
			assignment();
			State = 755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 751;
				Match(COMMA);
				State = 752;
				assignment();
				}
				}
				State = 757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 758;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_TYPE() { return GetToken(SandpitParser.VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStructureTypeContext dataStructureType() {
			return GetRuleContext<DataStructureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 138, RULE_type);
		try {
			State = 764;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760;
				Match(VALUE_TYPE);
				}
				break;
			case ARRAY:
			case LIST:
			case DICTIONARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 761;
				dataStructureType();
				}
				break;
			case TYPENAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 762;
				className();
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 763;
				funcType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStructureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryTypeContext dictionaryType() {
			return GetRuleContext<DictionaryTypeContext>(0);
		}
		public DataStructureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStructureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStructureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStructureTypeContext dataStructureType() {
		DataStructureTypeContext _localctx = new DataStructureTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_dataStructureType);
		try {
			State = 769;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 766;
				arrayType();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767;
				listType();
				}
				break;
			case DICTIONARY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 768;
				dictionaryType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(SandpitParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			Match(ARRAY);
			State = 772;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(SandpitParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			Match(LIST);
			State = 775;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(SandpitParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericContext generic() {
			return GetRuleContext<GenericContext>(0);
		}
		public DictionaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryTypeContext dictionaryType() {
		DictionaryTypeContext _localctx = new DictionaryTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_dictionaryType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			Match(DICTIONARY);
			State = 778;
			generic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SandpitParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SandpitParser.GT, 0); }
		public GenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericContext generic() {
		GenericContext _localctx = new GenericContext(Context, State);
		EnterRule(_localctx, 148, RULE_generic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(LT);
			State = 781;
			type();
			State = 782;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SandpitParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(SandpitParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SandpitParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SandpitParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SandpitParser.COMMA, i);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(OPEN_BRACKET);
			State = 785;
			type();
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 786;
				Match(COMMA);
				State = 787;
				type();
				}
				}
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 793;
			Match(ARROW);
			State = 794;
			type();
			State = 795;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(SandpitParser.TYPENAME, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 152, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(TYPENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantNameContext constantName() {
			return GetRuleContext<ConstantNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetNameContext letName() {
			return GetRuleContext<LetNameContext>(0);
		}
		public ValueNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueNameContext valueName() {
		ValueNameContext _localctx = new ValueNameContext(Context, State);
		EnterRule(_localctx, 154, RULE_valueName);
		try {
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 799;
				constantName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 800;
				variableName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 801;
				letName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantNameContext constantName() {
		ConstantNameContext _localctx = new ConstantNameContext(Context, State);
		EnterRule(_localctx, 156, RULE_constantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 158, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 162, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public LetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetNameContext letName() {
		LetNameContext _localctx = new LetNameContext(Context, State);
		EnterRule(_localctx, 164, RULE_letName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 166, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SandpitParser.IDENTIFIER, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISandpitVisitor<TResult> typedVisitor = visitor as ISandpitVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 168, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 44: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x62', '\x335', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xB2', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xB5', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\xB8', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xBB', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xCE', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xD9', '\n', '\x6', 
		'\a', '\x6', '\xDB', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xDE', '\v', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xED', '\n', '\a', 
		'\a', '\a', '\xEF', '\n', '\a', '\f', '\a', '\xE', '\a', '\xF2', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\xFA', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x105', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x110', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\x11E', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x122', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x138', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x142', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x14B', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x152', '\n', 
		'\x11', '\x3', '\x12', '\a', '\x12', '\x155', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x158', '\v', '\x12', '\x3', '\x13', '\a', '\x13', '\x15B', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x15E', '\v', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x163', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x169', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x179', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x17E', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x186', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x18D', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x190', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x195', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x198', '\v', '\x1B', '\x3', '\x1C', '\x5', '\x1C', '\x19B', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x1A7', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x1B6', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\a', '%', '\x1C8', '\n', '%', '\f', '%', '\xE', '%', '\x1CB', '\v', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1D0', '\n', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1E3', 
		'\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x1F0', '\n', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x202', '\n', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x20E', '\n', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\a', '+', '\x219', '\n', '+', '\f', '+', '\xE', 
		'+', '\x21C', '\v', '+', '\x3', '+', '\x5', '+', '\x21F', '\n', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x248', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\a', '.', '\x251', '\n', '.', '\f', '.', '\xE', '.', '\x254', '\v', '.', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x25F', '\n', 
		'\x30', '\f', '\x30', '\xE', '\x30', '\x262', '\v', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', 
		'\x269', '\n', '\x31', '\x3', '\x31', '\x5', '\x31', '\x26C', '\n', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x275', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x287', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x28D', '\n', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x6', '\x36', '\x293', 
		'\n', '\x36', '\r', '\x36', '\xE', '\x36', '\x294', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2A1', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x2A9', '\n', '\x39', '\x3', 
		':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', 
		'=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', 
		'@', '\x3', '@', '\x5', '@', '\x2B9', '\n', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x2BF', '\n', '\x41', 
		'\f', '\x41', '\xE', '\x41', '\x2C2', '\v', '\x41', '\x5', '\x41', '\x2C4', 
		'\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\a', '\x42', '\x2CC', '\n', '\x42', '\f', 
		'\x42', '\xE', '\x42', '\x2CF', '\v', '\x42', '\x5', '\x42', '\x2D1', 
		'\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x2DC', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x2E4', 
		'\n', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x2E8', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x2ED', 
		'\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\a', '\x46', '\x2F4', '\n', '\x46', '\f', '\x46', '\xE', 
		'\x46', '\x2F7', '\v', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x2FF', '\n', 'G', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x304', '\n', 'H', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\a', 'M', '\x317', '\n', 
		'M', '\f', 'M', '\xE', 'M', '\x31A', '\v', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x5', 'O', '\x325', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x2', '\x3', 'Z', 'W', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\x2', '\t', '\x6', '\x2', '\x16', '\x16', '\x1E', '\x1E', '$', 
		'$', '+', '+', '\x4', '\x2', '\x1F', '\x1F', '\"', '\"', '\x3', '\x2', 
		'>', '\x41', '\x4', '\x2', 'O', 'O', 'Y', 'Y', '\x3', '\x2', 'N', 'T', 
		'\x4', '\x2', 'X', 'X', 'Z', '[', '\x4', '\x2', 'U', 'V', '\\', '_', '\x2', 
		'\x343', '\x2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x4', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\n', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x102', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x14', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x119', '\x3', '\x2', '\x2', '\x2', '\x18', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x148', '\x3', '\x2', '\x2', '\x2', '\"', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x15C', '\x3', '\x2', '\x2', '\x2', '&', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x16A', '\x3', '\x2', '\x2', '\x2', ',', '\x170', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x176', '\x3', '\x2', '\x2', '\x2', '\x30', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x191', '\x3', '\x2', '\x2', '\x2', '\x36', '\x19A', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x19F', '\x3', '\x2', '\x2', '\x2', ':', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1A8', '\x3', '\x2', '\x2', '\x2', '@', '\x1AA', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1BB', '\x3', '\x2', '\x2', '\x2', 'J', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1E4', '\x3', '\x2', '\x2', '\x2', 'N', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x203', '\x3', '\x2', '\x2', '\x2', 'T', '\x213', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x223', '\x3', '\x2', '\x2', '\x2', 'X', '\x228', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x255', '\x3', '\x2', '\x2', '\x2', '^', '\x25A', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x62', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x278', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x286', '\x3', '\x2', '\x2', '\x2', 'h', '\x28C', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x28E', '\x3', '\x2', '\x2', '\x2', 'l', '\x298', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x2A0', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x2A8', '\x3', '\x2', '\x2', '\x2', 'r', '\x2AA', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x2AC', '\x3', '\x2', '\x2', '\x2', 'v', '\x2AE', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x2B0', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x2B2', '\x3', '\x2', '\x2', '\x2', '|', '\x2B4', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2BA', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x2C7', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x86', '\x2D8', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x2EE', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x2FE', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x303', '\x3', '\x2', '\x2', '\x2', '\x90', '\x305', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x308', '\x3', '\x2', '\x2', '\x2', '\x94', '\x30B', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x30E', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x312', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x31F', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x324', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x326', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x328', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x32A', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x32C', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x32E', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x330', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x332', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xB2', '\x5', '\x4', '\x3', '\x2', '\xAD', '\xB2', '\x5', '\x6', 
		'\x4', '\x2', '\xAE', '\xB2', '\x5', '\b', '\x5', '\x2', '\xAF', '\xB2', 
		'\x5', '\x1A', '\xE', '\x2', '\xB0', '\xB2', '\x5', '\x12', '\n', '\x2', 
		'\xB1', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB8', '\a', '\x5', '\x2', '\x2', '\xB7', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBD', '\a', '\x2', '\x2', '\x3', '\xBD', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', '\x5', '\x2', '\x2', 
		'\xBF', '\xC0', '\a', '\x1A', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\"', 
		'\x12', '\x2', '\xC1', '\xC2', '\a', '\x5', '\x2', '\x2', '\xC2', '\xC3', 
		'\a', '\x11', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x1A', '\x2', '\x2', 
		'\xC4', '\x5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x5', 
		'\x2', '\x2', '\xC6', '\xC7', '\a', '\f', '\x2', '\x2', '\xC7', '\xC8', 
		'\x5', '\x9E', 'P', '\x2', '\xC8', '\xC9', '\a', '\x42', '\x2', '\x2', 
		'\xC9', '\xCA', '\x5', 'Z', '.', '\x2', '\xCA', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCE', '\x5', '\n', '\x6', '\x2', '\xCC', '\xCE', '\x5', 
		'\f', '\a', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\a', '\x5', '\x2', '\x2', '\xD0', '\xD1', '\a', 
		'\v', '\x2', '\x2', '\xD1', '\xDC', '\x5', '\x9A', 'N', '\x2', '\xD2', 
		'\xD8', '\a', '\x5', '\x2', '\x2', '\xD3', '\xD9', '\x5', '\x1E', '\x10', 
		'\x2', '\xD4', '\xD9', '\x5', ' ', '\x11', '\x2', '\xD5', '\xD9', '\x5', 
		'\x10', '\t', '\x2', '\xD6', '\xD9', '\x5', '\xE', '\b', '\x2', '\xD7', 
		'\xD9', '\x5', '\x6', '\x4', '\x2', '\xD8', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', 
		'\x5', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x11', '\x2', '\x2', '\xE1', 
		'\xE2', '\a', '\v', '\x2', '\x2', '\xE2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE4', '\a', '\x5', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x15', 
		'\x2', '\x2', '\xE5', '\xE6', '\a', '\v', '\x2', '\x2', '\xE6', '\xF0', 
		'\x5', '\x9A', 'N', '\x2', '\xE7', '\xEC', '\a', '\x5', '\x2', '\x2', 
		'\xE8', '\xED', '\x5', '\x1E', '\x10', '\x2', '\xE9', '\xED', '\x5', ' ', 
		'\x11', '\x2', '\xEA', '\xED', '\x5', '\x10', '\t', '\x2', '\xEB', '\xED', 
		'\x5', '\x6', '\x4', '\x2', '\xEC', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xF4', '\a', '\x5', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x11', 
		'\x2', '\x2', '\xF5', '\xF6', '\a', '\v', '\x2', '\x2', '\xF6', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\a', '\x5', '\x2', '\x2', 
		'\xF8', '\xFA', '\a', ' ', '\x2', '\x2', '\xF9', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x1B', '\x2', '\x2', 
		'\xFC', '\xFD', '\x5', '\x1C', '\xF', '\x2', '\xFD', '\xFE', '\x5', '\"', 
		'\x12', '\x2', '\xFE', '\xFF', '\a', '\x5', '\x2', '\x2', '\xFF', '\x100', 
		'\a', '\x11', '\x2', '\x2', '\x100', '\x101', '\a', '\x1B', '\x2', '\x2', 
		'\x101', '\xF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x104', '\a', '\x5', 
		'\x2', '\x2', '\x103', '\x105', '\a', ' ', '\x2', '\x2', '\x104', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', 
		'\x1B', '\x2', '\x2', '\x107', '\x108', '\x5', '\x18', '\r', '\x2', '\x108', 
		'\x109', '\x5', '$', '\x13', '\x2', '\x109', '\x10A', '\a', '\x5', '\x2', 
		'\x2', '\x10A', '\x10B', '\a', '\x11', '\x2', '\x2', '\x10B', '\x10C', 
		'\a', '\x1B', '\x2', '\x2', '\x10C', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x110', '\x5', '\x14', '\v', '\x2', '\x10E', '\x110', '\x5', 
		'\x16', '\f', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\a', '\x5', '\x2', '\x2', '\x112', '\x113', 
		'\a', '\x13', '\x2', '\x2', '\x113', '\x114', '\x5', '\x18', '\r', '\x2', 
		'\x114', '\x115', '\x5', '$', '\x13', '\x2', '\x115', '\x116', '\a', '\x5', 
		'\x2', '\x2', '\x116', '\x117', '\a', '\x11', '\x2', '\x2', '\x117', '\x118', 
		'\a', '\x13', '\x2', '\x2', '\x118', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\a', '\x5', '\x2', '\x2', '\x11A', '\x11B', '\a', '\x13', 
		'\x2', '\x2', '\x11B', '\x11D', '\x5', '\x18', '\r', '\x2', '\x11C', '\x11E', 
		'\a', '\x5', '\x2', '\x2', '\x11D', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x121', '\a', '\x43', '\x2', '\x2', '\x120', 
		'\x122', '\a', '\x5', '\x2', '\x2', '\x121', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x5', 'Z', '.', '\x2', 
		'\x124', '\x17', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x5', 
		'\xAA', 'V', '\x2', '\x126', '\x127', '\a', 'H', '\x2', '\x2', '\x127', 
		'\x128', '\x5', '\x34', '\x1B', '\x2', '\x128', '\x129', '\a', 'I', '\x2', 
		'\x2', '\x129', '\x12A', '\a', '\x43', '\x2', '\x2', '\x12A', '\x12B', 
		'\x5', '\x8C', 'G', '\x2', '\x12B', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\a', '\x5', '\x2', '\x2', '\x12D', '\x12E', '\a', '!', 
		'\x2', '\x2', '\x12E', '\x12F', '\x5', '\x1C', '\xF', '\x2', '\x12F', 
		'\x130', '\x5', '\"', '\x12', '\x2', '\x130', '\x131', '\a', '\x5', '\x2', 
		'\x2', '\x131', '\x132', '\a', '\x11', '\x2', '\x2', '\x132', '\x133', 
		'\a', '!', '\x2', '\x2', '\x133', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\x5', '\xA8', 'U', '\x2', '\x135', '\x137', '\a', 'H', 
		'\x2', '\x2', '\x136', '\x138', '\x5', '\x34', '\x1B', '\x2', '\x137', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\a', 'I', '\x2', '\x2', '\x13A', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\a', '\x5', '\x2', '\x2', '\x13C', '\x141', '\a', '\r', 
		'\x2', '\x2', '\x13D', '\x13E', '\a', 'H', '\x2', '\x2', '\x13E', '\x13F', 
		'\x5', '\x34', '\x1B', '\x2', '\x13F', '\x140', '\a', 'I', '\x2', '\x2', 
		'\x140', '\x142', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x5', '\"', '\x12', 
		'\x2', '\x144', '\x145', '\a', '\x5', '\x2', '\x2', '\x145', '\x146', 
		'\a', '\x11', '\x2', '\x2', '\x146', '\x147', '\a', '\r', '\x2', '\x2', 
		'\x147', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x148', '\x14A', '\a', '\x5', 
		'\x2', '\x2', '\x149', '\x14B', '\a', ' ', '\x2', '\x2', '\x14A', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', 
		'#', '\x2', '\x2', '\x14D', '\x151', '\x5', '\xA0', 'Q', '\x2', '\x14E', 
		'\x152', '\x5', '\x8C', 'G', '\x2', '\x14F', '\x150', '\a', '\x42', '\x2', 
		'\x2', '\x150', '\x152', '\x5', 'n', '\x38', '\x2', '\x151', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '!', '\x3', '\x2', '\x2', '\x2', '\x153', '\x155', '\x5', '&', 
		'\x14', '\x2', '\x154', '\x153', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x156', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15B', '\x5', '(', '\x15', '\x2', '\x15A', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '%', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15C', '\x3', '\x2', 
		'\x2', '\x2', '\x15F', '\x163', '\x5', '(', '\x15', '\x2', '\x160', '\x163', 
		'\x5', '\x30', '\x19', '\x2', '\x161', '\x163', '\x5', '*', '\x16', '\x2', 
		'\x162', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x164', '\x169', '\x5', '\x6', '\x4', 
		'\x2', '\x165', '\x169', '\x5', ',', '\x17', '\x2', '\x166', '\x169', 
		'\x5', '.', '\x18', '\x2', '\x167', '\x169', '\x5', '\x44', '#', '\x2', 
		'\x168', '\x164', '\x3', '\x2', '\x2', '\x2', '\x168', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x169', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x16B', '\a', '\x5', '\x2', '\x2', '\x16B', '\x16C', 
		'\a', '.', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\xA4', 'S', '\x2', 
		'\x16D', '\x16E', '\a', '\x42', '\x2', '\x2', '\x16E', '\x16F', '\t', 
		'\x2', '\x2', '\x2', '\x16F', '+', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x171', '\a', '\x5', '\x2', '\x2', '\x171', '\x172', '\a', '.', '\x2', 
		'\x2', '\x172', '\x173', '\x5', '\xA4', 'S', '\x2', '\x173', '\x174', 
		'\a', '\x42', '\x2', '\x2', '\x174', '\x175', '\x5', 'Z', '.', '\x2', 
		'\x175', '-', '\x3', '\x2', '\x2', '\x2', '\x176', '\x178', '\a', '\x5', 
		'\x2', '\x2', '\x177', '\x179', '\t', '\x3', '\x2', '\x2', '\x178', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', '\x5', 
		'h', '\x35', '\x2', '\x17B', '\x17E', '\a', '\x42', '\x2', '\x2', '\x17C', 
		'\x17E', '\x5', '\x38', '\x1D', '\x2', '\x17D', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x5', 'Z', '.', '\x2', 
		'\x180', '/', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\a', '\x5', 
		'\x2', '\x2', '\x182', '\x183', '\x5', '\xA8', 'U', '\x2', '\x183', '\x185', 
		'\a', 'H', '\x2', '\x2', '\x184', '\x186', '\x5', '\x32', '\x1A', '\x2', 
		'\x185', '\x184', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', 
		'\x188', '\a', 'I', '\x2', '\x2', '\x188', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x18E', '\x5', 'Z', '.', '\x2', '\x18A', '\x18B', '\a', 
		'L', '\x2', '\x2', '\x18B', '\x18D', '\x5', 'Z', '.', '\x2', '\x18C', 
		'\x18A', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x191', '\x196', '\x5', 
		'\x36', '\x1C', '\x2', '\x192', '\x193', '\a', 'L', '\x2', '\x2', '\x193', 
		'\x195', '\x5', '\x36', '\x1C', '\x2', '\x194', '\x192', '\x3', '\x2', 
		'\x2', '\x2', '\x195', '\x198', '\x3', '\x2', '\x2', '\x2', '\x196', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x35', '\x3', '\x2', '\x2', '\x2', '\x198', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x199', '\x19B', '\a', '\x5', '\x2', '\x2', '\x19A', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', 
		'\x5', '\xA2', 'R', '\x2', '\x19D', '\x19E', '\x5', '\x8C', 'G', '\x2', 
		'\x19E', '\x37', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\t', '\x4', 
		'\x2', '\x2', '\x1A0', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', 
		'\t', '\x5', '\x2', '\x2', '\x1A2', ';', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A7', '\x5', '>', ' ', '\x2', '\x1A4', '\x1A7', '\x5', '@', '!', '\x2', 
		'\x1A5', '\x1A7', '\x5', '\x42', '\"', '\x2', '\x1A6', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A9', '\t', '\x6', '\x2', '\x2', '\x1A9', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\t', '\a', '\x2', '\x2', '\x1AB', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\t', '\b', '\x2', 
		'\x2', '\x1AD', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B6', 
		'\x5', 'H', '%', '\x2', '\x1AF', '\x1B6', '\x5', 'J', '&', '\x2', '\x1B0', 
		'\x1B6', '\x5', 'L', '\'', '\x2', '\x1B1', '\x1B6', '\x5', 'N', '(', '\x2', 
		'\x1B2', '\x1B6', '\x5', 'P', ')', '\x2', '\x1B3', '\x1B6', '\x5', 'R', 
		'*', '\x2', '\x1B4', '\x1B6', '\x5', 'T', '+', '\x2', '\x1B5', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', 
		'\x5', 'Z', '.', '\x2', '\x1B8', '\x1B9', '\x5', '\x42', '\"', '\x2', 
		'\x1B9', '\x1BA', '\x5', 'Z', '.', '\x2', '\x1BA', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB', '\x1BC', '\a', '\x5', '\x2', '\x2', '\x1BC', '\x1BD', 
		'\a', '\x14', '\x2', '\x2', '\x1BD', '\x1BE', '\x5', '\x46', '$', '\x2', 
		'\x1BE', '\x1BF', '\a', ')', '\x2', '\x2', '\x1BF', '\x1C0', '\x5', '\"', 
		'\x12', '\x2', '\x1C0', '\x1C9', '\a', '\x5', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\a', '\x10', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '\x14', '\x2', '\x2', 
		'\x1C3', '\x1C4', '\x5', '\x46', '$', '\x2', '\x1C4', '\x1C5', '\a', ')', 
		'\x2', '\x2', '\x1C5', '\x1C6', '\x5', '\"', '\x12', '\x2', '\x1C6', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1CD', '\a', '\x5', '\x2', '\x2', '\x1CD', '\x1CE', 
		'\a', '\x10', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', '\"', '\x12', '\x2', 
		'\x1CF', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\a', '\x5', '\x2', '\x2', '\x1D2', '\x1D3', '\a', '\x11', '\x2', 
		'\x2', '\x1D3', '\x1D4', '\a', '\x14', '\x2', '\x2', '\x1D4', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\a', '\x5', '\x2', '\x2', '\x1D6', 
		'\x1D7', '\a', '\x12', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', '\xA4', 
		'S', '\x2', '\x1D8', '\x1D9', '\a', '\x42', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\x5', 'Z', '.', '\x2', '\x1DA', '\x1DB', '\a', '\x3', '\x2', '\x2', '\x1DB', 
		'\x1DC', '\x5', 'Z', '.', '\x2', '\x1DC', '\x1DD', '\x5', '\"', '\x12', 
		'\x2', '\x1DD', '\x1E2', '\a', '\x5', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\a', '\x11', '\x2', '\x2', '\x1DF', '\x1E3', '\a', '\x12', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\a', '\x1D', '\x2', '\x2', '\x1E1', '\x1E3', '\x5', 
		'\xA4', 'S', '\x2', '\x1E2', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E3', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x1E4', '\x1E5', '\a', '\x5', '\x2', '\x2', '\x1E5', '\x1E6', 
		'\a', '\x12', '\x2', '\x2', '\x1E6', '\x1E7', '\x5', '\xA4', 'S', '\x2', 
		'\x1E7', '\x1E8', '\a', '\x17', '\x2', '\x2', '\x1E8', '\x1E9', '\x5', 
		'Z', '.', '\x2', '\x1E9', '\x1EA', '\x5', '\"', '\x12', '\x2', '\x1EA', 
		'\x1EF', '\a', '\x5', '\x2', '\x2', '\x1EB', '\x1EC', '\a', '\x11', '\x2', 
		'\x2', '\x1EC', '\x1F0', '\a', '\x12', '\x2', '\x2', '\x1ED', '\x1EE', 
		'\a', '\x1D', '\x2', '\x2', '\x1EE', '\x1F0', '\x5', '\xA4', 'S', '\x2', 
		'\x1EF', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', 'M', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1F2', '\a', '\x5', '\x2', '\x2', '\x1F2', '\x1F3', '\a', '/', '\x2', 
		'\x2', '\x1F3', '\x1F4', '\x5', '\x46', '$', '\x2', '\x1F4', '\x1F5', 
		'\x5', '\"', '\x12', '\x2', '\x1F5', '\x1F6', '\a', '\x5', '\x2', '\x2', 
		'\x1F6', '\x1F7', '\a', '\x11', '\x2', '\x2', '\x1F7', '\x1F8', '\a', 
		'/', '\x2', '\x2', '\x1F8', 'O', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\a', '\x5', '\x2', '\x2', '\x1FA', '\x202', '\a', '%', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\a', '\xF', '\x2', '\x2', '\x1FC', '\x1FD', 
		'\x5', '\"', '\x12', '\x2', '\x1FD', '\x1FE', '\a', '\x5', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\a', '-', '\x2', '\x2', '\x1FF', '\x200', '\x5', '\x46', 
		'$', '\x2', '\x200', '\x202', '\x3', '\x2', '\x2', '\x2', '\x201', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x202', 'Q', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\a', '\x5', 
		'\x2', '\x2', '\x204', '\x205', '\a', ',', '\x2', '\x2', '\x205', '\x20D', 
		'\x5', '\"', '\x12', '\x2', '\x206', '\x207', '\a', '\x5', '\x2', '\x2', 
		'\x207', '\x208', '\a', '\n', '\x2', '\x2', '\x208', '\x209', '\a', '\n', 
		'\x2', '\x2', '\x209', '\x20A', '\x5', '\xA4', 'S', '\x2', '\x20A', '\x20B', 
		'\x5', '\x8C', 'G', '\x2', '\x20B', '\x20C', '\x5', '\"', '\x12', '\x2', 
		'\x20C', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\a', '\x5', '\x2', 
		'\x2', '\x210', '\x211', '\a', '\x11', '\x2', '\x2', '\x211', '\x212', 
		'\a', ',', '\x2', '\x2', '\x212', 'S', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x214', '\a', '\x5', '\x2', '\x2', '\x214', '\x215', '\a', '\'', '\x2', 
		'\x2', '\x215', '\x216', '\x5', 'Z', '.', '\x2', '\x216', '\x21A', '\a', 
		'M', '\x2', '\x2', '\x217', '\x219', '\x5', 'V', ',', '\x2', '\x218', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21C', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21E', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21F', '\x5', 
		'X', '-', '\x2', '\x21E', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', 
		'\x2', '\x220', '\x221', '\a', '\x11', '\x2', '\x2', '\x221', '\x222', 
		'\a', '\'', '\x2', '\x2', '\x222', 'U', '\x3', '\x2', '\x2', '\x2', '\x223', 
		'\x224', '\a', '\x5', '\x2', '\x2', '\x224', '\x225', '\a', '\t', '\x2', 
		'\x2', '\x225', '\x226', '\a', 'M', '\x2', '\x2', '\x226', '\x227', '\x5', 
		'\"', '\x12', '\x2', '\x227', 'W', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x229', '\a', '\x5', '\x2', '\x2', '\x229', '\x22A', '\a', '\xE', '\x2', 
		'\x2', '\x22A', '\x22B', '\a', 'M', '\x2', '\x2', '\x22B', '\x22C', '\x5', 
		'\"', '\x12', '\x2', '\x22C', 'Y', '\x3', '\x2', '\x2', '\x2', '\x22D', 
		'\x22E', '\b', '.', '\x1', '\x2', '\x22E', '\x22F', '\a', '\x6', '\x2', 
		'\x2', '\x22F', '\x248', '\x5', 'Z', '.', '\xF', '\x230', '\x248', '\x5', 
		'`', '\x31', '\x2', '\x231', '\x248', '\x5', '\x62', '\x32', '\x2', '\x232', 
		'\x248', '\x5', '\x64', '\x33', '\x2', '\x233', '\x234', '\x5', ':', '\x1E', 
		'\x2', '\x234', '\x235', '\x5', 'Z', '.', '\v', '\x235', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x248', '\x5', '\x86', '\x44', '\x2', '\x237', 
		'\x248', '\x5', '\x88', '\x45', '\x2', '\x238', '\x239', '\a', '\x14', 
		'\x2', '\x2', '\x239', '\x23A', '\x5', 'Z', '.', '\x2', '\x23A', '\x23B', 
		'\a', ')', '\x2', '\x2', '\x23B', '\x23C', '\x5', 'Z', '.', '\x2', '\x23C', 
		'\x23D', '\a', '\x10', '\x2', '\x2', '\x23D', '\x23E', '\x5', 'Z', '.', 
		'\x6', '\x23E', '\x248', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', 
		'\a', 'H', '\x2', '\x2', '\x240', '\x241', '\x5', 'Z', '.', '\x2', '\x241', 
		'\x242', '\a', 'I', '\x2', '\x2', '\x242', '\x248', '\x3', '\x2', '\x2', 
		'\x2', '\x243', '\x248', '\x5', '\\', '/', '\x2', '\x244', '\x245', '\x5', 
		'^', '\x30', '\x2', '\x245', '\x246', '\x5', 'Z', '.', '\x3', '\x246', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x247', '\x22D', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x230', '\x3', '\x2', '\x2', '\x2', '\x247', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x233', '\x3', '\x2', '\x2', '\x2', '\x247', '\x236', '\x3', 
		'\x2', '\x2', '\x2', '\x247', '\x237', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x238', '\x3', '\x2', '\x2', '\x2', '\x247', '\x23F', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x243', '\x3', '\x2', '\x2', '\x2', '\x247', '\x244', 
		'\x3', '\x2', '\x2', '\x2', '\x248', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x24A', '\f', '\n', '\x2', '\x2', '\x24A', '\x24B', '\x5', '<', 
		'\x1F', '\x2', '\x24B', '\x24C', '\x5', 'Z', '.', '\v', '\x24C', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\f', '\b', '\x2', '\x2', 
		'\x24E', '\x24F', '\a', 'K', '\x2', '\x2', '\x24F', '\x251', '\x5', '\x86', 
		'\x44', '\x2', '\x250', '\x249', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x24D', '\x3', '\x2', '\x2', '\x2', '\x251', '\x254', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x250', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x252', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\a', 
		'\x18', '\x2', '\x2', '\x256', '\x257', '\x5', '\x32', '\x1A', '\x2', 
		'\x257', '\x258', '\a', '\x43', '\x2', '\x2', '\x258', '\x259', '\x5', 
		'Z', '.', '\x2', '\x259', ']', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', 
		'\a', '\x19', '\x2', '\x2', '\x25B', '\x260', '\x5', ',', '\x17', '\x2', 
		'\x25C', '\x25D', '\a', 'L', '\x2', '\x2', '\x25D', '\x25F', '\x5', ',', 
		'\x17', '\x2', '\x25E', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25F', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x260', '\x25E', '\x3', '\x2', '\x2', 
		'\x2', '\x260', '\x261', '\x3', '\x2', '\x2', '\x2', '\x261', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x262', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x264', '\a', '\x17', '\x2', '\x2', '\x264', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x265', '\x26C', '\x5', 'n', '\x38', '\x2', '\x266', '\x267', 
		'\a', '\"', '\x2', '\x2', '\x267', '\x269', '\a', '\x1F', '\x2', '\x2', 
		'\x268', '\x266', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\x3', 
		'\x2', '\x2', '\x2', '\x269', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x26C', '\x5', '\x9C', 'O', '\x2', '\x26B', '\x265', '\x3', '\x2', '\x2', 
		'\x2', '\x26B', '\x268', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\x5', '\x9C', 'O', '\x2', 
		'\x26E', '\x274', '\a', '\x46', '\x2', '\x2', '\x26F', '\x275', '\x5', 
		'Z', '.', '\x2', '\x270', '\x271', '\x5', 'Z', '.', '\x2', '\x271', '\x272', 
		'\a', 'L', '\x2', '\x2', '\x272', '\x273', '\x5', 'Z', '.', '\x2', '\x273', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x274', '\x26F', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x270', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\a', 'G', '\x2', '\x2', 
		'\x277', '\x63', '\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\x5', 
		'\x9C', 'O', '\x2', '\x279', '\x27A', '\a', '\x46', '\x2', '\x2', '\x27A', 
		'\x27B', '\x5', '\x66', '\x34', '\x2', '\x27B', '\x27C', '\a', 'G', '\x2', 
		'\x2', '\x27C', '\x65', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', 
		'\x5', 'Z', '.', '\x2', '\x27E', '\x27F', '\a', 'J', '\x2', '\x2', '\x27F', 
		'\x280', '\x5', 'Z', '.', '\x2', '\x280', '\x287', '\x3', '\x2', '\x2', 
		'\x2', '\x281', '\x282', '\x5', 'Z', '.', '\x2', '\x282', '\x283', '\a', 
		'J', '\x2', '\x2', '\x283', '\x287', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\a', 'J', '\x2', '\x2', '\x285', '\x287', '\x5', 'Z', '.', '\x2', 
		'\x286', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x286', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x286', '\x284', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x288', '\x28D', '\x5', '\x9C', 'O', 
		'\x2', '\x289', '\x28D', '\x5', '\x62', '\x32', '\x2', '\x28A', '\x28D', 
		'\x5', 'j', '\x36', '\x2', '\x28B', '\x28D', '\x5', 'l', '\x37', '\x2', 
		'\x28C', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x289', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x28D', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x28E', '\x28F', '\a', 'H', '\x2', '\x2', '\x28F', '\x292', '\x5', 
		'\x9C', 'O', '\x2', '\x290', '\x291', '\a', 'L', '\x2', '\x2', '\x291', 
		'\x293', '\x5', '\x9C', 'O', '\x2', '\x292', '\x290', '\x3', '\x2', '\x2', 
		'\x2', '\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', '\x292', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', '\x2', 
		'\x295', '\x296', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', '\a', 
		'I', '\x2', '\x2', '\x297', 'k', '\x3', '\x2', '\x2', '\x2', '\x298', 
		'\x299', '\a', '\x44', '\x2', '\x2', '\x299', '\x29A', '\x5', '\x9C', 
		'O', '\x2', '\x29A', '\x29B', '\a', 'M', '\x2', '\x2', '\x29B', '\x29C', 
		'\x5', '\x9C', 'O', '\x2', '\x29C', '\x29D', '\a', '\x45', '\x2', '\x2', 
		'\x29D', 'm', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A1', '\x5', 'p', 
		'\x39', '\x2', '\x29F', '\x2A1', '\x5', '~', '@', '\x2', '\x2A0', '\x29E', 
		'\x3', '\x2', '\x2', '\x2', '\x2A0', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', 'o', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A9', '\x5', 'r', 
		':', '\x2', '\x2A3', '\x2A9', '\x5', 't', ';', '\x2', '\x2A4', '\x2A9', 
		'\x5', 'v', '<', '\x2', '\x2A5', '\x2A9', '\x5', 'x', '=', '\x2', '\x2A6', 
		'\x2A9', '\x5', 'z', '>', '\x2', '\x2A7', '\x2A9', '\x5', '|', '?', '\x2', 
		'\x2A8', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A3', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A8', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\a', '\x31', '\x2', '\x2', '\x2AB', 
		's', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', '\x38', '\x2', 
		'\x2', '\x2AD', 'u', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\a', 
		'\x39', '\x2', '\x2', '\x2AF', 'w', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\a', ':', '\x2', '\x2', '\x2B1', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x2B2', '\x2B3', '\a', ';', '\x2', '\x2', '\x2B3', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x2B4', '\x2B5', '\a', '<', '\x2', '\x2', '\x2B5', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B9', '\x5', '\x80', '\x41', '\x2', 
		'\x2B7', '\x2B9', '\x5', '\x82', '\x42', '\x2', '\x2B8', '\x2B6', '\x3', 
		'\x2', '\x2', '\x2', '\x2B8', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B9', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2C3', '\a', '\x44', '\x2', 
		'\x2', '\x2BB', '\x2C0', '\x5', 'n', '\x38', '\x2', '\x2BC', '\x2BD', 
		'\a', 'L', '\x2', '\x2', '\x2BD', '\x2BF', '\x5', 'n', '\x38', '\x2', 
		'\x2BE', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C2', '\x3', 
		'\x2', '\x2', '\x2', '\x2C0', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C2', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2BB', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\x3', '\x2', '\x2', '\x2', 
		'\x2C4', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C6', '\a', 
		'\x45', '\x2', '\x2', '\x2C6', '\x81', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2D0', '\a', '\x44', '\x2', '\x2', '\x2C8', '\x2CD', '\x5', '\x84', 
		'\x43', '\x2', '\x2C9', '\x2CA', '\a', 'L', '\x2', '\x2', '\x2CA', '\x2CC', 
		'\x5', '\x84', '\x43', '\x2', '\x2CB', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x2CC', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CD', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', 
		'\x2', '\x2D0', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', 
		'\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\x3', '\x2', '\x2', '\x2', 
		'\x2D2', '\x2D3', '\a', '\x45', '\x2', '\x2', '\x2D3', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\x5', 'n', '\x38', '\x2', '\x2D5', 
		'\x2D6', '\a', 'M', '\x2', '\x2', '\x2D6', '\x2D7', '\x5', 'n', '\x38', 
		'\x2', '\x2D7', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', 
		'\x5', '\xAA', 'V', '\x2', '\x2D9', '\x2DB', '\a', 'H', '\x2', '\x2', 
		'\x2DA', '\x2DC', '\x5', '\x32', '\x1A', '\x2', '\x2DB', '\x2DA', '\x3', 
		'\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DC', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', '\a', 'I', '\x2', 
		'\x2', '\x2DE', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', 
		'\a', '\x1C', '\x2', '\x2', '\x2E0', '\x2E1', '\x5', '\x8C', 'G', '\x2', 
		'\x2E1', '\x2E3', '\a', 'H', '\x2', '\x2', '\x2E2', '\x2E4', '\x5', '\x32', 
		'\x1A', '\x2', '\x2E3', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E3', 
		'\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\x3', '\x2', '\x2', 
		'\x2', '\x2E5', '\x2E7', '\a', 'I', '\x2', '\x2', '\x2E6', '\x2E8', '\x5', 
		'\x8A', '\x46', '\x2', '\x2E7', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E7', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2ED', '\x3', '\x2', '\x2', 
		'\x2', '\x2E9', '\x2EA', '\x5', '\x9C', 'O', '\x2', '\x2EA', '\x2EB', 
		'\x5', '\x8A', '\x46', '\x2', '\x2EB', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2EC', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2E9', '\x3', 
		'\x2', '\x2', '\x2', '\x2ED', '\x89', '\x3', '\x2', '\x2', '\x2', '\x2EE', 
		'\x2EF', '\a', '\x30', '\x2', '\x2', '\x2EF', '\x2F0', '\a', '\x44', '\x2', 
		'\x2', '\x2F0', '\x2F5', '\x5', '.', '\x18', '\x2', '\x2F1', '\x2F2', 
		'\a', 'L', '\x2', '\x2', '\x2F2', '\x2F4', '\x5', '.', '\x18', '\x2', 
		'\x2F3', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F7', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F5', 
		'\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F8', '\x3', '\x2', '\x2', 
		'\x2', '\x2F7', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', 
		'\a', '\x45', '\x2', '\x2', '\x2F9', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2FF', '\a', '\x32', '\x2', '\x2', '\x2FB', '\x2FF', '\x5', 
		'\x8E', 'H', '\x2', '\x2FC', '\x2FF', '\x5', '\x9A', 'N', '\x2', '\x2FD', 
		'\x2FF', '\x5', '\x98', 'M', '\x2', '\x2FE', '\x2FA', '\x3', '\x2', '\x2', 
		'\x2', '\x2FE', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x2FF', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x300', '\x304', '\x5', 
		'\x90', 'I', '\x2', '\x301', '\x304', '\x5', '\x92', 'J', '\x2', '\x302', 
		'\x304', '\x5', '\x94', 'K', '\x2', '\x303', '\x300', '\x3', '\x2', '\x2', 
		'\x2', '\x303', '\x301', '\x3', '\x2', '\x2', '\x2', '\x303', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x304', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x306', '\a', '\x33', '\x2', '\x2', '\x306', '\x307', '\x5', 
		'\x96', 'L', '\x2', '\x307', '\x91', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x309', '\a', '\x34', '\x2', '\x2', '\x309', '\x30A', '\x5', '\x96', 
		'L', '\x2', '\x30A', '\x93', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', 
		'\a', '\x35', '\x2', '\x2', '\x30C', '\x30D', '\x5', '\x96', 'L', '\x2', 
		'\x30D', '\x95', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\a', 'U', 
		'\x2', '\x2', '\x30F', '\x310', '\x5', '\x8C', 'G', '\x2', '\x310', '\x311', 
		'\a', 'V', '\x2', '\x2', '\x311', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x312', '\x313', '\a', 'H', '\x2', '\x2', '\x313', '\x318', '\x5', '\x8C', 
		'G', '\x2', '\x314', '\x315', '\a', 'L', '\x2', '\x2', '\x315', '\x317', 
		'\x5', '\x8C', 'G', '\x2', '\x316', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\x317', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x318', '\x316', '\x3', 
		'\x2', '\x2', '\x2', '\x318', '\x319', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x31B', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x318', '\x3', '\x2', '\x2', 
		'\x2', '\x31B', '\x31C', '\a', '\x43', '\x2', '\x2', '\x31C', '\x31D', 
		'\x5', '\x8C', 'G', '\x2', '\x31D', '\x31E', '\a', 'I', '\x2', '\x2', 
		'\x31E', '\x99', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', '\a', '\x37', 
		'\x2', '\x2', '\x320', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x321', '\x325', 
		'\x5', '\x9E', 'P', '\x2', '\x322', '\x325', '\x5', '\xA4', 'S', '\x2', 
		'\x323', '\x325', '\x5', '\xA6', 'T', '\x2', '\x324', '\x321', '\x3', 
		'\x2', '\x2', '\x2', '\x324', '\x322', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x323', '\x3', '\x2', '\x2', '\x2', '\x325', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x326', '\x327', '\a', '\x36', '\x2', '\x2', '\x327', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x328', '\x329', '\a', '\x36', '\x2', '\x2', 
		'\x329', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x32B', '\a', '\x36', 
		'\x2', '\x2', '\x32B', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', 
		'\a', '\x36', '\x2', '\x2', '\x32D', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x32E', '\x32F', '\a', '\x36', '\x2', '\x2', '\x32F', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x330', '\x331', '\a', '\x36', '\x2', '\x2', '\x331', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\a', '\x36', '\x2', 
		'\x2', '\x333', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x41', '\xB1', '\xB3', 
		'\xB9', '\xCD', '\xD8', '\xDC', '\xEC', '\xF0', '\xF9', '\x104', '\x10F', 
		'\x11D', '\x121', '\x137', '\x141', '\x14A', '\x151', '\x156', '\x15C', 
		'\x162', '\x168', '\x178', '\x17D', '\x185', '\x18E', '\x196', '\x19A', 
		'\x1A6', '\x1B5', '\x1C9', '\x1CF', '\x1E2', '\x1EF', '\x201', '\x20D', 
		'\x21A', '\x21E', '\x247', '\x250', '\x252', '\x260', '\x268', '\x26B', 
		'\x274', '\x286', '\x28C', '\x294', '\x2A0', '\x2A8', '\x2B8', '\x2C0', 
		'\x2C3', '\x2CD', '\x2D0', '\x2DB', '\x2E3', '\x2E7', '\x2EC', '\x2F5', 
		'\x2FE', '\x303', '\x318', '\x324',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
